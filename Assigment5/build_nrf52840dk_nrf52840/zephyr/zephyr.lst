
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	200022a0 	.word	0x200022a0
}
   4:	00001d61 	.word	0x00001d61
   8:	00005c35 	.word	0x00005c35
   c:	00001d4d 	.word	0x00001d4d
  10:	00001d4d 	.word	0x00001d4d
  14:	00001d4d 	.word	0x00001d4d
  18:	00001d4d 	.word	0x00001d4d
	...
  2c:	00001ba1 	.word	0x00001ba1
  30:	00001d4d 	.word	0x00001d4d
  34:	00000000 	.word	0x00000000
  38:	00001b4d 	.word	0x00001b4d
  3c:	00001d4d 	.word	0x00001d4d

00000040 <_irq_vector_table>:
  40:	00001b05 00001b05 00001b05 00001b05     ................
  50:	00001b05 00001b05 00001b05 00001b05     ................
  60:	00001b05 00001b05 00001b05 00001b05     ................
  70:	00001b05 00001b05 00001b05 00001b05     ................
  80:	00001b05 00001b05 00001b05 00001b05     ................
  90:	00001b05 00001b05 00001b05 00001b05     ................
  a0:	00001b05 00001b05 00001b05 00001b05     ................
  b0:	00001b05 00001b05 00001b05 00001b05     ................
  c0:	00001b05 00001b05 00001b05 00001b05     ................
  d0:	00001b05 00001b05 00001b05 00001b05     ................
  e0:	00001b05 00001b05 00001b05 00001b05     ................
  f0:	00001b05 00001b05 00001b05 00001b05     ................

Disassembly of section text:

00000100 <__aeabi_fmul>:
     100:	f04f 0cff 	mov.w	ip, #255	; 0xff
     104:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
     108:	bf1e      	ittt	ne
     10a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
     10e:	ea92 0f0c 	teqne	r2, ip
     112:	ea93 0f0c 	teqne	r3, ip
     116:	d06f      	beq.n	1f8 <__data_size+0x1c>
     118:	441a      	add	r2, r3
     11a:	ea80 0c01 	eor.w	ip, r0, r1
     11e:	0240      	lsls	r0, r0, #9
     120:	bf18      	it	ne
     122:	ea5f 2141 	movsne.w	r1, r1, lsl #9
     126:	d01e      	beq.n	166 <CONFIG_IDLE_STACK_SIZE+0x26>
     128:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
     12c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
     130:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
     134:	fba0 3101 	umull	r3, r1, r0, r1
     138:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
     13c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
     140:	bf3e      	ittt	cc
     142:	0049      	lslcc	r1, r1, #1
     144:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
     148:	005b      	lslcc	r3, r3, #1
     14a:	ea40 0001 	orr.w	r0, r0, r1
     14e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
     152:	2afd      	cmp	r2, #253	; 0xfd
     154:	d81d      	bhi.n	192 <CONFIG_IDLE_STACK_SIZE+0x52>
     156:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     15a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     15e:	bf08      	it	eq
     160:	f020 0001 	biceq.w	r0, r0, #1
     164:	4770      	bx	lr
     166:	f090 0f00 	teq	r0, #0
     16a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
     16e:	bf08      	it	eq
     170:	0249      	lsleq	r1, r1, #9
     172:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
     176:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
     17a:	3a7f      	subs	r2, #127	; 0x7f
     17c:	bfc2      	ittt	gt
     17e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
     182:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
     186:	4770      	bxgt	lr
     188:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     18c:	f04f 0300 	mov.w	r3, #0
     190:	3a01      	subs	r2, #1
     192:	dc5d      	bgt.n	250 <__data_size+0x74>
     194:	f112 0f19 	cmn.w	r2, #25
     198:	bfdc      	itt	le
     19a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
     19e:	4770      	bxle	lr
     1a0:	f1c2 0200 	rsb	r2, r2, #0
     1a4:	0041      	lsls	r1, r0, #1
     1a6:	fa21 f102 	lsr.w	r1, r1, r2
     1aa:	f1c2 0220 	rsb	r2, r2, #32
     1ae:	fa00 fc02 	lsl.w	ip, r0, r2
     1b2:	ea5f 0031 	movs.w	r0, r1, rrx
     1b6:	f140 0000 	adc.w	r0, r0, #0
     1ba:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
     1be:	bf08      	it	eq
     1c0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     1c4:	4770      	bx	lr
     1c6:	f092 0f00 	teq	r2, #0
     1ca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
     1ce:	bf02      	ittt	eq
     1d0:	0040      	lsleq	r0, r0, #1
     1d2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
     1d6:	3a01      	subeq	r2, #1
     1d8:	d0f9      	beq.n	1ce <CONFIG_IDLE_STACK_SIZE+0x8e>
     1da:	ea40 000c 	orr.w	r0, r0, ip
     1de:	f093 0f00 	teq	r3, #0
     1e2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     1e6:	bf02      	ittt	eq
     1e8:	0049      	lsleq	r1, r1, #1
     1ea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
     1ee:	3b01      	subeq	r3, #1
     1f0:	d0f9      	beq.n	1e6 <__data_size+0xa>
     1f2:	ea41 010c 	orr.w	r1, r1, ip
     1f6:	e78f      	b.n	118 <__aeabi_fmul+0x18>
     1f8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
     1fc:	ea92 0f0c 	teq	r2, ip
     200:	bf18      	it	ne
     202:	ea93 0f0c 	teqne	r3, ip
     206:	d00a      	beq.n	21e <__data_size+0x42>
     208:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
     20c:	bf18      	it	ne
     20e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
     212:	d1d8      	bne.n	1c6 <CONFIG_IDLE_STACK_SIZE+0x86>
     214:	ea80 0001 	eor.w	r0, r0, r1
     218:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     21c:	4770      	bx	lr
     21e:	f090 0f00 	teq	r0, #0
     222:	bf17      	itett	ne
     224:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
     228:	4608      	moveq	r0, r1
     22a:	f091 0f00 	teqne	r1, #0
     22e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
     232:	d014      	beq.n	25e <__data_size+0x82>
     234:	ea92 0f0c 	teq	r2, ip
     238:	d101      	bne.n	23e <__data_size+0x62>
     23a:	0242      	lsls	r2, r0, #9
     23c:	d10f      	bne.n	25e <__data_size+0x82>
     23e:	ea93 0f0c 	teq	r3, ip
     242:	d103      	bne.n	24c <__data_size+0x70>
     244:	024b      	lsls	r3, r1, #9
     246:	bf18      	it	ne
     248:	4608      	movne	r0, r1
     24a:	d108      	bne.n	25e <__data_size+0x82>
     24c:	ea80 0001 	eor.w	r0, r0, r1
     250:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     254:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     258:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     25c:	4770      	bx	lr
     25e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     262:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
     266:	4770      	bx	lr

00000268 <__aeabi_frsub>:
     268:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
     26c:	e002      	b.n	274 <__addsf3>
     26e:	bf00      	nop

00000270 <__aeabi_fsub>:
     270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00000274 <__addsf3>:
     274:	0042      	lsls	r2, r0, #1
     276:	bf1f      	itttt	ne
     278:	ea5f 0341 	movsne.w	r3, r1, lsl #1
     27c:	ea92 0f03 	teqne	r2, r3
     280:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
     284:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     288:	d06a      	beq.n	360 <__addsf3+0xec>
     28a:	ea4f 6212 	mov.w	r2, r2, lsr #24
     28e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
     292:	bfc1      	itttt	gt
     294:	18d2      	addgt	r2, r2, r3
     296:	4041      	eorgt	r1, r0
     298:	4048      	eorgt	r0, r1
     29a:	4041      	eorgt	r1, r0
     29c:	bfb8      	it	lt
     29e:	425b      	neglt	r3, r3
     2a0:	2b19      	cmp	r3, #25
     2a2:	bf88      	it	hi
     2a4:	4770      	bxhi	lr
     2a6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
     2aa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     2ae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     2b2:	bf18      	it	ne
     2b4:	4240      	negne	r0, r0
     2b6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     2ba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
     2be:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
     2c2:	bf18      	it	ne
     2c4:	4249      	negne	r1, r1
     2c6:	ea92 0f03 	teq	r2, r3
     2ca:	d03f      	beq.n	34c <__addsf3+0xd8>
     2cc:	f1a2 0201 	sub.w	r2, r2, #1
     2d0:	fa41 fc03 	asr.w	ip, r1, r3
     2d4:	eb10 000c 	adds.w	r0, r0, ip
     2d8:	f1c3 0320 	rsb	r3, r3, #32
     2dc:	fa01 f103 	lsl.w	r1, r1, r3
     2e0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     2e4:	d502      	bpl.n	2ec <__addsf3+0x78>
     2e6:	4249      	negs	r1, r1
     2e8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
     2ec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
     2f0:	d313      	bcc.n	31a <__addsf3+0xa6>
     2f2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
     2f6:	d306      	bcc.n	306 <__addsf3+0x92>
     2f8:	0840      	lsrs	r0, r0, #1
     2fa:	ea4f 0131 	mov.w	r1, r1, rrx
     2fe:	f102 0201 	add.w	r2, r2, #1
     302:	2afe      	cmp	r2, #254	; 0xfe
     304:	d251      	bcs.n	3aa <__addsf3+0x136>
     306:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
     30a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     30e:	bf08      	it	eq
     310:	f020 0001 	biceq.w	r0, r0, #1
     314:	ea40 0003 	orr.w	r0, r0, r3
     318:	4770      	bx	lr
     31a:	0049      	lsls	r1, r1, #1
     31c:	eb40 0000 	adc.w	r0, r0, r0
     320:	3a01      	subs	r2, #1
     322:	bf28      	it	cs
     324:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
     328:	d2ed      	bcs.n	306 <__addsf3+0x92>
     32a:	fab0 fc80 	clz	ip, r0
     32e:	f1ac 0c08 	sub.w	ip, ip, #8
     332:	ebb2 020c 	subs.w	r2, r2, ip
     336:	fa00 f00c 	lsl.w	r0, r0, ip
     33a:	bfaa      	itet	ge
     33c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
     340:	4252      	neglt	r2, r2
     342:	4318      	orrge	r0, r3
     344:	bfbc      	itt	lt
     346:	40d0      	lsrlt	r0, r2
     348:	4318      	orrlt	r0, r3
     34a:	4770      	bx	lr
     34c:	f092 0f00 	teq	r2, #0
     350:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
     354:	bf06      	itte	eq
     356:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
     35a:	3201      	addeq	r2, #1
     35c:	3b01      	subne	r3, #1
     35e:	e7b5      	b.n	2cc <__addsf3+0x58>
     360:	ea4f 0341 	mov.w	r3, r1, lsl #1
     364:	ea7f 6c22 	mvns.w	ip, r2, asr #24
     368:	bf18      	it	ne
     36a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     36e:	d021      	beq.n	3b4 <__addsf3+0x140>
     370:	ea92 0f03 	teq	r2, r3
     374:	d004      	beq.n	380 <__addsf3+0x10c>
     376:	f092 0f00 	teq	r2, #0
     37a:	bf08      	it	eq
     37c:	4608      	moveq	r0, r1
     37e:	4770      	bx	lr
     380:	ea90 0f01 	teq	r0, r1
     384:	bf1c      	itt	ne
     386:	2000      	movne	r0, #0
     388:	4770      	bxne	lr
     38a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
     38e:	d104      	bne.n	39a <__addsf3+0x126>
     390:	0040      	lsls	r0, r0, #1
     392:	bf28      	it	cs
     394:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
     398:	4770      	bx	lr
     39a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
     39e:	bf3c      	itt	cc
     3a0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
     3a4:	4770      	bxcc	lr
     3a6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     3aa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
     3ae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     3b2:	4770      	bx	lr
     3b4:	ea7f 6222 	mvns.w	r2, r2, asr #24
     3b8:	bf16      	itet	ne
     3ba:	4608      	movne	r0, r1
     3bc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
     3c0:	4601      	movne	r1, r0
     3c2:	0242      	lsls	r2, r0, #9
     3c4:	bf06      	itte	eq
     3c6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
     3ca:	ea90 0f01 	teqeq	r0, r1
     3ce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
     3d2:	4770      	bx	lr

000003d4 <__aeabi_ui2f>:
     3d4:	f04f 0300 	mov.w	r3, #0
     3d8:	e004      	b.n	3e4 <__aeabi_i2f+0x8>
     3da:	bf00      	nop

000003dc <__aeabi_i2f>:
     3dc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
     3e0:	bf48      	it	mi
     3e2:	4240      	negmi	r0, r0
     3e4:	ea5f 0c00 	movs.w	ip, r0
     3e8:	bf08      	it	eq
     3ea:	4770      	bxeq	lr
     3ec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
     3f0:	4601      	mov	r1, r0
     3f2:	f04f 0000 	mov.w	r0, #0
     3f6:	e01c      	b.n	432 <__aeabi_l2f+0x2a>

000003f8 <__aeabi_ul2f>:
     3f8:	ea50 0201 	orrs.w	r2, r0, r1
     3fc:	bf08      	it	eq
     3fe:	4770      	bxeq	lr
     400:	f04f 0300 	mov.w	r3, #0
     404:	e00a      	b.n	41c <__aeabi_l2f+0x14>
     406:	bf00      	nop

00000408 <__aeabi_l2f>:
     408:	ea50 0201 	orrs.w	r2, r0, r1
     40c:	bf08      	it	eq
     40e:	4770      	bxeq	lr
     410:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
     414:	d502      	bpl.n	41c <__aeabi_l2f+0x14>
     416:	4240      	negs	r0, r0
     418:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     41c:	ea5f 0c01 	movs.w	ip, r1
     420:	bf02      	ittt	eq
     422:	4684      	moveq	ip, r0
     424:	4601      	moveq	r1, r0
     426:	2000      	moveq	r0, #0
     428:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
     42c:	bf08      	it	eq
     42e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
     432:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
     436:	fabc f28c 	clz	r2, ip
     43a:	3a08      	subs	r2, #8
     43c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
     440:	db10      	blt.n	464 <__aeabi_l2f+0x5c>
     442:	fa01 fc02 	lsl.w	ip, r1, r2
     446:	4463      	add	r3, ip
     448:	fa00 fc02 	lsl.w	ip, r0, r2
     44c:	f1c2 0220 	rsb	r2, r2, #32
     450:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     454:	fa20 f202 	lsr.w	r2, r0, r2
     458:	eb43 0002 	adc.w	r0, r3, r2
     45c:	bf08      	it	eq
     45e:	f020 0001 	biceq.w	r0, r0, #1
     462:	4770      	bx	lr
     464:	f102 0220 	add.w	r2, r2, #32
     468:	fa01 fc02 	lsl.w	ip, r1, r2
     46c:	f1c2 0220 	rsb	r2, r2, #32
     470:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
     474:	fa21 f202 	lsr.w	r2, r1, r2
     478:	eb43 0002 	adc.w	r0, r3, r2
     47c:	bf08      	it	eq
     47e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     482:	4770      	bx	lr

00000484 <__aeabi_f2uiz>:
     484:	0042      	lsls	r2, r0, #1
     486:	d20e      	bcs.n	4a6 <__aeabi_f2uiz+0x22>
     488:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
     48c:	d30b      	bcc.n	4a6 <__aeabi_f2uiz+0x22>
     48e:	f04f 039e 	mov.w	r3, #158	; 0x9e
     492:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
     496:	d409      	bmi.n	4ac <__aeabi_f2uiz+0x28>
     498:	ea4f 2300 	mov.w	r3, r0, lsl #8
     49c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     4a0:	fa23 f002 	lsr.w	r0, r3, r2
     4a4:	4770      	bx	lr
     4a6:	f04f 0000 	mov.w	r0, #0
     4aa:	4770      	bx	lr
     4ac:	f112 0f61 	cmn.w	r2, #97	; 0x61
     4b0:	d101      	bne.n	4b6 <__aeabi_f2uiz+0x32>
     4b2:	0242      	lsls	r2, r0, #9
     4b4:	d102      	bne.n	4bc <__aeabi_f2uiz+0x38>
     4b6:	f04f 30ff 	mov.w	r0, #4294967295
     4ba:	4770      	bx	lr
     4bc:	f04f 0000 	mov.w	r0, #0
     4c0:	4770      	bx	lr
     4c2:	bf00      	nop

000004c4 <__aeabi_uldivmod>:
     4c4:	b953      	cbnz	r3, 4dc <__aeabi_uldivmod+0x18>
     4c6:	b94a      	cbnz	r2, 4dc <__aeabi_uldivmod+0x18>
     4c8:	2900      	cmp	r1, #0
     4ca:	bf08      	it	eq
     4cc:	2800      	cmpeq	r0, #0
     4ce:	bf1c      	itt	ne
     4d0:	f04f 31ff 	movne.w	r1, #4294967295
     4d4:	f04f 30ff 	movne.w	r0, #4294967295
     4d8:	f000 b96c 	b.w	7b4 <__aeabi_idiv0>
     4dc:	f1ad 0c08 	sub.w	ip, sp, #8
     4e0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     4e4:	f000 f806 	bl	4f4 <__udivmoddi4>
     4e8:	f8dd e004 	ldr.w	lr, [sp, #4]
     4ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     4f0:	b004      	add	sp, #16
     4f2:	4770      	bx	lr

000004f4 <__udivmoddi4>:
     4f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     4f8:	9e08      	ldr	r6, [sp, #32]
     4fa:	460d      	mov	r5, r1
     4fc:	4604      	mov	r4, r0
     4fe:	468e      	mov	lr, r1
     500:	2b00      	cmp	r3, #0
     502:	f040 8082 	bne.w	60a <__udivmoddi4+0x116>
     506:	428a      	cmp	r2, r1
     508:	4617      	mov	r7, r2
     50a:	d946      	bls.n	59a <__udivmoddi4+0xa6>
     50c:	fab2 f282 	clz	r2, r2
     510:	b14a      	cbz	r2, 526 <__udivmoddi4+0x32>
     512:	f1c2 0120 	rsb	r1, r2, #32
     516:	fa05 f302 	lsl.w	r3, r5, r2
     51a:	fa20 f101 	lsr.w	r1, r0, r1
     51e:	4097      	lsls	r7, r2
     520:	ea41 0e03 	orr.w	lr, r1, r3
     524:	4094      	lsls	r4, r2
     526:	ea4f 4817 	mov.w	r8, r7, lsr #16
     52a:	0c23      	lsrs	r3, r4, #16
     52c:	fbbe fcf8 	udiv	ip, lr, r8
     530:	b2b9      	uxth	r1, r7
     532:	fb08 ee1c 	mls	lr, r8, ip, lr
     536:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
     53a:	fb0c f001 	mul.w	r0, ip, r1
     53e:	4298      	cmp	r0, r3
     540:	d90a      	bls.n	558 <__udivmoddi4+0x64>
     542:	18fb      	adds	r3, r7, r3
     544:	f10c 35ff 	add.w	r5, ip, #4294967295
     548:	f080 8116 	bcs.w	778 <__udivmoddi4+0x284>
     54c:	4298      	cmp	r0, r3
     54e:	f240 8113 	bls.w	778 <__udivmoddi4+0x284>
     552:	f1ac 0c02 	sub.w	ip, ip, #2
     556:	443b      	add	r3, r7
     558:	1a1b      	subs	r3, r3, r0
     55a:	b2a4      	uxth	r4, r4
     55c:	fbb3 f0f8 	udiv	r0, r3, r8
     560:	fb08 3310 	mls	r3, r8, r0, r3
     564:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     568:	fb00 f101 	mul.w	r1, r0, r1
     56c:	42a1      	cmp	r1, r4
     56e:	d909      	bls.n	584 <__udivmoddi4+0x90>
     570:	193c      	adds	r4, r7, r4
     572:	f100 33ff 	add.w	r3, r0, #4294967295
     576:	f080 8101 	bcs.w	77c <__udivmoddi4+0x288>
     57a:	42a1      	cmp	r1, r4
     57c:	f240 80fe 	bls.w	77c <__udivmoddi4+0x288>
     580:	3802      	subs	r0, #2
     582:	443c      	add	r4, r7
     584:	1a64      	subs	r4, r4, r1
     586:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     58a:	2100      	movs	r1, #0
     58c:	b11e      	cbz	r6, 596 <__udivmoddi4+0xa2>
     58e:	40d4      	lsrs	r4, r2
     590:	2300      	movs	r3, #0
     592:	e9c6 4300 	strd	r4, r3, [r6]
     596:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     59a:	b902      	cbnz	r2, 59e <__udivmoddi4+0xaa>
     59c:	deff      	udf	#255	; 0xff
     59e:	fab2 f282 	clz	r2, r2
     5a2:	2a00      	cmp	r2, #0
     5a4:	d14f      	bne.n	646 <__udivmoddi4+0x152>
     5a6:	1bcb      	subs	r3, r1, r7
     5a8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     5ac:	fa1f f887 	uxth.w	r8, r7
     5b0:	2101      	movs	r1, #1
     5b2:	fbb3 fcfe 	udiv	ip, r3, lr
     5b6:	0c25      	lsrs	r5, r4, #16
     5b8:	fb0e 331c 	mls	r3, lr, ip, r3
     5bc:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     5c0:	fb08 f30c 	mul.w	r3, r8, ip
     5c4:	42ab      	cmp	r3, r5
     5c6:	d907      	bls.n	5d8 <__udivmoddi4+0xe4>
     5c8:	197d      	adds	r5, r7, r5
     5ca:	f10c 30ff 	add.w	r0, ip, #4294967295
     5ce:	d202      	bcs.n	5d6 <__udivmoddi4+0xe2>
     5d0:	42ab      	cmp	r3, r5
     5d2:	f200 80e7 	bhi.w	7a4 <__udivmoddi4+0x2b0>
     5d6:	4684      	mov	ip, r0
     5d8:	1aed      	subs	r5, r5, r3
     5da:	b2a3      	uxth	r3, r4
     5dc:	fbb5 f0fe 	udiv	r0, r5, lr
     5e0:	fb0e 5510 	mls	r5, lr, r0, r5
     5e4:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     5e8:	fb08 f800 	mul.w	r8, r8, r0
     5ec:	45a0      	cmp	r8, r4
     5ee:	d907      	bls.n	600 <__udivmoddi4+0x10c>
     5f0:	193c      	adds	r4, r7, r4
     5f2:	f100 33ff 	add.w	r3, r0, #4294967295
     5f6:	d202      	bcs.n	5fe <__udivmoddi4+0x10a>
     5f8:	45a0      	cmp	r8, r4
     5fa:	f200 80d7 	bhi.w	7ac <__udivmoddi4+0x2b8>
     5fe:	4618      	mov	r0, r3
     600:	eba4 0408 	sub.w	r4, r4, r8
     604:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     608:	e7c0      	b.n	58c <__udivmoddi4+0x98>
     60a:	428b      	cmp	r3, r1
     60c:	d908      	bls.n	620 <__udivmoddi4+0x12c>
     60e:	2e00      	cmp	r6, #0
     610:	f000 80af 	beq.w	772 <__udivmoddi4+0x27e>
     614:	2100      	movs	r1, #0
     616:	e9c6 0500 	strd	r0, r5, [r6]
     61a:	4608      	mov	r0, r1
     61c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     620:	fab3 f183 	clz	r1, r3
     624:	2900      	cmp	r1, #0
     626:	d14b      	bne.n	6c0 <__udivmoddi4+0x1cc>
     628:	42ab      	cmp	r3, r5
     62a:	d302      	bcc.n	632 <__udivmoddi4+0x13e>
     62c:	4282      	cmp	r2, r0
     62e:	f200 80b7 	bhi.w	7a0 <__udivmoddi4+0x2ac>
     632:	1a84      	subs	r4, r0, r2
     634:	eb65 0303 	sbc.w	r3, r5, r3
     638:	2001      	movs	r0, #1
     63a:	469e      	mov	lr, r3
     63c:	2e00      	cmp	r6, #0
     63e:	d0aa      	beq.n	596 <__udivmoddi4+0xa2>
     640:	e9c6 4e00 	strd	r4, lr, [r6]
     644:	e7a7      	b.n	596 <__udivmoddi4+0xa2>
     646:	f1c2 0c20 	rsb	ip, r2, #32
     64a:	fa01 f302 	lsl.w	r3, r1, r2
     64e:	4097      	lsls	r7, r2
     650:	fa20 f00c 	lsr.w	r0, r0, ip
     654:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     658:	fa21 fc0c 	lsr.w	ip, r1, ip
     65c:	4318      	orrs	r0, r3
     65e:	fbbc f1fe 	udiv	r1, ip, lr
     662:	0c05      	lsrs	r5, r0, #16
     664:	fb0e cc11 	mls	ip, lr, r1, ip
     668:	fa1f f887 	uxth.w	r8, r7
     66c:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
     670:	fb01 f308 	mul.w	r3, r1, r8
     674:	42ab      	cmp	r3, r5
     676:	fa04 f402 	lsl.w	r4, r4, r2
     67a:	d909      	bls.n	690 <__udivmoddi4+0x19c>
     67c:	197d      	adds	r5, r7, r5
     67e:	f101 3cff 	add.w	ip, r1, #4294967295
     682:	f080 808b 	bcs.w	79c <__udivmoddi4+0x2a8>
     686:	42ab      	cmp	r3, r5
     688:	f240 8088 	bls.w	79c <__udivmoddi4+0x2a8>
     68c:	3902      	subs	r1, #2
     68e:	443d      	add	r5, r7
     690:	1aeb      	subs	r3, r5, r3
     692:	b285      	uxth	r5, r0
     694:	fbb3 f0fe 	udiv	r0, r3, lr
     698:	fb0e 3310 	mls	r3, lr, r0, r3
     69c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     6a0:	fb00 f308 	mul.w	r3, r0, r8
     6a4:	42ab      	cmp	r3, r5
     6a6:	d907      	bls.n	6b8 <__udivmoddi4+0x1c4>
     6a8:	197d      	adds	r5, r7, r5
     6aa:	f100 3cff 	add.w	ip, r0, #4294967295
     6ae:	d271      	bcs.n	794 <__udivmoddi4+0x2a0>
     6b0:	42ab      	cmp	r3, r5
     6b2:	d96f      	bls.n	794 <__udivmoddi4+0x2a0>
     6b4:	3802      	subs	r0, #2
     6b6:	443d      	add	r5, r7
     6b8:	1aeb      	subs	r3, r5, r3
     6ba:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     6be:	e778      	b.n	5b2 <__udivmoddi4+0xbe>
     6c0:	f1c1 0c20 	rsb	ip, r1, #32
     6c4:	408b      	lsls	r3, r1
     6c6:	fa22 f70c 	lsr.w	r7, r2, ip
     6ca:	431f      	orrs	r7, r3
     6cc:	fa20 f40c 	lsr.w	r4, r0, ip
     6d0:	fa05 f301 	lsl.w	r3, r5, r1
     6d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     6d8:	fa25 f50c 	lsr.w	r5, r5, ip
     6dc:	431c      	orrs	r4, r3
     6de:	0c23      	lsrs	r3, r4, #16
     6e0:	fbb5 f9fe 	udiv	r9, r5, lr
     6e4:	fa1f f887 	uxth.w	r8, r7
     6e8:	fb0e 5519 	mls	r5, lr, r9, r5
     6ec:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
     6f0:	fb09 fa08 	mul.w	sl, r9, r8
     6f4:	45aa      	cmp	sl, r5
     6f6:	fa02 f201 	lsl.w	r2, r2, r1
     6fa:	fa00 f301 	lsl.w	r3, r0, r1
     6fe:	d908      	bls.n	712 <__udivmoddi4+0x21e>
     700:	197d      	adds	r5, r7, r5
     702:	f109 30ff 	add.w	r0, r9, #4294967295
     706:	d247      	bcs.n	798 <__udivmoddi4+0x2a4>
     708:	45aa      	cmp	sl, r5
     70a:	d945      	bls.n	798 <__udivmoddi4+0x2a4>
     70c:	f1a9 0902 	sub.w	r9, r9, #2
     710:	443d      	add	r5, r7
     712:	eba5 050a 	sub.w	r5, r5, sl
     716:	b2a4      	uxth	r4, r4
     718:	fbb5 f0fe 	udiv	r0, r5, lr
     71c:	fb0e 5510 	mls	r5, lr, r0, r5
     720:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     724:	fb00 f808 	mul.w	r8, r0, r8
     728:	45a0      	cmp	r8, r4
     72a:	d907      	bls.n	73c <__udivmoddi4+0x248>
     72c:	193c      	adds	r4, r7, r4
     72e:	f100 35ff 	add.w	r5, r0, #4294967295
     732:	d22d      	bcs.n	790 <__udivmoddi4+0x29c>
     734:	45a0      	cmp	r8, r4
     736:	d92b      	bls.n	790 <__udivmoddi4+0x29c>
     738:	3802      	subs	r0, #2
     73a:	443c      	add	r4, r7
     73c:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     740:	eba4 0408 	sub.w	r4, r4, r8
     744:	fba0 8902 	umull	r8, r9, r0, r2
     748:	454c      	cmp	r4, r9
     74a:	46c6      	mov	lr, r8
     74c:	464d      	mov	r5, r9
     74e:	d319      	bcc.n	784 <__udivmoddi4+0x290>
     750:	d016      	beq.n	780 <__udivmoddi4+0x28c>
     752:	b15e      	cbz	r6, 76c <__udivmoddi4+0x278>
     754:	ebb3 020e 	subs.w	r2, r3, lr
     758:	eb64 0405 	sbc.w	r4, r4, r5
     75c:	fa04 fc0c 	lsl.w	ip, r4, ip
     760:	40ca      	lsrs	r2, r1
     762:	ea4c 0202 	orr.w	r2, ip, r2
     766:	40cc      	lsrs	r4, r1
     768:	e9c6 2400 	strd	r2, r4, [r6]
     76c:	2100      	movs	r1, #0
     76e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     772:	4631      	mov	r1, r6
     774:	4630      	mov	r0, r6
     776:	e70e      	b.n	596 <__udivmoddi4+0xa2>
     778:	46ac      	mov	ip, r5
     77a:	e6ed      	b.n	558 <__udivmoddi4+0x64>
     77c:	4618      	mov	r0, r3
     77e:	e701      	b.n	584 <__udivmoddi4+0x90>
     780:	4543      	cmp	r3, r8
     782:	d2e6      	bcs.n	752 <__udivmoddi4+0x25e>
     784:	ebb8 0e02 	subs.w	lr, r8, r2
     788:	eb69 0507 	sbc.w	r5, r9, r7
     78c:	3801      	subs	r0, #1
     78e:	e7e0      	b.n	752 <__udivmoddi4+0x25e>
     790:	4628      	mov	r0, r5
     792:	e7d3      	b.n	73c <__udivmoddi4+0x248>
     794:	4660      	mov	r0, ip
     796:	e78f      	b.n	6b8 <__udivmoddi4+0x1c4>
     798:	4681      	mov	r9, r0
     79a:	e7ba      	b.n	712 <__udivmoddi4+0x21e>
     79c:	4661      	mov	r1, ip
     79e:	e777      	b.n	690 <__udivmoddi4+0x19c>
     7a0:	4608      	mov	r0, r1
     7a2:	e74b      	b.n	63c <__udivmoddi4+0x148>
     7a4:	f1ac 0c02 	sub.w	ip, ip, #2
     7a8:	443d      	add	r5, r7
     7aa:	e715      	b.n	5d8 <__udivmoddi4+0xe4>
     7ac:	3802      	subs	r0, #2
     7ae:	443c      	add	r4, r7
     7b0:	e726      	b.n	600 <__udivmoddi4+0x10c>
     7b2:	bf00      	nop

000007b4 <__aeabi_idiv0>:
     7b4:	4770      	bx	lr
     7b6:	bf00      	nop

000007b8 <button3_pressed>:
  }
}
void button3_pressed(const struct device *dev, struct gpio_callback *cb,
		    uint32_t pins)
{
    ON_flag = 1;
     7b8:	4b01      	ldr	r3, [pc, #4]	; (7c0 <button3_pressed+0x8>)
     7ba:	2201      	movs	r2, #1
     7bc:	601a      	str	r2, [r3, #0]
}
     7be:	4770      	bx	lr
     7c0:	20000098 	.word	0x20000098

000007c4 <button4_pressed>:
void button4_pressed(const struct device *dev, struct gpio_callback *cb,
		    uint32_t pins)
{
    ON_flag = 0;
     7c4:	4b01      	ldr	r3, [pc, #4]	; (7cc <button4_pressed+0x8>)
     7c6:	2200      	movs	r2, #0
     7c8:	601a      	str	r2, [r3, #0]
}
     7ca:	4770      	bx	lr
     7cc:	20000098 	.word	0x20000098

000007d0 <button1_pressed>:
  if(ON_flag == 1)
     7d0:	4b07      	ldr	r3, [pc, #28]	; (7f0 <button1_pressed+0x20>)
     7d2:	681b      	ldr	r3, [r3, #0]
     7d4:	2b01      	cmp	r3, #1
     7d6:	d109      	bne.n	7ec <button1_pressed+0x1c>
    if(adc_out+93 >= 1023)
     7d8:	4a06      	ldr	r2, [pc, #24]	; (7f4 <button1_pressed+0x24>)
     7da:	8813      	ldrh	r3, [r2, #0]
     7dc:	f240 31fe 	movw	r1, #1022	; 0x3fe
     7e0:	335d      	adds	r3, #93	; 0x5d
     7e2:	428b      	cmp	r3, r1
      adc_out = 1023;
     7e4:	bfc8      	it	gt
     7e6:	f240 33ff 	movwgt	r3, #1023	; 0x3ff
      adc_out += 93;
     7ea:	8013      	strh	r3, [r2, #0]
}
     7ec:	4770      	bx	lr
     7ee:	bf00      	nop
     7f0:	20000098 	.word	0x20000098
     7f4:	20000c68 	.word	0x20000c68

000007f8 <button2_pressed>:
  if(ON_flag == 1)
     7f8:	4b05      	ldr	r3, [pc, #20]	; (810 <CONFIG_ISR_STACK_SIZE+0x10>)
     7fa:	681b      	ldr	r3, [r3, #0]
     7fc:	2b01      	cmp	r3, #1
     7fe:	d106      	bne.n	80e <CONFIG_ISR_STACK_SIZE+0xe>
    if(adc_out-93 <= 0)
     800:	4a04      	ldr	r2, [pc, #16]	; (814 <CONFIG_ISR_STACK_SIZE+0x14>)
     802:	8813      	ldrh	r3, [r2, #0]
     804:	3b5d      	subs	r3, #93	; 0x5d
     806:	2b00      	cmp	r3, #0
      adc_out = 0;
     808:	bfd8      	it	le
     80a:	2300      	movle	r3, #0
      adc_out -= 93;
     80c:	8013      	strh	r3, [r2, #0]
}
     80e:	4770      	bx	lr
     810:	20000098 	.word	0x20000098
     814:	20000c68 	.word	0x20000c68

00000818 <gpio_add_callback.constprop.0>:
 * handler invocation, but whether they are invoked for the current
 * GPIO event is not specified.
 *
 * Note: enables to add as many callback as needed on the same port.
 */
static inline int gpio_add_callback(const struct device *port,
     818:	4601      	mov	r1, r0
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
     81a:	4804      	ldr	r0, [pc, #16]	; (82c <gpio_add_callback.constprop.0+0x14>)
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
     81c:	6883      	ldr	r3, [r0, #8]
     81e:	69db      	ldr	r3, [r3, #28]
     820:	b10b      	cbz	r3, 826 <gpio_add_callback.constprop.0+0xe>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
     822:	2201      	movs	r2, #1
     824:	4718      	bx	r3
}
     826:	f06f 0085 	mvn.w	r0, #133	; 0x85
     82a:	4770      	bx	lr
     82c:	000065b0 	.word	0x000065b0

00000830 <action_thread_code>:
          printk("Error %d: failed to set pulse width\n", ret);
    }
}

void action_thread_code(void *argA , void *argB, void *argC)
{
     830:	b538      	push	{r3, r4, r5, lr}
    printk("\nAction Thread init\n");
     832:	4808      	ldr	r0, [pc, #32]	; (854 <action_thread_code+0x24>)
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
     834:	4d08      	ldr	r5, [pc, #32]	; (858 <action_thread_code+0x28>)
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
     836:	4c09      	ldr	r4, [pc, #36]	; (85c <action_thread_code+0x2c>)
     838:	f005 f9d6 	bl	5be8 <printk>
	return z_impl_k_sem_take(sem, timeout);
     83c:	f04f 32ff 	mov.w	r2, #4294967295
     840:	f04f 33ff 	mov.w	r3, #4294967295
     844:	4628      	mov	r0, r5
     846:	f004 fb83 	bl	4f50 <z_impl_k_sem_take>
	z_impl_k_sem_give(sem);
     84a:	4620      	mov	r0, r4
     84c:	f004 fb60 	bl	4f10 <z_impl_k_sem_give>
    //int adc_out_per;

    while(1)
     850:	e7f4      	b.n	83c <action_thread_code+0xc>
     852:	bf00      	nop
     854:	00006a00 	.word	0x00006a00
     858:	20000548 	.word	0x20000548
     85c:	20000558 	.word	0x20000558

00000860 <manual_out_thread_code>:
{
     860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    printk("\nOut Thread init\n");
     864:	483d      	ldr	r0, [pc, #244]	; (95c <manual_out_thread_code+0xfc>)
        if(ON_flag == 1)
     866:	f8df a120 	ldr.w	sl, [pc, #288]	; 988 <manual_out_thread_code+0x128>
{
     86a:	b089      	sub	sp, #36	; 0x24
    printk("\nOut Thread init\n");
     86c:	f005 f9bc 	bl	5be8 <printk>
        if(ON_flag == 1)
     870:	f8da 3000 	ldr.w	r3, [sl]
     874:	2b01      	cmp	r3, #1
     876:	d106      	bne.n	886 <manual_out_thread_code+0x26>
	return z_impl_k_sem_take(sem, timeout);
     878:	4839      	ldr	r0, [pc, #228]	; (960 <manual_out_thread_code+0x100>)
     87a:	f04f 32ff 	mov.w	r2, #4294967295
     87e:	f04f 33ff 	mov.w	r3, #4294967295
     882:	f004 fb65 	bl	4f50 <z_impl_k_sem_take>
        if(ON_flag == 0)
     886:	f8da 3000 	ldr.w	r3, [sl]
     88a:	b933      	cbnz	r3, 89a <manual_out_thread_code+0x3a>
     88c:	4835      	ldr	r0, [pc, #212]	; (964 <manual_out_thread_code+0x104>)
     88e:	f04f 32ff 	mov.w	r2, #4294967295
     892:	f04f 33ff 	mov.w	r3, #4294967295
     896:	f004 fb5b 	bl	4f50 <z_impl_k_sem_take>
        ret = 0;
     89a:	4d33      	ldr	r5, [pc, #204]	; (968 <manual_out_thread_code+0x108>)
        pwm_value = 1023-adc_out;
     89c:	4a33      	ldr	r2, [pc, #204]	; (96c <manual_out_thread_code+0x10c>)
        ret = 0;
     89e:	2300      	movs	r3, #0
     8a0:	602b      	str	r3, [r5, #0]
        pwm_value = 1023-adc_out;
     8a2:	4b33      	ldr	r3, [pc, #204]	; (970 <manual_out_thread_code+0x110>)
     8a4:	881c      	ldrh	r4, [r3, #0]
     8a6:	f240 33ff 	movw	r3, #1023	; 0x3ff
     8aa:	1b1c      	subs	r4, r3, r4
     8ac:	6014      	str	r4, [r2, #0]
        ret = pwm_pin_set_usec(pwm0_dev, NLED1,
     8ae:	4a31      	ldr	r2, [pc, #196]	; (974 <manual_out_thread_code+0x114>)
     8b0:	f8d2 8000 	ldr.w	r8, [r2]
     8b4:	4a30      	ldr	r2, [pc, #192]	; (978 <manual_out_thread_code+0x118>)
     8b6:	6817      	ldr	r7, [r2, #0]
		      pwmPeriod_us,(unsigned int)((pwmPeriod_us*pwm_value)/1023), PWM_POLARITY_NORMAL);
     8b8:	437c      	muls	r4, r7
        ret = pwm_pin_set_usec(pwm0_dev, NLED1,
     8ba:	fbb4 f4f3 	udiv	r4, r4, r3
						uint64_t *cycles)
{
	struct pwm_driver_api *api;

	api = (struct pwm_driver_api *)dev->api;
	return api->get_cycles_per_sec(dev, pwm, cycles);
     8be:	f8d8 3008 	ldr.w	r3, [r8, #8]
     8c2:	aa06      	add	r2, sp, #24
     8c4:	685b      	ldr	r3, [r3, #4]
     8c6:	210d      	movs	r1, #13
     8c8:	4640      	mov	r0, r8
     8ca:	4798      	blx	r3
				   uint32_t period, uint32_t pulse,
				   pwm_flags_t flags)
{
	uint64_t period_cycles, pulse_cycles, cycles_per_sec;

	if (pwm_get_cycles_per_sec(dev, pwm, &cycles_per_sec) != 0) {
     8cc:	9005      	str	r0, [sp, #20]
     8ce:	b130      	cbz	r0, 8de <manual_out_thread_code+0x7e>
     8d0:	f06f 0104 	mvn.w	r1, #4
     8d4:	6029      	str	r1, [r5, #0]
          printk("Error %d: failed to set pulse width\n", ret);
     8d6:	4829      	ldr	r0, [pc, #164]	; (97c <manual_out_thread_code+0x11c>)
     8d8:	f005 f986 	bl	5be8 <printk>
     8dc:	e7c8      	b.n	870 <manual_out_thread_code+0x10>
		return -EIO;
	}

	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
     8de:	e9dd 6b06 	ldrd	r6, fp, [sp, #24]
     8e2:	fba7 2306 	umull	r2, r3, r7, r6
     8e6:	e9cd 2302 	strd	r2, r3, [sp, #8]
     8ea:	9b03      	ldr	r3, [sp, #12]
     8ec:	4a24      	ldr	r2, [pc, #144]	; (980 <manual_out_thread_code+0x120>)
     8ee:	fb07 330b 	mla	r3, r7, fp, r3
     8f2:	9303      	str	r3, [sp, #12]
     8f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
     8f8:	2300      	movs	r3, #0
     8fa:	f7ff fde3 	bl	4c4 <__aeabi_uldivmod>
     8fe:	4681      	mov	r9, r0
	if (period_cycles >= ((uint64_t)1 << 32)) {
     900:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
     904:	4b1f      	ldr	r3, [pc, #124]	; (984 <manual_out_thread_code+0x124>)
     906:	f04f 32ff 	mov.w	r2, #4294967295
     90a:	428b      	cmp	r3, r1
     90c:	bf08      	it	eq
     90e:	4282      	cmpeq	r2, r0
     910:	d204      	bcs.n	91c <manual_out_thread_code+0xbc>
        ret = pwm_pin_set_usec(pwm0_dev, NLED1,
     912:	4b15      	ldr	r3, [pc, #84]	; (968 <manual_out_thread_code+0x108>)
     914:	f06f 0185 	mvn.w	r1, #133	; 0x85
     918:	6019      	str	r1, [r3, #0]
        if (ret)
     91a:	e7dc      	b.n	8d6 <manual_out_thread_code+0x76>
		return -ENOTSUP;
	}

	pulse_cycles = (pulse * cycles_per_sec) / USEC_PER_SEC;
     91c:	fba4 6706 	umull	r6, r7, r4, r6
     920:	fb04 770b 	mla	r7, r4, fp, r7
     924:	4a16      	ldr	r2, [pc, #88]	; (980 <manual_out_thread_code+0x120>)
     926:	2300      	movs	r3, #0
     928:	4630      	mov	r0, r6
     92a:	4639      	mov	r1, r7
     92c:	f7ff fdca 	bl	4c4 <__aeabi_uldivmod>
	if (pulse_cycles >= ((uint64_t)1 << 32)) {
     930:	4a14      	ldr	r2, [pc, #80]	; (984 <manual_out_thread_code+0x124>)
     932:	f04f 31ff 	mov.w	r1, #4294967295
     936:	42ba      	cmp	r2, r7
     938:	bf08      	it	eq
     93a:	42b1      	cmpeq	r1, r6
	pulse_cycles = (pulse * cycles_per_sec) / USEC_PER_SEC;
     93c:	4603      	mov	r3, r0
	if (pulse_cycles >= ((uint64_t)1 << 32)) {
     93e:	d3e8      	bcc.n	912 <manual_out_thread_code+0xb2>
	return api->pin_set(dev, pwm, period, pulse, flags);
     940:	f8d8 2008 	ldr.w	r2, [r8, #8]
     944:	9905      	ldr	r1, [sp, #20]
     946:	9100      	str	r1, [sp, #0]
     948:	6814      	ldr	r4, [r2, #0]
     94a:	210d      	movs	r1, #13
     94c:	464a      	mov	r2, r9
     94e:	4640      	mov	r0, r8
     950:	47a0      	blx	r4
     952:	4601      	mov	r1, r0
        ret = pwm_pin_set_usec(pwm0_dev, NLED1,
     954:	6028      	str	r0, [r5, #0]
        if (ret)
     956:	2800      	cmp	r0, #0
     958:	d08a      	beq.n	870 <manual_out_thread_code+0x10>
     95a:	e7bc      	b.n	8d6 <manual_out_thread_code+0x76>
     95c:	00006a15 	.word	0x00006a15
     960:	20000568 	.word	0x20000568
     964:	20000558 	.word	0x20000558
     968:	20000544 	.word	0x20000544
     96c:	2000053c 	.word	0x2000053c
     970:	20000c68 	.word	0x20000c68
     974:	20000538 	.word	0x20000538
     978:	2000009c 	.word	0x2000009c
     97c:	00006a27 	.word	0x00006a27
     980:	000f4240 	.word	0x000f4240
     984:	000f423f 	.word	0x000f423f
     988:	20000098 	.word	0x20000098

0000098c <read_thread_code>:
{
     98c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    printk("\nRead Thread init\n");
     990:	4849      	ldr	r0, [pc, #292]	; (ab8 <read_thread_code+0x12c>)
{
     992:	b087      	sub	sp, #28
    printk("\nRead Thread init\n");
     994:	f005 f928 	bl	5be8 <printk>
	return z_impl_k_uptime_ticks();
     998:	f005 fd9b 	bl	64d2 <z_impl_k_uptime_ticks>
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
     99c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
     9a0:	460a      	mov	r2, r1
     9a2:	fba0 0103 	umull	r0, r1, r0, r3
     9a6:	fb03 1102 	mla	r1, r3, r2, r1
     9aa:	0bc3      	lsrs	r3, r0, #15
     9ac:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
     9b0:	0bca      	lsrs	r2, r1, #15
    release_time = k_uptime_get() + read_thread_period;
     9b2:	f113 0464 	adds.w	r4, r3, #100	; 0x64
	ret = adc_read(adc_dev, &sequence);
     9b6:	4e41      	ldr	r6, [pc, #260]	; (abc <read_thread_code+0x130>)
                adc_value = (uint16_t)(1000*adc_sample_buffer[0]*((float)3/1023));
     9b8:	4f41      	ldr	r7, [pc, #260]	; (ac0 <read_thread_code+0x134>)
    release_time = k_uptime_get() + read_thread_period;
     9ba:	f142 0500 	adc.w	r5, r2, #0
	const struct adc_sequence sequence = {
     9be:	f8df 912c 	ldr.w	r9, [pc, #300]	; aec <read_thread_code+0x160>
     9c2:	f8df 812c 	ldr.w	r8, [pc, #300]	; af0 <read_thread_code+0x164>
     9c6:	2214      	movs	r2, #20
     9c8:	2100      	movs	r1, #0
     9ca:	a801      	add	r0, sp, #4
     9cc:	f005 f96f 	bl	5cae <memset>
     9d0:	2302      	movs	r3, #2
     9d2:	e9cd 9303 	strd	r9, r3, [sp, #12]
     9d6:	9302      	str	r3, [sp, #8]
     9d8:	230a      	movs	r3, #10
     9da:	f88d 3014 	strb.w	r3, [sp, #20]
	if (adc_dev == NULL) {
     9de:	4b39      	ldr	r3, [pc, #228]	; (ac4 <read_thread_code+0x138>)
     9e0:	6818      	ldr	r0, [r3, #0]
     9e2:	bbc8      	cbnz	r0, a58 <read_thread_code+0xcc>
            printk("adc_sample(): error, must bind to adc first \n\r");
     9e4:	4838      	ldr	r0, [pc, #224]	; (ac8 <read_thread_code+0x13c>)
     9e6:	f005 f8ff 	bl	5be8 <printk>
        err=adc_sample();
     9ea:	f04f 31ff 	mov.w	r1, #4294967295
     9ee:	f8c8 1000 	str.w	r1, [r8]
            printk("adc_sample() failed with error code %d\n",err);
     9f2:	4836      	ldr	r0, [pc, #216]	; (acc <read_thread_code+0x140>)
     9f4:	f005 f8f8 	bl	5be8 <printk>
        if (ON_flag == 1)
     9f8:	4b35      	ldr	r3, [pc, #212]	; (ad0 <read_thread_code+0x144>)
     9fa:	681b      	ldr	r3, [r3, #0]
     9fc:	2b01      	cmp	r3, #1
     9fe:	d156      	bne.n	aae <read_thread_code+0x122>
	z_impl_k_sem_give(sem);
     a00:	4834      	ldr	r0, [pc, #208]	; (ad4 <read_thread_code+0x148>)
     a02:	f004 fa85 	bl	4f10 <z_impl_k_sem_give>
	return z_impl_k_uptime_ticks();
     a06:	f005 fd64 	bl	64d2 <z_impl_k_uptime_ticks>
     a0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
     a0e:	460a      	mov	r2, r1
     a10:	fba0 0103 	umull	r0, r1, r0, r3
     a14:	fb03 1102 	mla	r1, r3, r2, r1
     a18:	0bc2      	lsrs	r2, r0, #15
     a1a:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
     a1e:	0bcb      	lsrs	r3, r1, #15
        if( fin_time < release_time) {
     a20:	42a2      	cmp	r2, r4
     a22:	eb73 0105 	sbcs.w	r1, r3, r5
     a26:	daca      	bge.n	9be <read_thread_code+0x32>
            k_msleep(release_time - fin_time);
     a28:	1aa1      	subs	r1, r4, r2
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
	return k_sleep(Z_TIMEOUT_MS(ms));
     a2a:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
     a2e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
     a32:	f240 38e7 	movw	r8, #999	; 0x3e7
     a36:	f04f 0900 	mov.w	r9, #0
     a3a:	fbc0 8901 	smlal	r8, r9, r0, r1
     a3e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     a42:	2300      	movs	r3, #0
     a44:	4640      	mov	r0, r8
     a46:	4649      	mov	r1, r9
     a48:	f7ff fd3c 	bl	4c4 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
     a4c:	f004 f9ee 	bl	4e2c <z_impl_k_sleep>
            release_time += read_thread_period;
     a50:	3464      	adds	r4, #100	; 0x64
     a52:	f145 0500 	adc.w	r5, r5, #0
     a56:	e7b2      	b.n	9be <read_thread_code+0x32>
				  const struct adc_sequence *sequence)
{
	const struct adc_driver_api *api =
				(const struct adc_driver_api *)dev->api;

	return api->read(dev, sequence);
     a58:	6883      	ldr	r3, [r0, #8]
     a5a:	a901      	add	r1, sp, #4
     a5c:	685b      	ldr	r3, [r3, #4]
     a5e:	4798      	blx	r3
     a60:	4601      	mov	r1, r0
	ret = adc_read(adc_dev, &sequence);
     a62:	6030      	str	r0, [r6, #0]
	if (ret) {
     a64:	b110      	cbz	r0, a6c <read_thread_code+0xe0>
            printk("adc_read() failed with code %d\n", ret);
     a66:	481c      	ldr	r0, [pc, #112]	; (ad8 <read_thread_code+0x14c>)
     a68:	f005 f8be 	bl	5be8 <printk>
	return ret;
     a6c:	6831      	ldr	r1, [r6, #0]
        err=adc_sample();
     a6e:	f8c8 1000 	str.w	r1, [r8]
        if(err) {
     a72:	2900      	cmp	r1, #0
     a74:	d1bd      	bne.n	9f2 <read_thread_code+0x66>
            if(adc_sample_buffer[0] > 1023) {
     a76:	f8b9 8000 	ldrh.w	r8, [r9]
     a7a:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
     a7e:	d303      	bcc.n	a88 <read_thread_code+0xfc>
                printk("adc reading out of range\n");
     a80:	4816      	ldr	r0, [pc, #88]	; (adc <read_thread_code+0x150>)
     a82:	f005 f8b1 	bl	5be8 <printk>
     a86:	e7b7      	b.n	9f8 <read_thread_code+0x6c>
                adc_value = (uint16_t)(1000*adc_sample_buffer[0]*((float)3/1023));
     a88:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     a8c:	fb00 f008 	mul.w	r0, r0, r8
     a90:	f7ff fca4 	bl	3dc <__aeabi_i2f>
     a94:	4639      	mov	r1, r7
     a96:	f7ff fb33 	bl	100 <__aeabi_fmul>
     a9a:	f7ff fcf3 	bl	484 <__aeabi_f2uiz>
     a9e:	4b10      	ldr	r3, [pc, #64]	; (ae0 <read_thread_code+0x154>)
     aa0:	b282      	uxth	r2, r0
                printk("\33[2K\rAdc reading: raw:%4u / %4u mV",adc_sample_buffer[0],adc_value);
     aa2:	4641      	mov	r1, r8
     aa4:	480f      	ldr	r0, [pc, #60]	; (ae4 <read_thread_code+0x158>)
                adc_value = (uint16_t)(1000*adc_sample_buffer[0]*((float)3/1023));
     aa6:	601a      	str	r2, [r3, #0]
                printk("\33[2K\rAdc reading: raw:%4u / %4u mV",adc_sample_buffer[0],adc_value);
     aa8:	f005 f89e 	bl	5be8 <printk>
                amostra++;
     aac:	e7a4      	b.n	9f8 <read_thread_code+0x6c>
        else if (ON_flag == 0)
     aae:	2b00      	cmp	r3, #0
     ab0:	d1a9      	bne.n	a06 <read_thread_code+0x7a>
	z_impl_k_sem_give(sem);
     ab2:	480d      	ldr	r0, [pc, #52]	; (ae8 <read_thread_code+0x15c>)
     ab4:	e7a5      	b.n	a02 <read_thread_code+0x76>
     ab6:	bf00      	nop
     ab8:	00006a4c 	.word	0x00006a4c
     abc:	20000544 	.word	0x20000544
     ac0:	3b40300c 	.word	0x3b40300c
     ac4:	200004f4 	.word	0x200004f4
     ac8:	00006a5f 	.word	0x00006a5f
     acc:	00006aae 	.word	0x00006aae
     ad0:	20000098 	.word	0x20000098
     ad4:	20000568 	.word	0x20000568
     ad8:	00006a8e 	.word	0x00006a8e
     adc:	00006ad6 	.word	0x00006ad6
     ae0:	200004f8 	.word	0x200004f8
     ae4:	00006af0 	.word	0x00006af0
     ae8:	20000548 	.word	0x20000548
     aec:	20000c6a 	.word	0x20000c6a
     af0:	2000052c 	.word	0x2000052c

00000af4 <conf>:
{
     af4:	b510      	push	{r4, lr}
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
     af6:	483d      	ldr	r0, [pc, #244]	; (bec <conf+0xf8>)
    gpio0_dev = device_get_binding(DT_LABEL(GPIO0_NID));
     af8:	4c3d      	ldr	r4, [pc, #244]	; (bf0 <conf+0xfc>)
     afa:	f003 fc93 	bl	4424 <z_impl_device_get_binding>
     afe:	6020      	str	r0, [r4, #0]
    if (gpio0_dev == NULL) {
     b00:	b920      	cbnz	r0, b0c <conf+0x18>
        printk("Error: Failed to bind to GPIO0\n\r");        
     b02:	483c      	ldr	r0, [pc, #240]	; (bf4 <conf+0x100>)
}
     b04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	printk("Error: Failed to bind to PWM0\n\r");
     b08:	f005 b86e 	b.w	5be8 <printk>
        printk("Bind to GPIO0 successfull\n\r");        
     b0c:	483a      	ldr	r0, [pc, #232]	; (bf8 <conf+0x104>)
     b0e:	f005 f86b 	bl	5be8 <printk>
     b12:	483a      	ldr	r0, [pc, #232]	; (bfc <conf+0x108>)
     b14:	f003 fc86 	bl	4424 <z_impl_device_get_binding>
    pwm0_dev = device_get_binding(DT_LABEL(PWM0_NID));
     b18:	4b39      	ldr	r3, [pc, #228]	; (c00 <conf+0x10c>)
     b1a:	6018      	str	r0, [r3, #0]
    if (pwm0_dev == NULL) {
     b1c:	b908      	cbnz	r0, b22 <conf+0x2e>
	printk("Error: Failed to bind to PWM0\n\r");
     b1e:	4839      	ldr	r0, [pc, #228]	; (c04 <conf+0x110>)
     b20:	e7f0      	b.n	b04 <conf+0x10>
        printk("Bind to PWM0 successful\n\r");            
     b22:	4839      	ldr	r0, [pc, #228]	; (c08 <conf+0x114>)
     b24:	f005 f860 	bl	5be8 <printk>
    ret = gpio_pin_configure(gpio0_dev, NPOT, GPIO_INPUT);
     b28:	6820      	ldr	r0, [r4, #0]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&port, *(uintptr_t *)&pin, *(uintptr_t *)&flags, K_SYSCALL_GPIO_PIN_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_configure(port, pin, flags);
     b2a:	2103      	movs	r1, #3
     b2c:	f44f 7280 	mov.w	r2, #256	; 0x100
     b30:	f004 fefc 	bl	592c <z_impl_gpio_pin_configure>
     b34:	4c35      	ldr	r4, [pc, #212]	; (c0c <conf+0x118>)
    if (ret < 0) {
     b36:	2800      	cmp	r0, #0
     b38:	4601      	mov	r1, r0
    ret = gpio_pin_configure(gpio0_dev, NPOT, GPIO_INPUT);
     b3a:	6020      	str	r0, [r4, #0]
    if (ret < 0) {
     b3c:	da04      	bge.n	b48 <conf+0x54>
}
     b3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        printk("Error %d: Failed to configure POT\n\r", ret);
     b42:	4833      	ldr	r0, [pc, #204]	; (c10 <conf+0x11c>)
     b44:	f005 b850 	b.w	5be8 <printk>
     b48:	f240 1211 	movw	r2, #273	; 0x111
     b4c:	210b      	movs	r1, #11
     b4e:	4831      	ldr	r0, [pc, #196]	; (c14 <conf+0x120>)
     b50:	f004 feec 	bl	592c <z_impl_gpio_pin_configure>
    ret = gpio_pin_configure_dt(&button1, GPIO_INPUT);
     b54:	6020      	str	r0, [r4, #0]
	return z_impl_gpio_pin_interrupt_configure(port, pin, flags);
     b56:	210b      	movs	r1, #11
     b58:	482e      	ldr	r0, [pc, #184]	; (c14 <conf+0x120>)
     b5a:	f004 ff01 	bl	5960 <z_impl_gpio_pin_interrupt_configure.constprop.0>
    ret = gpio_pin_interrupt_configure_dt(&button1, GPIO_INT_EDGE_TO_ACTIVE);
     b5e:	6020      	str	r0, [r4, #0]
	callback->handler = handler;
     b60:	482d      	ldr	r0, [pc, #180]	; (c18 <conf+0x124>)
     b62:	4b2e      	ldr	r3, [pc, #184]	; (c1c <conf+0x128>)
     b64:	6043      	str	r3, [r0, #4]
	callback->pin_mask = pin_mask;
     b66:	f44f 6300 	mov.w	r3, #2048	; 0x800
     b6a:	6083      	str	r3, [r0, #8]
    gpio_add_callback(button1.port, &button1_cb_data);
     b6c:	f7ff fe54 	bl	818 <gpio_add_callback.constprop.0>
	return z_impl_gpio_pin_configure(port, pin, flags);
     b70:	f240 1211 	movw	r2, #273	; 0x111
     b74:	210c      	movs	r1, #12
     b76:	4827      	ldr	r0, [pc, #156]	; (c14 <conf+0x120>)
     b78:	f004 fed8 	bl	592c <z_impl_gpio_pin_configure>
    ret = gpio_pin_configure_dt(&button2, GPIO_INPUT);
     b7c:	6020      	str	r0, [r4, #0]
	return z_impl_gpio_pin_interrupt_configure(port, pin, flags);
     b7e:	210c      	movs	r1, #12
     b80:	4824      	ldr	r0, [pc, #144]	; (c14 <conf+0x120>)
     b82:	f004 feed 	bl	5960 <z_impl_gpio_pin_interrupt_configure.constprop.0>
    ret = gpio_pin_interrupt_configure_dt(&button2, GPIO_INT_EDGE_TO_ACTIVE);
     b86:	6020      	str	r0, [r4, #0]
	callback->handler = handler;
     b88:	4825      	ldr	r0, [pc, #148]	; (c20 <conf+0x12c>)
     b8a:	4b26      	ldr	r3, [pc, #152]	; (c24 <conf+0x130>)
     b8c:	6043      	str	r3, [r0, #4]
	callback->pin_mask = pin_mask;
     b8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     b92:	6083      	str	r3, [r0, #8]
    gpio_add_callback(button2.port, &button2_cb_data);
     b94:	f7ff fe40 	bl	818 <gpio_add_callback.constprop.0>
	return z_impl_gpio_pin_configure(port, pin, flags);
     b98:	f240 1211 	movw	r2, #273	; 0x111
     b9c:	2118      	movs	r1, #24
     b9e:	481d      	ldr	r0, [pc, #116]	; (c14 <conf+0x120>)
     ba0:	f004 fec4 	bl	592c <z_impl_gpio_pin_configure>
    ret = gpio_pin_configure_dt(&button3, GPIO_INPUT);
     ba4:	6020      	str	r0, [r4, #0]
	return z_impl_gpio_pin_interrupt_configure(port, pin, flags);
     ba6:	2118      	movs	r1, #24
     ba8:	481a      	ldr	r0, [pc, #104]	; (c14 <conf+0x120>)
     baa:	f004 fed9 	bl	5960 <z_impl_gpio_pin_interrupt_configure.constprop.0>
    ret = gpio_pin_interrupt_configure_dt(&button3, GPIO_INT_EDGE_TO_ACTIVE);
     bae:	6020      	str	r0, [r4, #0]
	callback->handler = handler;
     bb0:	481d      	ldr	r0, [pc, #116]	; (c28 <conf+0x134>)
     bb2:	4b1e      	ldr	r3, [pc, #120]	; (c2c <conf+0x138>)
     bb4:	6043      	str	r3, [r0, #4]
	callback->pin_mask = pin_mask;
     bb6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
     bba:	6083      	str	r3, [r0, #8]
    gpio_add_callback(button3.port, &button3_cb_data);
     bbc:	f7ff fe2c 	bl	818 <gpio_add_callback.constprop.0>
	return z_impl_gpio_pin_configure(port, pin, flags);
     bc0:	f240 1211 	movw	r2, #273	; 0x111
     bc4:	2119      	movs	r1, #25
     bc6:	4813      	ldr	r0, [pc, #76]	; (c14 <conf+0x120>)
     bc8:	f004 feb0 	bl	592c <z_impl_gpio_pin_configure>
    ret = gpio_pin_configure_dt(&button4, GPIO_INPUT);
     bcc:	6020      	str	r0, [r4, #0]
	return z_impl_gpio_pin_interrupt_configure(port, pin, flags);
     bce:	4811      	ldr	r0, [pc, #68]	; (c14 <conf+0x120>)
     bd0:	2119      	movs	r1, #25
     bd2:	f004 fec5 	bl	5960 <z_impl_gpio_pin_interrupt_configure.constprop.0>
    ret = gpio_pin_interrupt_configure_dt(&button4, GPIO_INT_EDGE_TO_ACTIVE);
     bd6:	6020      	str	r0, [r4, #0]
	callback->handler = handler;
     bd8:	4815      	ldr	r0, [pc, #84]	; (c30 <conf+0x13c>)
     bda:	4b16      	ldr	r3, [pc, #88]	; (c34 <conf+0x140>)
     bdc:	6043      	str	r3, [r0, #4]
}
     bde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	callback->pin_mask = pin_mask;
     be2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
     be6:	6083      	str	r3, [r0, #8]
    gpio_add_callback(button4.port, &button4_cb_data);
     be8:	f7ff be16 	b.w	818 <gpio_add_callback.constprop.0>
     bec:	00006b13 	.word	0x00006b13
     bf0:	20000530 	.word	0x20000530
     bf4:	00006b1a 	.word	0x00006b1a
     bf8:	00006b3b 	.word	0x00006b3b
     bfc:	00006b57 	.word	0x00006b57
     c00:	20000538 	.word	0x20000538
     c04:	00006b5d 	.word	0x00006b5d
     c08:	00006b7d 	.word	0x00006b7d
     c0c:	20000544 	.word	0x20000544
     c10:	00006b97 	.word	0x00006b97
     c14:	000065b0 	.word	0x000065b0
     c18:	200004fc 	.word	0x200004fc
     c1c:	000007d1 	.word	0x000007d1
     c20:	20000508 	.word	0x20000508
     c24:	000007f9 	.word	0x000007f9
     c28:	20000514 	.word	0x20000514
     c2c:	000007b9 	.word	0x000007b9
     c30:	20000520 	.word	0x20000520
     c34:	000007c5 	.word	0x000007c5

00000c38 <adc_setup>:
{
     c38:	b510      	push	{r4, lr}
     c3a:	480c      	ldr	r0, [pc, #48]	; (c6c <adc_setup+0x34>)
    adc_dev = device_get_binding(DT_LABEL(ADC_NID));
     c3c:	4c0c      	ldr	r4, [pc, #48]	; (c70 <adc_setup+0x38>)
     c3e:	f003 fbf1 	bl	4424 <z_impl_device_get_binding>
     c42:	6020      	str	r0, [r4, #0]
	if (!adc_dev) {
     c44:	b910      	cbnz	r0, c4c <adc_setup+0x14>
        printk("ADC device_get_binding() failed\n\r");
     c46:	480b      	ldr	r0, [pc, #44]	; (c74 <adc_setup+0x3c>)
     c48:	f004 ffce 	bl	5be8 <printk>
    err = adc_channel_setup(adc_dev, &my_channel_cfg);
     c4c:	6820      	ldr	r0, [r4, #0]
	return api->channel_setup(dev, channel_cfg);
     c4e:	6883      	ldr	r3, [r0, #8]
     c50:	4909      	ldr	r1, [pc, #36]	; (c78 <adc_setup+0x40>)
     c52:	681b      	ldr	r3, [r3, #0]
     c54:	4798      	blx	r3
     c56:	4b09      	ldr	r3, [pc, #36]	; (c7c <adc_setup+0x44>)
     c58:	4601      	mov	r1, r0
     c5a:	6018      	str	r0, [r3, #0]
    if (err) {
     c5c:	b110      	cbz	r0, c64 <adc_setup+0x2c>
        printk("adc_channel_setup() failed with error code %d\n\r", err);
     c5e:	4808      	ldr	r0, [pc, #32]	; (c80 <adc_setup+0x48>)
     c60:	f004 ffc2 	bl	5be8 <printk>
    NRF_SAADC->TASKS_CALIBRATEOFFSET = 1;
     c64:	4b07      	ldr	r3, [pc, #28]	; (c84 <adc_setup+0x4c>)
     c66:	2201      	movs	r2, #1
     c68:	60da      	str	r2, [r3, #12]
}
     c6a:	bd10      	pop	{r4, pc}
     c6c:	00006bbb 	.word	0x00006bbb
     c70:	200004f4 	.word	0x200004f4
     c74:	00006bc1 	.word	0x00006bc1
     c78:	000069f8 	.word	0x000069f8
     c7c:	2000052c 	.word	0x2000052c
     c80:	00006be3 	.word	0x00006be3
     c84:	40007000 	.word	0x40007000

00000c88 <main>:
{
     c88:	b5f0      	push	{r4, r5, r6, r7, lr}
     c8a:	b089      	sub	sp, #36	; 0x24
    conf();
     c8c:	f7ff ff32 	bl	af4 <conf>
    adc_setup();
     c90:	f7ff ffd2 	bl	c38 <adc_setup>
    printf("\n\r Illustration of the use of shmem + semaphores\n\r");
     c94:	4823      	ldr	r0, [pc, #140]	; (d24 <main+0x9c>)
     c96:	f001 fa9b 	bl	21d0 <printf>
	return z_impl_k_sem_init(sem, initial_count, limit);
     c9a:	2201      	movs	r2, #1
     c9c:	2100      	movs	r1, #0
     c9e:	4822      	ldr	r0, [pc, #136]	; (d28 <main+0xa0>)
     ca0:	f005 fbc1 	bl	6426 <z_impl_k_sem_init>
     ca4:	2201      	movs	r2, #1
     ca6:	2100      	movs	r1, #0
     ca8:	4820      	ldr	r0, [pc, #128]	; (d2c <main+0xa4>)
     caa:	f005 fbbc 	bl	6426 <z_impl_k_sem_init>
     cae:	2201      	movs	r2, #1
     cb0:	2100      	movs	r1, #0
     cb2:	481f      	ldr	r0, [pc, #124]	; (d30 <main+0xa8>)
     cb4:	f005 fbb7 	bl	6426 <z_impl_k_sem_init>
    read_thread_tid = k_thread_create(&read_thread_data, read_thread_stack,
     cb8:	2600      	movs	r6, #0
     cba:	2700      	movs	r7, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
     cbc:	2400      	movs	r4, #0
     cbe:	2501      	movs	r5, #1
     cc0:	e9cd 6706 	strd	r6, r7, [sp, #24]
     cc4:	e9cd 5403 	strd	r5, r4, [sp, #12]
     cc8:	e9cd 4401 	strd	r4, r4, [sp, #4]
     ccc:	4b19      	ldr	r3, [pc, #100]	; (d34 <main+0xac>)
     cce:	491a      	ldr	r1, [pc, #104]	; (d38 <main+0xb0>)
     cd0:	9400      	str	r4, [sp, #0]
     cd2:	f44f 6280 	mov.w	r2, #1024	; 0x400
     cd6:	4819      	ldr	r0, [pc, #100]	; (d3c <main+0xb4>)
     cd8:	f004 f996 	bl	5008 <z_impl_k_thread_create>
     cdc:	4b18      	ldr	r3, [pc, #96]	; (d40 <main+0xb8>)
     cde:	6018      	str	r0, [r3, #0]
     ce0:	4b18      	ldr	r3, [pc, #96]	; (d44 <main+0xbc>)
     ce2:	4919      	ldr	r1, [pc, #100]	; (d48 <main+0xc0>)
     ce4:	9400      	str	r4, [sp, #0]
     ce6:	e9cd 6706 	strd	r6, r7, [sp, #24]
     cea:	e9cd 5403 	strd	r5, r4, [sp, #12]
     cee:	e9cd 4401 	strd	r4, r4, [sp, #4]
     cf2:	f44f 6280 	mov.w	r2, #1024	; 0x400
     cf6:	4815      	ldr	r0, [pc, #84]	; (d4c <main+0xc4>)
     cf8:	f004 f986 	bl	5008 <z_impl_k_thread_create>
    manual_out_thread_tid = k_thread_create(&manual_out_thread_data, manual_out_thread_stack,
     cfc:	4b14      	ldr	r3, [pc, #80]	; (d50 <main+0xc8>)
     cfe:	6018      	str	r0, [r3, #0]
     d00:	4b14      	ldr	r3, [pc, #80]	; (d54 <main+0xcc>)
     d02:	4915      	ldr	r1, [pc, #84]	; (d58 <main+0xd0>)
     d04:	9400      	str	r4, [sp, #0]
     d06:	e9cd 6706 	strd	r6, r7, [sp, #24]
     d0a:	e9cd 5403 	strd	r5, r4, [sp, #12]
     d0e:	e9cd 4401 	strd	r4, r4, [sp, #4]
     d12:	f44f 6280 	mov.w	r2, #1024	; 0x400
     d16:	4811      	ldr	r0, [pc, #68]	; (d5c <main+0xd4>)
     d18:	f004 f976 	bl	5008 <z_impl_k_thread_create>
    action_thread_tid = k_thread_create(&action_thread_data, action_thread_stack,
     d1c:	4b10      	ldr	r3, [pc, #64]	; (d60 <main+0xd8>)
     d1e:	6018      	str	r0, [r3, #0]
}
     d20:	b009      	add	sp, #36	; 0x24
     d22:	bdf0      	pop	{r4, r5, r6, r7, pc}
     d24:	00006c13 	.word	0x00006c13
     d28:	20000568 	.word	0x20000568
     d2c:	20000548 	.word	0x20000548
     d30:	20000558 	.word	0x20000558
     d34:	0000098d 	.word	0x0000098d
     d38:	20001240 	.word	0x20001240
     d3c:	20000348 	.word	0x20000348
     d40:	20000540 	.word	0x20000540
     d44:	00000861 	.word	0x00000861
     d48:	20001660 	.word	0x20001660
     d4c:	200002c8 	.word	0x200002c8
     d50:	20000534 	.word	0x20000534
     d54:	00000831 	.word	0x00000831
     d58:	20001a80 	.word	0x20001a80
     d5c:	20000248 	.word	0x20000248
     d60:	200004f0 	.word	0x200004f0

00000d64 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
     d64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     d68:	b091      	sub	sp, #68	; 0x44
     d6a:	468b      	mov	fp, r1
     d6c:	9002      	str	r0, [sp, #8]
     d6e:	4692      	mov	sl, r2
     d70:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
     d72:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
     d74:	f89a 0000 	ldrb.w	r0, [sl]
     d78:	b908      	cbnz	r0, d7e <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
     d7a:	4628      	mov	r0, r5
     d7c:	e35e      	b.n	143c <CONFIG_FPROTECT_BLOCK_SIZE+0x43c>
		if (*fp != '%') {
     d7e:	2825      	cmp	r0, #37	; 0x25
     d80:	f10a 0701 	add.w	r7, sl, #1
     d84:	d007      	beq.n	d96 <cbvprintf+0x32>
			OUTC('%');
     d86:	9b02      	ldr	r3, [sp, #8]
     d88:	4659      	mov	r1, fp
     d8a:	4798      	blx	r3
     d8c:	2800      	cmp	r0, #0
     d8e:	f2c0 8355 	blt.w	143c <CONFIG_FPROTECT_BLOCK_SIZE+0x43c>
     d92:	3501      	adds	r5, #1
			break;
     d94:	e210      	b.n	11b8 <CONFIG_FPROTECT_BLOCK_SIZE+0x1b8>
		} state = {
     d96:	2218      	movs	r2, #24
     d98:	2100      	movs	r1, #0
     d9a:	a80a      	add	r0, sp, #40	; 0x28
     d9c:	f004 ff87 	bl	5cae <memset>
	if (*sp == '%') {
     da0:	f89a 3001 	ldrb.w	r3, [sl, #1]
     da4:	2b25      	cmp	r3, #37	; 0x25
     da6:	d078      	beq.n	e9a <cbvprintf+0x136>
     da8:	2200      	movs	r2, #0
     daa:	4694      	mov	ip, r2
     dac:	4616      	mov	r6, r2
     dae:	4696      	mov	lr, r2
     db0:	4610      	mov	r0, r2
     db2:	4639      	mov	r1, r7
		switch (*sp) {
     db4:	f817 3b01 	ldrb.w	r3, [r7], #1
     db8:	2b2b      	cmp	r3, #43	; 0x2b
     dba:	f000 809d 	beq.w	ef8 <cbvprintf+0x194>
     dbe:	f200 8094 	bhi.w	eea <cbvprintf+0x186>
     dc2:	2b20      	cmp	r3, #32
     dc4:	f000 809b 	beq.w	efe <cbvprintf+0x19a>
     dc8:	2b23      	cmp	r3, #35	; 0x23
     dca:	f000 809a 	beq.w	f02 <cbvprintf+0x19e>
     dce:	b128      	cbz	r0, ddc <cbvprintf+0x78>
     dd0:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     dd4:	f040 0004 	orr.w	r0, r0, #4
     dd8:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     ddc:	f1be 0f00 	cmp.w	lr, #0
     de0:	d005      	beq.n	dee <cbvprintf+0x8a>
     de2:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     de6:	f040 0008 	orr.w	r0, r0, #8
     dea:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     dee:	b12e      	cbz	r6, dfc <cbvprintf+0x98>
     df0:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     df4:	f040 0010 	orr.w	r0, r0, #16
     df8:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     dfc:	f1bc 0f00 	cmp.w	ip, #0
     e00:	d005      	beq.n	e0e <cbvprintf+0xaa>
     e02:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     e06:	f040 0020 	orr.w	r0, r0, #32
     e0a:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     e0e:	b12a      	cbz	r2, e1c <cbvprintf+0xb8>
     e10:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     e14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
     e18:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
     e1c:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     e20:	f002 0044 	and.w	r0, r2, #68	; 0x44
     e24:	2844      	cmp	r0, #68	; 0x44
     e26:	d103      	bne.n	e30 <cbvprintf+0xcc>
		conv->flag_zero = false;
     e28:	f36f 1286 	bfc	r2, #6, #1
     e2c:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
     e30:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
     e34:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
     e36:	f042 0280 	orr.w	r2, r2, #128	; 0x80
     e3a:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
     e3e:	d17b      	bne.n	f38 <cbvprintf+0x1d4>
		conv->width_star = true;
     e40:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     e44:	f042 0201 	orr.w	r2, r2, #1
     e48:	1c4b      	adds	r3, r1, #1
     e4a:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
     e4e:	781a      	ldrb	r2, [r3, #0]
     e50:	2a2e      	cmp	r2, #46	; 0x2e
     e52:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     e56:	bf0c      	ite	eq
     e58:	2101      	moveq	r1, #1
     e5a:	2100      	movne	r1, #0
     e5c:	f361 0241 	bfi	r2, r1, #1, #1
     e60:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
     e64:	d174      	bne.n	f50 <cbvprintf+0x1ec>
	if (*sp == '*') {
     e66:	785a      	ldrb	r2, [r3, #1]
     e68:	2a2a      	cmp	r2, #42	; 0x2a
     e6a:	d06a      	beq.n	f42 <cbvprintf+0x1de>
     e6c:	3301      	adds	r3, #1
	size_t val = 0;
     e6e:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
     e70:	260a      	movs	r6, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
     e72:	4618      	mov	r0, r3
     e74:	f810 2b01 	ldrb.w	r2, [r0], #1
     e78:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     e7c:	2f09      	cmp	r7, #9
     e7e:	f240 808e 	bls.w	f9e <cbvprintf+0x23a>
	conv->unsupported |= ((conv->prec_value < 0)
     e82:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
     e86:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
     e88:	f3c2 0040 	ubfx	r0, r2, #1, #1
     e8c:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
     e90:	f361 0241 	bfi	r2, r1, #1, #1
     e94:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
     e98:	e05a      	b.n	f50 <cbvprintf+0x1ec>
		conv->specifier = *sp++;
     e9a:	f10a 0702 	add.w	r7, sl, #2
     e9e:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
     ea2:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     ea6:	07d9      	lsls	r1, r3, #31
     ea8:	f140 8149 	bpl.w	113e <CONFIG_FPROTECT_BLOCK_SIZE+0x13e>
			width = va_arg(ap, int);
     eac:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
     eb0:	f1b9 0f00 	cmp.w	r9, #0
     eb4:	da07      	bge.n	ec6 <cbvprintf+0x162>
				conv->flag_dash = true;
     eb6:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     eba:	f042 0204 	orr.w	r2, r2, #4
     ebe:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				width = -width;
     ec2:	f1c9 0900 	rsb	r9, r9, #0
		if (conv->prec_star) {
     ec6:	075a      	lsls	r2, r3, #29
     ec8:	f140 8142 	bpl.w	1150 <CONFIG_FPROTECT_BLOCK_SIZE+0x150>
			int arg = va_arg(ap, int);
     ecc:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
     ed0:	f1b8 0f00 	cmp.w	r8, #0
     ed4:	f280 8141 	bge.w	115a <CONFIG_FPROTECT_BLOCK_SIZE+0x15a>
				conv->prec_present = false;
     ed8:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     edc:	f36f 0341 	bfc	r3, #1, #1
     ee0:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
     ee4:	f04f 38ff 	mov.w	r8, #4294967295
     ee8:	e137      	b.n	115a <CONFIG_FPROTECT_BLOCK_SIZE+0x15a>
		switch (*sp) {
     eea:	2b2d      	cmp	r3, #45	; 0x2d
     eec:	d00c      	beq.n	f08 <cbvprintf+0x1a4>
     eee:	2b30      	cmp	r3, #48	; 0x30
     ef0:	f47f af6d 	bne.w	dce <cbvprintf+0x6a>
			conv->flag_zero = true;
     ef4:	2201      	movs	r2, #1
	} while (loop);
     ef6:	e75c      	b.n	db2 <cbvprintf+0x4e>
			conv->flag_plus = true;
     ef8:	f04f 0e01 	mov.w	lr, #1
     efc:	e759      	b.n	db2 <cbvprintf+0x4e>
			conv->flag_space = true;
     efe:	2601      	movs	r6, #1
     f00:	e757      	b.n	db2 <cbvprintf+0x4e>
			conv->flag_hash = true;
     f02:	f04f 0c01 	mov.w	ip, #1
     f06:	e754      	b.n	db2 <cbvprintf+0x4e>
		switch (*sp) {
     f08:	2001      	movs	r0, #1
     f0a:	e752      	b.n	db2 <cbvprintf+0x4e>
		val = 10U * val + *sp++ - '0';
     f0c:	fb0c 0202 	mla	r2, ip, r2, r0
     f10:	3a30      	subs	r2, #48	; 0x30
     f12:	4633      	mov	r3, r6
     f14:	461e      	mov	r6, r3
     f16:	f816 0b01 	ldrb.w	r0, [r6], #1
     f1a:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     f1e:	2f09      	cmp	r7, #9
     f20:	d9f4      	bls.n	f0c <cbvprintf+0x1a8>
	if (sp != wp) {
     f22:	4299      	cmp	r1, r3
     f24:	d093      	beq.n	e4e <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
     f26:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
     f2a:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
     f2c:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
     f2e:	f362 0141 	bfi	r1, r2, #1, #1
     f32:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
     f36:	e78a      	b.n	e4e <cbvprintf+0xea>
     f38:	460b      	mov	r3, r1
	size_t val = 0;
     f3a:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
     f3c:	f04f 0c0a 	mov.w	ip, #10
     f40:	e7e8      	b.n	f14 <cbvprintf+0x1b0>
		conv->prec_star = true;
     f42:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     f46:	f042 0204 	orr.w	r2, r2, #4
     f4a:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
		return ++sp;
     f4e:	3302      	adds	r3, #2
	switch (*sp) {
     f50:	461f      	mov	r7, r3
     f52:	f817 2b01 	ldrb.w	r2, [r7], #1
     f56:	2a6c      	cmp	r2, #108	; 0x6c
     f58:	d041      	beq.n	fde <cbvprintf+0x27a>
     f5a:	d825      	bhi.n	fa8 <cbvprintf+0x244>
     f5c:	2a68      	cmp	r2, #104	; 0x68
     f5e:	d02b      	beq.n	fb8 <cbvprintf+0x254>
     f60:	2a6a      	cmp	r2, #106	; 0x6a
     f62:	d046      	beq.n	ff2 <cbvprintf+0x28e>
     f64:	2a4c      	cmp	r2, #76	; 0x4c
     f66:	d04c      	beq.n	1002 <CONFIG_FPROTECT_BLOCK_SIZE+0x2>
     f68:	461f      	mov	r7, r3
	conv->specifier = *sp++;
     f6a:	f817 2b01 	ldrb.w	r2, [r7], #1
     f6e:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     f72:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
     f76:	2a78      	cmp	r2, #120	; 0x78
     f78:	f200 80d9 	bhi.w	112e <CONFIG_FPROTECT_BLOCK_SIZE+0x12e>
     f7c:	2a57      	cmp	r2, #87	; 0x57
     f7e:	d84d      	bhi.n	101c <CONFIG_FPROTECT_BLOCK_SIZE+0x1c>
     f80:	2a41      	cmp	r2, #65	; 0x41
     f82:	d003      	beq.n	f8c <cbvprintf+0x228>
     f84:	3a45      	subs	r2, #69	; 0x45
     f86:	2a02      	cmp	r2, #2
     f88:	f200 80d1 	bhi.w	112e <CONFIG_FPROTECT_BLOCK_SIZE+0x12e>
		conv->specifier_cat = SPECIFIER_FP;
     f8c:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
     f90:	2204      	movs	r2, #4
     f92:	f362 0302 	bfi	r3, r2, #0, #3
     f96:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
     f9a:	2301      	movs	r3, #1
			break;
     f9c:	e09e      	b.n	10dc <CONFIG_FPROTECT_BLOCK_SIZE+0xdc>
		val = 10U * val + *sp++ - '0';
     f9e:	fb06 2101 	mla	r1, r6, r1, r2
     fa2:	3930      	subs	r1, #48	; 0x30
     fa4:	4603      	mov	r3, r0
     fa6:	e764      	b.n	e72 <cbvprintf+0x10e>
	switch (*sp) {
     fa8:	2a74      	cmp	r2, #116	; 0x74
     faa:	d026      	beq.n	ffa <cbvprintf+0x296>
     fac:	2a7a      	cmp	r2, #122	; 0x7a
     fae:	d1db      	bne.n	f68 <cbvprintf+0x204>
		conv->length_mod = LENGTH_Z;
     fb0:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     fb4:	2206      	movs	r2, #6
     fb6:	e00d      	b.n	fd4 <cbvprintf+0x270>
		if (*++sp == 'h') {
     fb8:	785a      	ldrb	r2, [r3, #1]
     fba:	2a68      	cmp	r2, #104	; 0x68
     fbc:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     fc0:	d106      	bne.n	fd0 <cbvprintf+0x26c>
			conv->length_mod = LENGTH_HH;
     fc2:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
     fc4:	f361 02c6 	bfi	r2, r1, #3, #4
     fc8:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
     fcc:	1c9f      	adds	r7, r3, #2
     fce:	e7cc      	b.n	f6a <cbvprintf+0x206>
			conv->length_mod = LENGTH_H;
     fd0:	4613      	mov	r3, r2
     fd2:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
     fd4:	f362 03c6 	bfi	r3, r2, #3, #4
     fd8:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
     fdc:	e7c5      	b.n	f6a <cbvprintf+0x206>
		if (*++sp == 'l') {
     fde:	785a      	ldrb	r2, [r3, #1]
     fe0:	2a6c      	cmp	r2, #108	; 0x6c
     fe2:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     fe6:	d101      	bne.n	fec <cbvprintf+0x288>
			conv->length_mod = LENGTH_LL;
     fe8:	2104      	movs	r1, #4
     fea:	e7eb      	b.n	fc4 <cbvprintf+0x260>
			conv->length_mod = LENGTH_L;
     fec:	4613      	mov	r3, r2
     fee:	2203      	movs	r2, #3
     ff0:	e7f0      	b.n	fd4 <cbvprintf+0x270>
		conv->length_mod = LENGTH_J;
     ff2:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     ff6:	2205      	movs	r2, #5
     ff8:	e7ec      	b.n	fd4 <cbvprintf+0x270>
		conv->length_mod = LENGTH_T;
     ffa:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     ffe:	2207      	movs	r2, #7
    1000:	e7e8      	b.n	fd4 <cbvprintf+0x270>
		conv->unsupported = true;
    1002:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    1006:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
    100a:	f023 0302 	bic.w	r3, r3, #2
    100e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    1012:	f043 0302 	orr.w	r3, r3, #2
    1016:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
    101a:	e7a6      	b.n	f6a <cbvprintf+0x206>
    101c:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
    1020:	2920      	cmp	r1, #32
    1022:	f200 8084 	bhi.w	112e <CONFIG_FPROTECT_BLOCK_SIZE+0x12e>
    1026:	a001      	add	r0, pc, #4	; (adr r0, 102c <CONFIG_FPROTECT_BLOCK_SIZE+0x2c>)
    1028:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
    102c:	000010f1 	.word	0x000010f1
    1030:	0000112f 	.word	0x0000112f
    1034:	0000112f 	.word	0x0000112f
    1038:	0000112f 	.word	0x0000112f
    103c:	0000112f 	.word	0x0000112f
    1040:	0000112f 	.word	0x0000112f
    1044:	0000112f 	.word	0x0000112f
    1048:	0000112f 	.word	0x0000112f
    104c:	0000112f 	.word	0x0000112f
    1050:	00000f8d 	.word	0x00000f8d
    1054:	0000112f 	.word	0x0000112f
    1058:	000010f1 	.word	0x000010f1
    105c:	000010b1 	.word	0x000010b1
    1060:	00000f8d 	.word	0x00000f8d
    1064:	00000f8d 	.word	0x00000f8d
    1068:	00000f8d 	.word	0x00000f8d
    106c:	0000112f 	.word	0x0000112f
    1070:	000010b1 	.word	0x000010b1
    1074:	0000112f 	.word	0x0000112f
    1078:	0000112f 	.word	0x0000112f
    107c:	0000112f 	.word	0x0000112f
    1080:	0000112f 	.word	0x0000112f
    1084:	000010f9 	.word	0x000010f9
    1088:	000010f1 	.word	0x000010f1
    108c:	00001115 	.word	0x00001115
    1090:	0000112f 	.word	0x0000112f
    1094:	0000112f 	.word	0x0000112f
    1098:	00001115 	.word	0x00001115
    109c:	0000112f 	.word	0x0000112f
    10a0:	000010f1 	.word	0x000010f1
    10a4:	0000112f 	.word	0x0000112f
    10a8:	0000112f 	.word	0x0000112f
    10ac:	000010f1 	.word	0x000010f1
		conv->specifier_cat = SPECIFIER_SINT;
    10b0:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
    10b4:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
    10b6:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    10ba:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    10be:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    10c0:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
    10c4:	bf02      	ittt	eq
    10c6:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
    10ca:	f041 0101 	orreq.w	r1, r1, #1
    10ce:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
    10d2:	2a63      	cmp	r2, #99	; 0x63
    10d4:	d131      	bne.n	113a <CONFIG_FPROTECT_BLOCK_SIZE+0x13a>
			unsupported = (conv->length_mod != LENGTH_NONE);
    10d6:	3b00      	subs	r3, #0
    10d8:	bf18      	it	ne
    10da:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    10dc:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    10e0:	f3c2 0140 	ubfx	r1, r2, #1, #1
    10e4:	430b      	orrs	r3, r1
    10e6:	f363 0241 	bfi	r2, r3, #1, #1
    10ea:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
    10ee:	e6d8      	b.n	ea2 <cbvprintf+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
    10f0:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
    10f4:	2002      	movs	r0, #2
    10f6:	e7de      	b.n	10b6 <CONFIG_FPROTECT_BLOCK_SIZE+0xb6>
		conv->specifier_cat = SPECIFIER_PTR;
    10f8:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    10fc:	f003 0378 	and.w	r3, r3, #120	; 0x78
    1100:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
    1104:	2103      	movs	r1, #3
    1106:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    110a:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
    110c:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    1110:	4143      	adcs	r3, r0
    1112:	e7e3      	b.n	10dc <CONFIG_FPROTECT_BLOCK_SIZE+0xdc>
		conv->specifier_cat = SPECIFIER_PTR;
    1114:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    1118:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
    111a:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    111e:	f361 0202 	bfi	r2, r1, #0, #3
    1122:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
    1126:	bf14      	ite	ne
    1128:	2301      	movne	r3, #1
    112a:	2300      	moveq	r3, #0
    112c:	e7d6      	b.n	10dc <CONFIG_FPROTECT_BLOCK_SIZE+0xdc>
		conv->invalid = true;
    112e:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    1132:	f043 0301 	orr.w	r3, r3, #1
    1136:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
    113a:	2300      	movs	r3, #0
    113c:	e7ce      	b.n	10dc <CONFIG_FPROTECT_BLOCK_SIZE+0xdc>
		} else if (conv->width_present) {
    113e:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
    1142:	2a00      	cmp	r2, #0
			width = conv->width_value;
    1144:	bfb4      	ite	lt
    1146:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
		int width = -1;
    114a:	f04f 39ff 	movge.w	r9, #4294967295
    114e:	e6ba      	b.n	ec6 <cbvprintf+0x162>
		} else if (conv->prec_present) {
    1150:	079b      	lsls	r3, r3, #30
    1152:	f57f aec7 	bpl.w	ee4 <cbvprintf+0x180>
			precision = conv->prec_value;
    1156:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
			= (enum length_mod_enum)conv->length_mod;
    115a:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
		conv->pad0_value = 0;
    115e:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    1160:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
    1164:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
		enum specifier_cat_enum specifier_cat
    1168:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    116c:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    116e:	f3c2 02c3 	ubfx	r2, r2, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    1172:	d136      	bne.n	11e2 <CONFIG_FPROTECT_BLOCK_SIZE+0x1e2>
			switch (length_mod) {
    1174:	1ed3      	subs	r3, r2, #3
    1176:	2b04      	cmp	r3, #4
    1178:	d820      	bhi.n	11bc <CONFIG_FPROTECT_BLOCK_SIZE+0x1bc>
    117a:	e8df f003 	tbb	[pc, r3]
    117e:	0703      	.short	0x0703
    1180:	1f07      	.short	0x1f07
    1182:	1f          	.byte	0x1f
    1183:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
    1184:	f854 0b04 	ldr.w	r0, [r4], #4
				value->sint = (short)value->sint;
    1188:	17c1      	asrs	r1, r0, #31
    118a:	e004      	b.n	1196 <CONFIG_FPROTECT_BLOCK_SIZE+0x196>
					(sint_value_type)va_arg(ap, intmax_t);
    118c:	3407      	adds	r4, #7
    118e:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
    1192:	e8f4 0102 	ldrd	r0, r1, [r4], #8
				value->sint = (short)value->sint;
    1196:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
    119a:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    119e:	f013 0603 	ands.w	r6, r3, #3
    11a2:	d054      	beq.n	124e <CONFIG_FPROTECT_BLOCK_SIZE+0x24e>
			OUTS(sp, fp);
    11a4:	9802      	ldr	r0, [sp, #8]
    11a6:	463b      	mov	r3, r7
    11a8:	4652      	mov	r2, sl
    11aa:	4659      	mov	r1, fp
    11ac:	f004 fc36 	bl	5a1c <outs>
    11b0:	2800      	cmp	r0, #0
    11b2:	f2c0 8143 	blt.w	143c <CONFIG_FPROTECT_BLOCK_SIZE+0x43c>
    11b6:	4405      	add	r5, r0
			continue;
    11b8:	46ba      	mov	sl, r7
    11ba:	e5db      	b.n	d74 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    11bc:	f854 0b04 	ldr.w	r0, [r4], #4
			if (length_mod == LENGTH_HH) {
    11c0:	2a01      	cmp	r2, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
    11c2:	ea4f 71e0 	mov.w	r1, r0, asr #31
    11c6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
    11ca:	d105      	bne.n	11d8 <CONFIG_FPROTECT_BLOCK_SIZE+0x1d8>
				value->uint = (unsigned char)value->uint;
    11cc:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
    11d0:	930a      	str	r3, [sp, #40]	; 0x28
    11d2:	2300      	movs	r3, #0
    11d4:	930b      	str	r3, [sp, #44]	; 0x2c
    11d6:	e7e0      	b.n	119a <CONFIG_FPROTECT_BLOCK_SIZE+0x19a>
			} else if (length_mod == LENGTH_H) {
    11d8:	2a02      	cmp	r2, #2
    11da:	d1de      	bne.n	119a <CONFIG_FPROTECT_BLOCK_SIZE+0x19a>
				value->sint = (short)value->sint;
    11dc:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
    11e0:	e7d2      	b.n	1188 <CONFIG_FPROTECT_BLOCK_SIZE+0x188>
		} else if (specifier_cat == SPECIFIER_UINT) {
    11e2:	2b02      	cmp	r3, #2
    11e4:	d123      	bne.n	122e <CONFIG_FPROTECT_BLOCK_SIZE+0x22e>
			switch (length_mod) {
    11e6:	1ed3      	subs	r3, r2, #3
    11e8:	2b04      	cmp	r3, #4
    11ea:	d813      	bhi.n	1214 <CONFIG_FPROTECT_BLOCK_SIZE+0x214>
    11ec:	e8df f003 	tbb	[pc, r3]
    11f0:	120a0a03 	.word	0x120a0a03
    11f4:	12          	.byte	0x12
    11f5:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
    11f6:	6820      	ldr	r0, [r4, #0]
    11f8:	900a      	str	r0, [sp, #40]	; 0x28
    11fa:	2100      	movs	r1, #0
    11fc:	1d23      	adds	r3, r4, #4
    11fe:	910b      	str	r1, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
    1200:	461c      	mov	r4, r3
    1202:	e7ca      	b.n	119a <CONFIG_FPROTECT_BLOCK_SIZE+0x19a>
					(uint_value_type)va_arg(ap,
    1204:	3407      	adds	r4, #7
    1206:	f024 0307 	bic.w	r3, r4, #7
				value->uint =
    120a:	e8f3 0102 	ldrd	r0, r1, [r3], #8
    120e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
				break;
    1212:	e7f5      	b.n	1200 <CONFIG_FPROTECT_BLOCK_SIZE+0x200>
					(uint_value_type)va_arg(ap, size_t);
    1214:	f854 3b04 	ldr.w	r3, [r4], #4
    1218:	930a      	str	r3, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
    121a:	2a01      	cmp	r2, #1
					(uint_value_type)va_arg(ap, size_t);
    121c:	f04f 0300 	mov.w	r3, #0
    1220:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
    1222:	d0d3      	beq.n	11cc <CONFIG_FPROTECT_BLOCK_SIZE+0x1cc>
			} else if (length_mod == LENGTH_H) {
    1224:	2a02      	cmp	r2, #2
    1226:	d1b8      	bne.n	119a <CONFIG_FPROTECT_BLOCK_SIZE+0x19a>
				value->uint = (unsigned short)value->uint;
    1228:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    122c:	e7d0      	b.n	11d0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1d0>
		} else if (specifier_cat == SPECIFIER_FP) {
    122e:	2b04      	cmp	r3, #4
    1230:	d107      	bne.n	1242 <CONFIG_FPROTECT_BLOCK_SIZE+0x242>
			if (length_mod == LENGTH_UPPER_L) {
    1232:	3407      	adds	r4, #7
    1234:	f024 0407 	bic.w	r4, r4, #7
    1238:	e8f4 0102 	ldrd	r0, r1, [r4], #8
				value->ldbl = va_arg(ap, long double);
    123c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    1240:	e7ab      	b.n	119a <CONFIG_FPROTECT_BLOCK_SIZE+0x19a>
		} else if (specifier_cat == SPECIFIER_PTR) {
    1242:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
    1244:	bf04      	itt	eq
    1246:	f854 3b04 	ldreq.w	r3, [r4], #4
    124a:	930a      	streq	r3, [sp, #40]	; 0x28
    124c:	e7a5      	b.n	119a <CONFIG_FPROTECT_BLOCK_SIZE+0x19a>
		switch (conv->specifier) {
    124e:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    1252:	2878      	cmp	r0, #120	; 0x78
    1254:	d8b0      	bhi.n	11b8 <CONFIG_FPROTECT_BLOCK_SIZE+0x1b8>
    1256:	2862      	cmp	r0, #98	; 0x62
    1258:	d822      	bhi.n	12a0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2a0>
    125a:	2825      	cmp	r0, #37	; 0x25
    125c:	f43f ad93 	beq.w	d86 <cbvprintf+0x22>
    1260:	2858      	cmp	r0, #88	; 0x58
    1262:	d1a9      	bne.n	11b8 <CONFIG_FPROTECT_BLOCK_SIZE+0x1b8>
			bps = encode_uint(value->uint, conv, buf, bpe);
    1264:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    1268:	9300      	str	r3, [sp, #0]
    126a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    126e:	ab04      	add	r3, sp, #16
    1270:	aa0c      	add	r2, sp, #48	; 0x30
    1272:	f004 fb88 	bl	5986 <encode_uint>
    1276:	4682      	mov	sl, r0
			if (precision >= 0) {
    1278:	f1b8 0f00 	cmp.w	r8, #0
    127c:	f10d 0026 	add.w	r0, sp, #38	; 0x26
    1280:	db0c      	blt.n	129c <CONFIG_FPROTECT_BLOCK_SIZE+0x29c>
				conv->flag_zero = false;
    1282:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
    1286:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
    128a:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    128e:	4598      	cmp	r8, r3
				conv->flag_zero = false;
    1290:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
    1294:	d902      	bls.n	129c <CONFIG_FPROTECT_BLOCK_SIZE+0x29c>
					conv->pad0_value = precision - (int)len;
    1296:	eba8 0303 	sub.w	r3, r8, r3
    129a:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
    129c:	4680      	mov	r8, r0
    129e:	e03d      	b.n	131c <CONFIG_FPROTECT_BLOCK_SIZE+0x31c>
    12a0:	3863      	subs	r0, #99	; 0x63
    12a2:	2815      	cmp	r0, #21
    12a4:	d888      	bhi.n	11b8 <CONFIG_FPROTECT_BLOCK_SIZE+0x1b8>
    12a6:	a101      	add	r1, pc, #4	; (adr r1, 12ac <CONFIG_FPROTECT_BLOCK_SIZE+0x2ac>)
    12a8:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
    12ac:	0000132d 	.word	0x0000132d
    12b0:	00001391 	.word	0x00001391
    12b4:	000011b9 	.word	0x000011b9
    12b8:	000011b9 	.word	0x000011b9
    12bc:	000011b9 	.word	0x000011b9
    12c0:	000011b9 	.word	0x000011b9
    12c4:	00001391 	.word	0x00001391
    12c8:	000011b9 	.word	0x000011b9
    12cc:	000011b9 	.word	0x000011b9
    12d0:	000011b9 	.word	0x000011b9
    12d4:	000011b9 	.word	0x000011b9
    12d8:	000013ef 	.word	0x000013ef
    12dc:	000013bd 	.word	0x000013bd
    12e0:	000013c1 	.word	0x000013c1
    12e4:	000011b9 	.word	0x000011b9
    12e8:	000011b9 	.word	0x000011b9
    12ec:	00001305 	.word	0x00001305
    12f0:	000011b9 	.word	0x000011b9
    12f4:	000013bd 	.word	0x000013bd
    12f8:	000011b9 	.word	0x000011b9
    12fc:	000011b9 	.word	0x000011b9
    1300:	000013bd 	.word	0x000013bd
			if (precision >= 0) {
    1304:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
    1308:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
    130c:	db0a      	blt.n	1324 <CONFIG_FPROTECT_BLOCK_SIZE+0x324>
				len = strnlen(bps, precision);
    130e:	4641      	mov	r1, r8
    1310:	4650      	mov	r0, sl
    1312:	f004 fcac 	bl	5c6e <strnlen>
			bpe = bps + len;
    1316:	eb0a 0800 	add.w	r8, sl, r0
		char sign = 0;
    131a:	2600      	movs	r6, #0
		if (bps == NULL) {
    131c:	f1ba 0f00 	cmp.w	sl, #0
    1320:	d10c      	bne.n	133c <CONFIG_FPROTECT_BLOCK_SIZE+0x33c>
    1322:	e749      	b.n	11b8 <CONFIG_FPROTECT_BLOCK_SIZE+0x1b8>
				len = strlen(bps);
    1324:	4650      	mov	r0, sl
    1326:	f004 fc9b 	bl	5c60 <strlen>
    132a:	e7f4      	b.n	1316 <CONFIG_FPROTECT_BLOCK_SIZE+0x316>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    132c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    132e:	f88d 3010 	strb.w	r3, [sp, #16]
			break;
    1332:	2600      	movs	r6, #0
			bpe = buf + 1;
    1334:	f10d 0811 	add.w	r8, sp, #17
			bps = buf;
    1338:	f10d 0a10 	add.w	sl, sp, #16
		size_t nj_len = (bpe - bps);
    133c:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
    1340:	b106      	cbz	r6, 1344 <CONFIG_FPROTECT_BLOCK_SIZE+0x344>
			nj_len += 1U;
    1342:	3301      	adds	r3, #1
		if (conv->altform_0c) {
    1344:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    1348:	06d0      	lsls	r0, r2, #27
    134a:	d56b      	bpl.n	1424 <CONFIG_FPROTECT_BLOCK_SIZE+0x424>
			nj_len += 2U;
    134c:	3302      	adds	r3, #2
		if (conv->pad_fp) {
    134e:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
    1350:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
    1352:	bf48      	it	mi
    1354:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
    1356:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
    1358:	bf48      	it	mi
    135a:	189b      	addmi	r3, r3, r2
		if (width > 0) {
    135c:	f1b9 0f00 	cmp.w	r9, #0
    1360:	dd79      	ble.n	1456 <CONFIG_FPROTECT_BLOCK_SIZE+0x456>
			if (!conv->flag_dash) {
    1362:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
    1366:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
    136a:	f3c2 0380 	ubfx	r3, r2, #2, #1
    136e:	9303      	str	r3, [sp, #12]
    1370:	0753      	lsls	r3, r2, #29
    1372:	d470      	bmi.n	1456 <CONFIG_FPROTECT_BLOCK_SIZE+0x456>
				if (conv->flag_zero) {
    1374:	0650      	lsls	r0, r2, #25
    1376:	d564      	bpl.n	1442 <CONFIG_FPROTECT_BLOCK_SIZE+0x442>
					if (sign != 0) {
    1378:	b146      	cbz	r6, 138c <CONFIG_FPROTECT_BLOCK_SIZE+0x38c>
						OUTC(sign);
    137a:	9b02      	ldr	r3, [sp, #8]
    137c:	4659      	mov	r1, fp
    137e:	4630      	mov	r0, r6
    1380:	4798      	blx	r3
    1382:	2800      	cmp	r0, #0
    1384:	db5a      	blt.n	143c <CONFIG_FPROTECT_BLOCK_SIZE+0x43c>
						sign = 0;
    1386:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
    1388:	3501      	adds	r5, #1
						sign = 0;
    138a:	461e      	mov	r6, r3
					pad = '0';
    138c:	2330      	movs	r3, #48	; 0x30
    138e:	e059      	b.n	1444 <CONFIG_FPROTECT_BLOCK_SIZE+0x444>
			if (conv->flag_plus) {
    1390:	071e      	lsls	r6, r3, #28
    1392:	d411      	bmi.n	13b8 <CONFIG_FPROTECT_BLOCK_SIZE+0x3b8>
				sign = ' ';
    1394:	f013 0610 	ands.w	r6, r3, #16
    1398:	bf18      	it	ne
    139a:	2620      	movne	r6, #32
			sint = value->sint;
    139c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
    13a0:	2a00      	cmp	r2, #0
    13a2:	f173 0100 	sbcs.w	r1, r3, #0
    13a6:	f6bf af5d 	bge.w	1264 <CONFIG_FPROTECT_BLOCK_SIZE+0x264>
				value->uint = (uint_value_type)-sint;
    13aa:	4252      	negs	r2, r2
    13ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    13b0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				sign = '-';
    13b4:	262d      	movs	r6, #45	; 0x2d
    13b6:	e755      	b.n	1264 <CONFIG_FPROTECT_BLOCK_SIZE+0x264>
				sign = '+';
    13b8:	262b      	movs	r6, #43	; 0x2b
    13ba:	e7ef      	b.n	139c <CONFIG_FPROTECT_BLOCK_SIZE+0x39c>
		switch (conv->specifier) {
    13bc:	2600      	movs	r6, #0
    13be:	e751      	b.n	1264 <CONFIG_FPROTECT_BLOCK_SIZE+0x264>
			if (value->ptr != NULL) {
    13c0:	980a      	ldr	r0, [sp, #40]	; 0x28
    13c2:	b348      	cbz	r0, 1418 <CONFIG_FPROTECT_BLOCK_SIZE+0x418>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    13c4:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    13c8:	9300      	str	r3, [sp, #0]
    13ca:	aa0c      	add	r2, sp, #48	; 0x30
    13cc:	ab04      	add	r3, sp, #16
    13ce:	2100      	movs	r1, #0
    13d0:	f004 fad9 	bl	5986 <encode_uint>
				conv->altform_0c = true;
    13d4:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
    13d8:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    13dc:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    13e0:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    13e4:	4682      	mov	sl, r0
				conv->altform_0c = true;
    13e6:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
		char sign = 0;
    13ea:	2600      	movs	r6, #0
				goto prec_int_pad0;
    13ec:	e744      	b.n	1278 <CONFIG_FPROTECT_BLOCK_SIZE+0x278>
				store_count(conv, value->ptr, count);
    13ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
    13f0:	2a07      	cmp	r2, #7
    13f2:	f63f aee1 	bhi.w	11b8 <CONFIG_FPROTECT_BLOCK_SIZE+0x1b8>
    13f6:	e8df f002 	tbb	[pc, r2]
    13fa:	040d      	.short	0x040d
    13fc:	08080d06 	.word	0x08080d06
    1400:	0d0d      	.short	0x0d0d
		*(signed char *)dp = (signed char)count;
    1402:	701d      	strb	r5, [r3, #0]
		break;
    1404:	e6d8      	b.n	11b8 <CONFIG_FPROTECT_BLOCK_SIZE+0x1b8>
		*(short *)dp = (short)count;
    1406:	801d      	strh	r5, [r3, #0]
		break;
    1408:	e6d6      	b.n	11b8 <CONFIG_FPROTECT_BLOCK_SIZE+0x1b8>
		*(intmax_t *)dp = (intmax_t)count;
    140a:	4628      	mov	r0, r5
    140c:	17e9      	asrs	r1, r5, #31
    140e:	e9c3 0100 	strd	r0, r1, [r3]
		break;
    1412:	e6d1      	b.n	11b8 <CONFIG_FPROTECT_BLOCK_SIZE+0x1b8>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    1414:	601d      	str	r5, [r3, #0]
		break;
    1416:	e6cf      	b.n	11b8 <CONFIG_FPROTECT_BLOCK_SIZE+0x1b8>
			bpe = bps + 5;
    1418:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 14e0 <CONFIG_FPROTECT_BLOCK_SIZE+0x4e0>
    141c:	4606      	mov	r6, r0
			bps = "(nil)";
    141e:	f1a8 0a05 	sub.w	sl, r8, #5
    1422:	e78b      	b.n	133c <CONFIG_FPROTECT_BLOCK_SIZE+0x33c>
		} else if (conv->altform_0) {
    1424:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
    1426:	bf48      	it	mi
    1428:	3301      	addmi	r3, #1
    142a:	e790      	b.n	134e <CONFIG_FPROTECT_BLOCK_SIZE+0x34e>
					OUTC(pad);
    142c:	4618      	mov	r0, r3
    142e:	9303      	str	r3, [sp, #12]
    1430:	4659      	mov	r1, fp
    1432:	9b02      	ldr	r3, [sp, #8]
    1434:	4798      	blx	r3
    1436:	2800      	cmp	r0, #0
    1438:	9b03      	ldr	r3, [sp, #12]
    143a:	da04      	bge.n	1446 <CONFIG_FPROTECT_BLOCK_SIZE+0x446>
#undef OUTS
#undef OUTC
}
    143c:	b011      	add	sp, #68	; 0x44
    143e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    1442:	2320      	movs	r3, #32
    1444:	444d      	add	r5, r9
    1446:	464a      	mov	r2, r9
				while (width-- > 0) {
    1448:	2a00      	cmp	r2, #0
    144a:	eba5 0109 	sub.w	r1, r5, r9
    144e:	f109 39ff 	add.w	r9, r9, #4294967295
    1452:	dceb      	bgt.n	142c <CONFIG_FPROTECT_BLOCK_SIZE+0x42c>
    1454:	460d      	mov	r5, r1
		if (sign != 0) {
    1456:	b136      	cbz	r6, 1466 <CONFIG_FPROTECT_BLOCK_SIZE+0x466>
			OUTC(sign);
    1458:	9b02      	ldr	r3, [sp, #8]
    145a:	4659      	mov	r1, fp
    145c:	4630      	mov	r0, r6
    145e:	4798      	blx	r3
    1460:	2800      	cmp	r0, #0
    1462:	dbeb      	blt.n	143c <CONFIG_FPROTECT_BLOCK_SIZE+0x43c>
    1464:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    1466:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    146a:	06d9      	lsls	r1, r3, #27
    146c:	d401      	bmi.n	1472 <CONFIG_FPROTECT_BLOCK_SIZE+0x472>
    146e:	071a      	lsls	r2, r3, #28
    1470:	d506      	bpl.n	1480 <CONFIG_FPROTECT_BLOCK_SIZE+0x480>
				OUTC('0');
    1472:	9b02      	ldr	r3, [sp, #8]
    1474:	4659      	mov	r1, fp
    1476:	2030      	movs	r0, #48	; 0x30
    1478:	4798      	blx	r3
    147a:	2800      	cmp	r0, #0
    147c:	dbde      	blt.n	143c <CONFIG_FPROTECT_BLOCK_SIZE+0x43c>
    147e:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    1480:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    1484:	06db      	lsls	r3, r3, #27
    1486:	d507      	bpl.n	1498 <CONFIG_FPROTECT_BLOCK_SIZE+0x498>
				OUTC(conv->specifier);
    1488:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    148c:	9b02      	ldr	r3, [sp, #8]
    148e:	4659      	mov	r1, fp
    1490:	4798      	blx	r3
    1492:	2800      	cmp	r0, #0
    1494:	dbd2      	blt.n	143c <CONFIG_FPROTECT_BLOCK_SIZE+0x43c>
    1496:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    1498:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    149a:	442e      	add	r6, r5
    149c:	1b73      	subs	r3, r6, r5
    149e:	2b00      	cmp	r3, #0
    14a0:	dc16      	bgt.n	14d0 <CONFIG_FPROTECT_BLOCK_SIZE+0x4d0>
			OUTS(bps, bpe);
    14a2:	9802      	ldr	r0, [sp, #8]
    14a4:	4643      	mov	r3, r8
    14a6:	4652      	mov	r2, sl
    14a8:	4659      	mov	r1, fp
    14aa:	f004 fab7 	bl	5a1c <outs>
    14ae:	2800      	cmp	r0, #0
    14b0:	dbc4      	blt.n	143c <CONFIG_FPROTECT_BLOCK_SIZE+0x43c>
    14b2:	4405      	add	r5, r0
		while (width > 0) {
    14b4:	44a9      	add	r9, r5
    14b6:	eba9 0305 	sub.w	r3, r9, r5
    14ba:	2b00      	cmp	r3, #0
    14bc:	f77f ae7c 	ble.w	11b8 <CONFIG_FPROTECT_BLOCK_SIZE+0x1b8>
			OUTC(' ');
    14c0:	9b02      	ldr	r3, [sp, #8]
    14c2:	4659      	mov	r1, fp
    14c4:	2020      	movs	r0, #32
    14c6:	4798      	blx	r3
    14c8:	2800      	cmp	r0, #0
    14ca:	dbb7      	blt.n	143c <CONFIG_FPROTECT_BLOCK_SIZE+0x43c>
    14cc:	3501      	adds	r5, #1
			--width;
    14ce:	e7f2      	b.n	14b6 <CONFIG_FPROTECT_BLOCK_SIZE+0x4b6>
				OUTC('0');
    14d0:	9b02      	ldr	r3, [sp, #8]
    14d2:	4659      	mov	r1, fp
    14d4:	2030      	movs	r0, #48	; 0x30
    14d6:	4798      	blx	r3
    14d8:	2800      	cmp	r0, #0
    14da:	dbaf      	blt.n	143c <CONFIG_FPROTECT_BLOCK_SIZE+0x43c>
    14dc:	3501      	adds	r5, #1
    14de:	e7dd      	b.n	149c <CONFIG_FPROTECT_BLOCK_SIZE+0x49c>
    14e0:	00006c4b 	.word	0x00006c4b

000014e4 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    14e4:	4801      	ldr	r0, [pc, #4]	; (14ec <nrf_cc3xx_platform_abort_init+0x8>)
    14e6:	f004 b88f 	b.w	5608 <nrf_cc3xx_platform_set_abort>
    14ea:	bf00      	nop
    14ec:	000067f8 	.word	0x000067f8

000014f0 <mutex_unlock_platform>:
    }
}

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    14f0:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    14f2:	b1d0      	cbz	r0, 152a <mutex_unlock_platform+0x3a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    14f4:	6843      	ldr	r3, [r0, #4]
    14f6:	2b04      	cmp	r3, #4
    14f8:	d111      	bne.n	151e <mutex_unlock_platform+0x2e>
 * @return true if @a new_value is written, false otherwise.
 */
static inline bool atomic_cas(atomic_t *target, atomic_val_t old_value,
			  atomic_val_t new_value)
{
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    14fa:	2200      	movs	r2, #0
    14fc:	6803      	ldr	r3, [r0, #0]
    14fe:	f3bf 8f5b 	dmb	ish
    1502:	e853 1f00 	ldrex	r1, [r3]
    1506:	2901      	cmp	r1, #1
    1508:	d103      	bne.n	1512 <mutex_unlock_platform+0x22>
    150a:	e843 2000 	strex	r0, r2, [r3]
    150e:	2800      	cmp	r0, #0
    1510:	d1f7      	bne.n	1502 <mutex_unlock_platform+0x12>
    1512:	f3bf 8f5b 	dmb	ish
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    1516:	4807      	ldr	r0, [pc, #28]	; (1534 <mutex_unlock_platform+0x44>)
    1518:	bf08      	it	eq
    151a:	4610      	moveq	r0, r2
        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    }
}
    151c:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    151e:	b13b      	cbz	r3, 1530 <mutex_unlock_platform+0x40>
        p_mutex = (struct k_mutex *)mutex->mutex;
    1520:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
    1522:	f003 f953 	bl	47cc <z_impl_k_mutex_unlock>
        return NRF_CC3XX_PLATFORM_SUCCESS;
    1526:	2000      	movs	r0, #0
    1528:	e7f8      	b.n	151c <mutex_unlock_platform+0x2c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    152a:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    152e:	e7f5      	b.n	151c <mutex_unlock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    1530:	4801      	ldr	r0, [pc, #4]	; (1538 <mutex_unlock_platform+0x48>)
    1532:	e7f3      	b.n	151c <mutex_unlock_platform+0x2c>
    1534:	ffff8fe9 	.word	0xffff8fe9
    1538:	ffff8fea 	.word	0xffff8fea

0000153c <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    153c:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    153e:	4604      	mov	r4, r0
    1540:	b918      	cbnz	r0, 154a <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
    1542:	4b0d      	ldr	r3, [pc, #52]	; (1578 <mutex_free_platform+0x3c>)
    1544:	480d      	ldr	r0, [pc, #52]	; (157c <mutex_free_platform+0x40>)
    1546:	685b      	ldr	r3, [r3, #4]
    1548:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    154a:	6861      	ldr	r1, [r4, #4]
    154c:	2908      	cmp	r1, #8
    154e:	d00d      	beq.n	156c <mutex_free_platform+0x30>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    1550:	f031 0304 	bics.w	r3, r1, #4
    1554:	d00a      	beq.n	156c <mutex_free_platform+0x30>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    1556:	f011 0102 	ands.w	r1, r1, #2
    155a:	d008      	beq.n	156e <mutex_free_platform+0x32>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    155c:	4808      	ldr	r0, [pc, #32]	; (1580 <mutex_free_platform+0x44>)
    155e:	4621      	mov	r1, r4
    1560:	f004 fe63 	bl	622a <k_mem_slab_free>
        mutex->mutex = NULL;
    1564:	2300      	movs	r3, #0
    1566:	6023      	str	r3, [r4, #0]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    1568:	2300      	movs	r3, #0
    156a:	6063      	str	r3, [r4, #4]
}
    156c:	bd10      	pop	{r4, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    156e:	6820      	ldr	r0, [r4, #0]
    1570:	2214      	movs	r2, #20
    1572:	f004 fb9c 	bl	5cae <memset>
    1576:	e7f7      	b.n	1568 <mutex_free_platform+0x2c>
    1578:	2000017c 	.word	0x2000017c
    157c:	00006c4c 	.word	0x00006c4c
    1580:	20000578 	.word	0x20000578

00001584 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1584:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    1586:	4604      	mov	r4, r0
    1588:	b918      	cbnz	r0, 1592 <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
    158a:	4b16      	ldr	r3, [pc, #88]	; (15e4 <mutex_init_platform+0x60>)
    158c:	4816      	ldr	r0, [pc, #88]	; (15e8 <mutex_init_platform+0x64>)
    158e:	685b      	ldr	r3, [r3, #4]
    1590:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    1592:	6863      	ldr	r3, [r4, #4]
    1594:	2b04      	cmp	r3, #4
    1596:	d023      	beq.n	15e0 <mutex_init_platform+0x5c>
    1598:	2b08      	cmp	r3, #8
    159a:	d021      	beq.n	15e0 <mutex_init_platform+0x5c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    159c:	b9cb      	cbnz	r3, 15d2 <mutex_init_platform+0x4e>
    159e:	6823      	ldr	r3, [r4, #0]
    15a0:	b9bb      	cbnz	r3, 15d2 <mutex_init_platform+0x4e>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    15a2:	4812      	ldr	r0, [pc, #72]	; (15ec <mutex_init_platform+0x68>)
    15a4:	f04f 32ff 	mov.w	r2, #4294967295
    15a8:	f04f 33ff 	mov.w	r3, #4294967295
    15ac:	4621      	mov	r1, r4
    15ae:	f003 f85f 	bl	4670 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    15b2:	b908      	cbnz	r0, 15b8 <mutex_init_platform+0x34>
    15b4:	6823      	ldr	r3, [r4, #0]
    15b6:	b91b      	cbnz	r3, 15c0 <mutex_init_platform+0x3c>
            platform_abort_apis.abort_fn(
    15b8:	4b0a      	ldr	r3, [pc, #40]	; (15e4 <mutex_init_platform+0x60>)
    15ba:	480d      	ldr	r0, [pc, #52]	; (15f0 <mutex_init_platform+0x6c>)
    15bc:	685b      	ldr	r3, [r3, #4]
    15be:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    15c0:	6820      	ldr	r0, [r4, #0]
    15c2:	2214      	movs	r2, #20
    15c4:	2100      	movs	r1, #0
    15c6:	f004 fb72 	bl	5cae <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    15ca:	6863      	ldr	r3, [r4, #4]
    15cc:	f043 0302 	orr.w	r3, r3, #2
    15d0:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
    15d2:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    15d4:	f004 fe52 	bl	627c <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    15d8:	6863      	ldr	r3, [r4, #4]
    15da:	f043 0301 	orr.w	r3, r3, #1
    15de:	6063      	str	r3, [r4, #4]
}
    15e0:	bd10      	pop	{r4, pc}
    15e2:	bf00      	nop
    15e4:	2000017c 	.word	0x2000017c
    15e8:	00006c4c 	.word	0x00006c4c
    15ec:	20000578 	.word	0x20000578
    15f0:	00006c72 	.word	0x00006c72

000015f4 <mutex_lock_platform>:
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    15f4:	b508      	push	{r3, lr}
    if(mutex == NULL) {
    15f6:	b308      	cbz	r0, 163c <mutex_lock_platform+0x48>
    switch (mutex->flags) {
    15f8:	6843      	ldr	r3, [r0, #4]
    15fa:	2b04      	cmp	r3, #4
    15fc:	d110      	bne.n	1620 <mutex_lock_platform+0x2c>
    15fe:	2201      	movs	r2, #1
    1600:	6803      	ldr	r3, [r0, #0]
    1602:	f3bf 8f5b 	dmb	ish
    1606:	e853 1f00 	ldrex	r1, [r3]
    160a:	2900      	cmp	r1, #0
    160c:	d103      	bne.n	1616 <mutex_lock_platform+0x22>
    160e:	e843 2000 	strex	r0, r2, [r3]
    1612:	2800      	cmp	r0, #0
    1614:	d1f7      	bne.n	1606 <mutex_lock_platform+0x12>
    1616:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
    161a:	d10b      	bne.n	1634 <mutex_lock_platform+0x40>
    161c:	2000      	movs	r0, #0
}
    161e:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    1620:	b153      	cbz	r3, 1638 <mutex_lock_platform+0x44>
        p_mutex = (struct k_mutex *)mutex->mutex;
    1622:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    1624:	f04f 32ff 	mov.w	r2, #4294967295
    1628:	f04f 33ff 	mov.w	r3, #4294967295
    162c:	f003 f850 	bl	46d0 <z_impl_k_mutex_lock>
        if (ret == 0) {
    1630:	2800      	cmp	r0, #0
    1632:	d0f3      	beq.n	161c <mutex_lock_platform+0x28>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    1634:	4803      	ldr	r0, [pc, #12]	; (1644 <mutex_lock_platform+0x50>)
    1636:	e7f2      	b.n	161e <mutex_lock_platform+0x2a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    1638:	4803      	ldr	r0, [pc, #12]	; (1648 <mutex_lock_platform+0x54>)
    163a:	e7f0      	b.n	161e <mutex_lock_platform+0x2a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    163c:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    1640:	e7ed      	b.n	161e <mutex_lock_platform+0x2a>
    1642:	bf00      	nop
    1644:	ffff8fe9 	.word	0xffff8fe9
    1648:	ffff8fea 	.word	0xffff8fea

0000164c <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    164c:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    164e:	4906      	ldr	r1, [pc, #24]	; (1668 <nrf_cc3xx_platform_mutex_init+0x1c>)
    1650:	4806      	ldr	r0, [pc, #24]	; (166c <nrf_cc3xx_platform_mutex_init+0x20>)
    1652:	2340      	movs	r3, #64	; 0x40
    1654:	2214      	movs	r2, #20
    1656:	f004 fdcd 	bl	61f4 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
    165a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    165e:	4904      	ldr	r1, [pc, #16]	; (1670 <nrf_cc3xx_platform_mutex_init+0x24>)
    1660:	4804      	ldr	r0, [pc, #16]	; (1674 <nrf_cc3xx_platform_mutex_init+0x28>)
    1662:	f004 b833 	b.w	56cc <nrf_cc3xx_platform_set_mutexes>
    1666:	bf00      	nop
    1668:	20000594 	.word	0x20000594
    166c:	20000578 	.word	0x20000578
    1670:	00006810 	.word	0x00006810
    1674:	00006800 	.word	0x00006800

00001678 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    1678:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    167c:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    1680:	f019 0808 	ands.w	r8, r9, #8
{
    1684:	4604      	mov	r4, r0
    1686:	4693      	mov	fp, r2
	if (processing) {
    1688:	d00d      	beq.n	16a6 <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
    168a:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    168c:	bf0c      	ite	eq
    168e:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    1692:	f049 0920 	orrne.w	r9, r9, #32
    1696:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    169a:	f38b 8811 	msr	BASEPRI, fp
    169e:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    16a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    16a6:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
    16aa:	2902      	cmp	r1, #2
    16ac:	d107      	bne.n	16be <process_event+0x46>
			evt = process_recheck(mgr);
    16ae:	4620      	mov	r0, r4
    16b0:	f004 f9ed 	bl	5a8e <process_recheck>
		if (evt == EVT_NOP) {
    16b4:	2800      	cmp	r0, #0
    16b6:	d0f0      	beq.n	169a <process_event+0x22>
		if (evt == EVT_COMPLETE) {
    16b8:	2801      	cmp	r0, #1
    16ba:	8b23      	ldrh	r3, [r4, #24]
    16bc:	d150      	bne.n	1760 <process_event+0xe8>
			res = mgr->last_res;
    16be:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    16c0:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    16c2:	2f00      	cmp	r7, #0
    16c4:	da15      	bge.n	16f2 <process_event+0x7a>
		*clients = mgr->clients;
    16c6:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    16c8:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
    16cc:	e9c4 8800 	strd	r8, r8, [r4]
    16d0:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    16d4:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
    16d6:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    16d8:	8b21      	ldrh	r1, [r4, #24]
    16da:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    16de:	45ca      	cmp	sl, r9
    16e0:	d002      	beq.n	16e8 <process_event+0x70>
		if (do_monitors
    16e2:	68a3      	ldr	r3, [r4, #8]
    16e4:	2b00      	cmp	r3, #0
    16e6:	d15c      	bne.n	17a2 <process_event+0x12a>
		    || !sys_slist_is_empty(&clients)
    16e8:	b90d      	cbnz	r5, 16ee <process_event+0x76>
		    || (transit != NULL)) {
    16ea:	2e00      	cmp	r6, #0
    16ec:	d074      	beq.n	17d8 <process_event+0x160>
    16ee:	2300      	movs	r3, #0
    16f0:	e058      	b.n	17a4 <process_event+0x12c>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    16f2:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    16f6:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    16f8:	2a01      	cmp	r2, #1
    16fa:	d820      	bhi.n	173e <process_event+0xc6>
		*clients = mgr->clients;
    16fc:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    1700:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    1702:	6825      	ldr	r5, [r4, #0]
	list->head = NULL;
    1704:	b289      	uxth	r1, r1
	list->tail = NULL;
    1706:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    170a:	d10c      	bne.n	1726 <process_event+0xae>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    170c:	2d00      	cmp	r5, #0
    170e:	462b      	mov	r3, r5
    1710:	bf38      	it	cc
    1712:	2300      	movcc	r3, #0
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    1714:	b12b      	cbz	r3, 1722 <process_event+0xaa>
				mgr->refs += 1U;
    1716:	8b62      	ldrh	r2, [r4, #26]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    1718:	681b      	ldr	r3, [r3, #0]
    171a:	3201      	adds	r2, #1
    171c:	8362      	strh	r2, [r4, #26]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    171e:	2b00      	cmp	r3, #0
    1720:	d1f8      	bne.n	1714 <process_event+0x9c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1722:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    1726:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    1728:	4620      	mov	r0, r4
    172a:	f004 f9b0 	bl	5a8e <process_recheck>
    172e:	4606      	mov	r6, r0
    1730:	2800      	cmp	r0, #0
    1732:	d0d1      	beq.n	16d8 <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1734:	8b23      	ldrh	r3, [r4, #24]
    1736:	f043 0320 	orr.w	r3, r3, #32
    173a:	8323      	strh	r3, [r4, #24]
    173c:	e7cb      	b.n	16d6 <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
    173e:	2b04      	cmp	r3, #4
    1740:	d10c      	bne.n	175c <process_event+0xe4>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1742:	f021 0107 	bic.w	r1, r1, #7
    1746:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
    1748:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    174a:	4620      	mov	r0, r4
    174c:	f004 f99f 	bl	5a8e <process_recheck>
    1750:	4605      	mov	r5, r0
    1752:	2800      	cmp	r0, #0
    1754:	d0bf      	beq.n	16d6 <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1756:	f041 0120 	orr.w	r1, r1, #32
    175a:	8321      	strh	r1, [r4, #24]
    175c:	2500      	movs	r5, #0
    175e:	e7ba      	b.n	16d6 <process_event+0x5e>
		} else if (evt == EVT_START) {
    1760:	2803      	cmp	r0, #3
    1762:	d109      	bne.n	1778 <process_event+0x100>
			transit = mgr->transitions->start;
    1764:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1766:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
    176a:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    176c:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
    1770:	8323      	strh	r3, [r4, #24]
}
    1772:	2500      	movs	r5, #0
		res = 0;
    1774:	462f      	mov	r7, r5
    1776:	e7af      	b.n	16d8 <process_event+0x60>
		} else if (evt == EVT_STOP) {
    1778:	2804      	cmp	r0, #4
    177a:	d106      	bne.n	178a <process_event+0x112>
			transit = mgr->transitions->stop;
    177c:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    177e:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
    1782:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1784:	f043 0304 	orr.w	r3, r3, #4
    1788:	e7f2      	b.n	1770 <process_event+0xf8>
		} else if (evt == EVT_RESET) {
    178a:	2805      	cmp	r0, #5
    178c:	d106      	bne.n	179c <process_event+0x124>
			transit = mgr->transitions->reset;
    178e:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1790:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
    1794:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1796:	f043 0305 	orr.w	r3, r3, #5
    179a:	e7e9      	b.n	1770 <process_event+0xf8>
    179c:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    179e:	462e      	mov	r6, r5
    17a0:	e7e8      	b.n	1774 <process_event+0xfc>
				   && !sys_slist_is_empty(&mgr->monitors);
    17a2:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    17a4:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    17a8:	8321      	strh	r1, [r4, #24]
    17aa:	f38b 8811 	msr	BASEPRI, fp
    17ae:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    17b2:	bb03      	cbnz	r3, 17f6 <process_event+0x17e>
	while (!sys_slist_is_empty(list)) {
    17b4:	2d00      	cmp	r5, #0
    17b6:	d133      	bne.n	1820 <process_event+0x1a8>
			if (transit != NULL) {
    17b8:	b116      	cbz	r6, 17c0 <process_event+0x148>
				transit(mgr, transition_complete);
    17ba:	4921      	ldr	r1, [pc, #132]	; (1840 <process_event+0x1c8>)
    17bc:	4620      	mov	r0, r4
    17be:	47b0      	blx	r6
	__asm__ volatile(
    17c0:	f04f 0320 	mov.w	r3, #32
    17c4:	f3ef 8b11 	mrs	fp, BASEPRI
    17c8:	f383 8812 	msr	BASEPRI_MAX, r3
    17cc:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    17d0:	8b23      	ldrh	r3, [r4, #24]
    17d2:	f023 0308 	bic.w	r3, r3, #8
    17d6:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    17d8:	8b23      	ldrh	r3, [r4, #24]
    17da:	06da      	lsls	r2, r3, #27
    17dc:	d528      	bpl.n	1830 <process_event+0x1b8>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    17de:	f023 0310 	bic.w	r3, r3, #16
    17e2:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
    17e4:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    17e6:	f8b4 9018 	ldrh.w	r9, [r4, #24]
    17ea:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
    17ee:	2900      	cmp	r1, #0
    17f0:	f47f af5b 	bne.w	16aa <process_event+0x32>
out:
    17f4:	e751      	b.n	169a <process_event+0x22>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    17f6:	68a1      	ldr	r1, [r4, #8]
    17f8:	2900      	cmp	r1, #0
    17fa:	d0db      	beq.n	17b4 <process_event+0x13c>
	return node->next;
    17fc:	680b      	ldr	r3, [r1, #0]
		mon->callback(mgr, mon, state, res);
    17fe:	f8d1 b004 	ldr.w	fp, [r1, #4]
    1802:	2b00      	cmp	r3, #0
    1804:	bf38      	it	cc
    1806:	2300      	movcc	r3, #0
    1808:	4699      	mov	r9, r3
    180a:	4652      	mov	r2, sl
    180c:	463b      	mov	r3, r7
    180e:	4620      	mov	r0, r4
    1810:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    1812:	f1b9 0f00 	cmp.w	r9, #0
    1816:	d0cd      	beq.n	17b4 <process_event+0x13c>
    1818:	f8d9 3000 	ldr.w	r3, [r9]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    181c:	4649      	mov	r1, r9
    181e:	e7ee      	b.n	17fe <process_event+0x186>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    1820:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    1822:	463b      	mov	r3, r7
    1824:	4652      	mov	r2, sl
    1826:	4620      	mov	r0, r4
    1828:	682d      	ldr	r5, [r5, #0]
    182a:	f004 f94c 	bl	5ac6 <notify_one>
    182e:	e7c1      	b.n	17b4 <process_event+0x13c>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    1830:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    1834:	bf1e      	ittt	ne
    1836:	f023 0320 	bicne.w	r3, r3, #32
    183a:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
    183c:	2102      	movne	r1, #2
    183e:	e7d2      	b.n	17e6 <process_event+0x16e>
    1840:	00005af3 	.word	0x00005af3

00001844 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    1844:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1848:	4605      	mov	r5, r0
    184a:	f04f 0320 	mov.w	r3, #32
    184e:	f3ef 8611 	mrs	r6, BASEPRI
    1852:	f383 8812 	msr	BASEPRI_MAX, r3
    1856:	f3bf 8f6f 	isb	sy
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    185a:	4b10      	ldr	r3, [pc, #64]	; (189c <pm_state_notify+0x58>)
    185c:	681c      	ldr	r4, [r3, #0]
    185e:	2c00      	cmp	r4, #0
    1860:	bf38      	it	cc
    1862:	2400      	movcc	r4, #0
    1864:	b19c      	cbz	r4, 188e <pm_state_notify+0x4a>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_power_states[_current_cpu->id].state);
    1866:	4f0e      	ldr	r7, [pc, #56]	; (18a0 <pm_state_notify+0x5c>)
    1868:	f8df 8038 	ldr.w	r8, [pc, #56]	; 18a4 <pm_state_notify+0x60>
    186c:	f04f 090c 	mov.w	r9, #12
			callback = notifier->state_exit;
    1870:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    1874:	2d00      	cmp	r5, #0
    1876:	bf08      	it	eq
    1878:	4613      	moveq	r3, r2
		if (callback) {
    187a:	b12b      	cbz	r3, 1888 <pm_state_notify+0x44>
			callback(z_power_states[_current_cpu->id].state);
    187c:	f898 2014 	ldrb.w	r2, [r8, #20]
    1880:	fb09 f202 	mul.w	r2, r9, r2
    1884:	5cb8      	ldrb	r0, [r7, r2]
    1886:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    1888:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    188a:	2c00      	cmp	r4, #0
    188c:	d1f0      	bne.n	1870 <pm_state_notify+0x2c>
	__asm__ volatile(
    188e:	f386 8811 	msr	BASEPRI, r6
    1892:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    1896:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    189a:	bf00      	nop
    189c:	20000a94 	.word	0x20000a94
    18a0:	20000aa0 	.word	0x20000aa0
    18a4:	20000c18 	.word	0x20000c18

000018a8 <atomic_test_and_set_bit.constprop.0>:
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    18a8:	f000 031f 	and.w	r3, r0, #31
    18ac:	2201      	movs	r2, #1
    18ae:	409a      	lsls	r2, r3
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    18b0:	4b0a      	ldr	r3, [pc, #40]	; (18dc <atomic_test_and_set_bit.constprop.0+0x34>)
    18b2:	f3bf 8f5b 	dmb	ish
	atomic_val_t old;

	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    18b6:	0940      	lsrs	r0, r0, #5
    18b8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    18bc:	e850 3f00 	ldrex	r3, [r0]
    18c0:	ea43 0102 	orr.w	r1, r3, r2
    18c4:	e840 1c00 	strex	ip, r1, [r0]
    18c8:	f1bc 0f00 	cmp.w	ip, #0
    18cc:	d1f6      	bne.n	18bc <atomic_test_and_set_bit.constprop.0+0x14>
    18ce:	f3bf 8f5b 	dmb	ish

	return (old & mask) != 0;
    18d2:	421a      	tst	r2, r3
}
    18d4:	bf14      	ite	ne
    18d6:	2001      	movne	r0, #1
    18d8:	2000      	moveq	r0, #0
    18da:	4770      	bx	lr
    18dc:	20000aac 	.word	0x20000aac

000018e0 <pm_system_resume>:

void pm_system_resume(void)
{
    18e0:	b530      	push	{r4, r5, lr}
	uint8_t id = _current_cpu->id;
    18e2:	4b1d      	ldr	r3, [pc, #116]	; (1958 <pm_system_resume+0x78>)
    18e4:	7d1d      	ldrb	r5, [r3, #20]
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    18e6:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
    18ea:	f005 031f 	and.w	r3, r5, #31
    18ee:	2201      	movs	r2, #1
    18f0:	409a      	lsls	r2, r3
    18f2:	4b1a      	ldr	r3, [pc, #104]	; (195c <pm_system_resume+0x7c>)
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    18f4:	0969      	lsrs	r1, r5, #5
{
    18f6:	b085      	sub	sp, #20
    18f8:	43d0      	mvns	r0, r2
    18fa:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    18fe:	e853 1f00 	ldrex	r1, [r3]
    1902:	ea01 0400 	and.w	r4, r1, r0
    1906:	e843 4c00 	strex	ip, r4, [r3]
    190a:	f1bc 0f00 	cmp.w	ip, #0
    190e:	d1f6      	bne.n	18fe <pm_system_resume+0x1e>
    1910:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    1914:	4211      	tst	r1, r2
    1916:	d017      	beq.n	1948 <pm_system_resume+0x68>
		exit_pos_ops(z_power_states[id]);
    1918:	4c11      	ldr	r4, [pc, #68]	; (1960 <pm_system_resume+0x80>)
    191a:	220c      	movs	r2, #12
    191c:	fb02 4205 	mla	r2, r2, r5, r4
    1920:	ca07      	ldmia	r2, {r0, r1, r2}
    1922:	ab01      	add	r3, sp, #4
    1924:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
    1928:	4a0e      	ldr	r2, [pc, #56]	; (1964 <pm_system_resume+0x84>)
    192a:	b17a      	cbz	r2, 194c <pm_system_resume+0x6c>
		pm_power_state_exit_post_ops(info);
    192c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    1930:	f004 f9d9 	bl	5ce6 <pm_power_state_exit_post_ops>
		pm_state_notify(false);
    1934:	2000      	movs	r0, #0
    1936:	f7ff ff85 	bl	1844 <pm_state_notify>
		z_power_states[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    193a:	230c      	movs	r3, #12
    193c:	436b      	muls	r3, r5
    193e:	2200      	movs	r2, #0
    1940:	18e1      	adds	r1, r4, r3
    1942:	50e2      	str	r2, [r4, r3]
    1944:	e9c1 2201 	strd	r2, r2, [r1, #4]
			0, 0};
	}
}
    1948:	b005      	add	sp, #20
    194a:	bd30      	pop	{r4, r5, pc}
    194c:	f382 8811 	msr	BASEPRI, r2
    1950:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    1954:	e7ee      	b.n	1934 <pm_system_resume+0x54>
    1956:	bf00      	nop
    1958:	20000c18 	.word	0x20000c18
    195c:	20000a9c 	.word	0x20000a9c
    1960:	20000aa0 	.word	0x20000aa0
    1964:	00005ce7 	.word	0x00005ce7

00001968 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
    1968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	bool ret = true;
	uint8_t id = _current_cpu->id;
    196c:	4b37      	ldr	r3, [pc, #220]	; (1a4c <pm_system_suspend+0xe4>)
    196e:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 1a64 <pm_system_suspend+0xfc>
    1972:	7d1c      	ldrb	r4, [r3, #20]
{
    1974:	b088      	sub	sp, #32
    1976:	4607      	mov	r7, r0

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_and_set_bit(z_power_states_forced, id)) {
    1978:	4620      	mov	r0, r4
    197a:	f7ff ff95 	bl	18a8 <atomic_test_and_set_bit.constprop.0>
    197e:	b960      	cbnz	r0, 199a <pm_system_suspend+0x32>
		z_power_states[id] = pm_policy_next_state(id, ticks);
    1980:	466e      	mov	r6, sp
    1982:	463a      	mov	r2, r7
    1984:	4621      	mov	r1, r4
    1986:	4630      	mov	r0, r6
    1988:	f004 f93b 	bl	5c02 <pm_policy_next_state>
    198c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    1990:	250c      	movs	r5, #12
    1992:	fb05 8504 	mla	r5, r5, r4, r8
    1996:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	}

	if (z_power_states[id].state == PM_STATE_ACTIVE) {
    199a:	230c      	movs	r3, #12
    199c:	4363      	muls	r3, r4
    199e:	eb08 0203 	add.w	r2, r8, r3
    19a2:	f818 0003 	ldrb.w	r0, [r8, r3]
    19a6:	0965      	lsrs	r5, r4, #5
    19a8:	f004 061f 	and.w	r6, r4, #31
    19ac:	b3c8      	cbz	r0, 1a22 <pm_system_suspend+0xba>
				   z_power_states[id].state);
		ret = false;
		goto end;
	}

	if (ticks != K_TICKS_FOREVER) {
    19ae:	1c7b      	adds	r3, r7, #1
    19b0:	d00f      	beq.n	19d2 <pm_system_suspend+0x6a>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    19b2:	f8d2 e008 	ldr.w	lr, [r2, #8]
    19b6:	4826      	ldr	r0, [pc, #152]	; (1a50 <pm_system_suspend+0xe8>)
    19b8:	4a26      	ldr	r2, [pc, #152]	; (1a54 <pm_system_suspend+0xec>)
    19ba:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
    19be:	2100      	movs	r1, #0
    19c0:	2300      	movs	r3, #0
    19c2:	fbec 010e 	umlal	r0, r1, ip, lr
    19c6:	f7fe fd7d 	bl	4c4 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
    19ca:	2101      	movs	r1, #1
    19cc:	1a38      	subs	r0, r7, r0
    19ce:	f004 fd62 	bl	6496 <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    19d2:	f002 ff9b 	bl	490c <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
    19d6:	2001      	movs	r0, #1
    19d8:	f7ff ff34 	bl	1844 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    19dc:	f3bf 8f5b 	dmb	ish
    19e0:	4b1d      	ldr	r3, [pc, #116]	; (1a58 <pm_system_suspend+0xf0>)
 *
 * @return N/A
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    19e2:	2201      	movs	r2, #1
    19e4:	40b2      	lsls	r2, r6
    19e6:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    19ea:	e853 1f00 	ldrex	r1, [r3]
    19ee:	4311      	orrs	r1, r2
    19f0:	e843 1000 	strex	r0, r1, [r3]
    19f4:	2800      	cmp	r0, #0
    19f6:	d1f8      	bne.n	19ea <pm_system_suspend+0x82>
    19f8:	f3bf 8f5b 	dmb	ish
	atomic_set_bit(z_post_ops_required, id);
	pm_state_set(z_power_states[id]);
    19fc:	230c      	movs	r3, #12
    19fe:	fb03 8404 	mla	r4, r3, r4, r8
    1a02:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
    1a06:	ab05      	add	r3, sp, #20
    1a08:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
    1a0c:	4a13      	ldr	r2, [pc, #76]	; (1a5c <pm_system_suspend+0xf4>)
    1a0e:	b11a      	cbz	r2, 1a18 <pm_system_suspend+0xb0>
		pm_power_state_set(info);
    1a10:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    1a14:	f004 f954 	bl	5cc0 <pm_power_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_power_states[id].state);
	pm_system_resume();
    1a18:	f7ff ff62 	bl	18e0 <pm_system_resume>
	k_sched_unlock();
    1a1c:	f003 f950 	bl	4cc0 <k_sched_unlock>
	bool ret = true;
    1a20:	2001      	movs	r0, #1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1a22:	4a0f      	ldr	r2, [pc, #60]	; (1a60 <pm_system_suspend+0xf8>)
    1a24:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
    1a28:	2301      	movs	r3, #1
    1a2a:	40b3      	lsls	r3, r6
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    1a2c:	43db      	mvns	r3, r3
    1a2e:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    1a32:	e855 2f00 	ldrex	r2, [r5]
    1a36:	401a      	ands	r2, r3
    1a38:	e845 2100 	strex	r1, r2, [r5]
    1a3c:	2900      	cmp	r1, #0
    1a3e:	d1f8      	bne.n	1a32 <pm_system_suspend+0xca>
    1a40:	f3bf 8f5b 	dmb	ish
				   z_power_states[id].state);

end:
	atomic_clear_bit(z_power_states_forced, id);
	return ret;
}
    1a44:	b008      	add	sp, #32
    1a46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1a4a:	bf00      	nop
    1a4c:	20000c18 	.word	0x20000c18
    1a50:	000f423f 	.word	0x000f423f
    1a54:	000f4240 	.word	0x000f4240
    1a58:	20000a9c 	.word	0x20000a9c
    1a5c:	00005cc1 	.word	0x00005cc1
    1a60:	20000aac 	.word	0x20000aac
    1a64:	20000aa0 	.word	0x20000aa0

00001a68 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    1a68:	680b      	ldr	r3, [r1, #0]
    1a6a:	3301      	adds	r3, #1
    1a6c:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    1a6e:	4b01      	ldr	r3, [pc, #4]	; (1a74 <char_out+0xc>)
    1a70:	681b      	ldr	r3, [r3, #0]
    1a72:	4718      	bx	r3
    1a74:	200000c0 	.word	0x200000c0

00001a78 <__printk_hook_install>:
	_char_out = fn;
    1a78:	4b01      	ldr	r3, [pc, #4]	; (1a80 <__printk_hook_install+0x8>)
    1a7a:	6018      	str	r0, [r3, #0]
}
    1a7c:	4770      	bx	lr
    1a7e:	bf00      	nop
    1a80:	200000c0 	.word	0x200000c0

00001a84 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
    1a84:	b507      	push	{r0, r1, r2, lr}
    1a86:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
    1a88:	2100      	movs	r1, #0
{
    1a8a:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
    1a8c:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
    1a8e:	4803      	ldr	r0, [pc, #12]	; (1a9c <vprintk+0x18>)
    1a90:	a901      	add	r1, sp, #4
    1a92:	f7ff f967 	bl	d64 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
    1a96:	b003      	add	sp, #12
    1a98:	f85d fb04 	ldr.w	pc, [sp], #4
    1a9c:	00001a69 	.word	0x00001a69

00001aa0 <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    1aa0:	b508      	push	{r3, lr}
	__asm__ volatile(
    1aa2:	f04f 0220 	mov.w	r2, #32
    1aa6:	f3ef 8311 	mrs	r3, BASEPRI
    1aaa:	f382 8812 	msr	BASEPRI_MAX, r2
    1aae:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
    1ab2:	f000 fbe3 	bl	227c <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    1ab6:	4803      	ldr	r0, [pc, #12]	; (1ac4 <sys_reboot+0x24>)
    1ab8:	f004 f896 	bl	5be8 <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    1abc:	f000 f80a 	bl	1ad4 <arch_cpu_idle>
    1ac0:	e7fc      	b.n	1abc <sys_reboot+0x1c>
    1ac2:	bf00      	nop
    1ac4:	00006c9f 	.word	0x00006c9f

00001ac8 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    1ac8:	4901      	ldr	r1, [pc, #4]	; (1ad0 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    1aca:	2210      	movs	r2, #16
	str	r2, [r1]
    1acc:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    1ace:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    1ad0:	e000ed10 	.word	0xe000ed10

00001ad4 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    1ad4:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    1ad6:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    1ad8:	f380 8811 	msr	BASEPRI, r0
	isb
    1adc:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    1ae0:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    1ae4:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    1ae6:	b662      	cpsie	i
	isb
    1ae8:	f3bf 8f6f 	isb	sy

	bx	lr
    1aec:	4770      	bx	lr
    1aee:	bf00      	nop

00001af0 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    1af0:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    1af2:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    1af4:	f381 8811 	msr	BASEPRI, r1

	wfe
    1af8:	bf20      	wfe

	msr	BASEPRI, r0
    1afa:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    1afe:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    1b00:	4770      	bx	lr
    1b02:	bf00      	nop

00001b04 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    1b04:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    1b06:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    1b08:	4a0b      	ldr	r2, [pc, #44]	; (1b38 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    1b0a:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    1b0c:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    1b0e:	bf1e      	ittt	ne
	movne	r1, #0
    1b10:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    1b12:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    1b14:	f004 fb67 	blne	61e6 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    1b18:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    1b1a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    1b1e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    1b22:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    1b26:	4905      	ldr	r1, [pc, #20]	; (1b3c <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    1b28:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    1b2a:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    1b2c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    1b2e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    1b32:	4903      	ldr	r1, [pc, #12]	; (1b40 <_isr_wrapper+0x3c>)
	bx r1
    1b34:	4708      	bx	r1
    1b36:	0000      	.short	0x0000
	ldr r2, =_kernel
    1b38:	20000c18 	.word	0x20000c18
	ldr r1, =_sw_isr_table
    1b3c:	00006640 	.word	0x00006640
	ldr r1, =z_arm_int_exit
    1b40:	00001d31 	.word	0x00001d31

00001b44 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    1b44:	bf30      	wfi
    b z_SysNmiOnReset
    1b46:	f7ff bffd 	b.w	1b44 <z_SysNmiOnReset>
    1b4a:	bf00      	nop

00001b4c <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    1b4c:	4912      	ldr	r1, [pc, #72]	; (1b98 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    1b4e:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    1b50:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    1b54:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    1b56:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    1b5a:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1b5e:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    1b60:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    1b64:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    1b68:	4f0c      	ldr	r7, [pc, #48]	; (1b9c <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    1b6a:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    1b6e:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    1b70:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    1b72:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    1b74:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    1b76:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    1b78:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    1b7a:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    1b7e:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    1b80:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    1b82:	f000 fa75 	bl	2070 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    1b86:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    1b8a:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    1b8e:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    1b92:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    1b96:	4770      	bx	lr
    ldr r1, =_kernel
    1b98:	20000c18 	.word	0x20000c18
    ldr v4, =_SCS_ICSR
    1b9c:	e000ed04 	.word	0xe000ed04

00001ba0 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    1ba0:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    1ba4:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    1ba6:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    1baa:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    1bae:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    1bb0:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    1bb4:	2902      	cmp	r1, #2
    beq _oops
    1bb6:	d0ff      	beq.n	1bb8 <_oops>

00001bb8 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    1bb8:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    1bba:	f004 f833 	bl	5c24 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    1bbe:	bd01      	pop	{r0, pc}

00001bc0 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    1bc0:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    1bc2:	2b00      	cmp	r3, #0
    1bc4:	db08      	blt.n	1bd8 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1bc6:	2201      	movs	r2, #1
    1bc8:	f000 001f 	and.w	r0, r0, #31
    1bcc:	fa02 f000 	lsl.w	r0, r2, r0
    1bd0:	095b      	lsrs	r3, r3, #5
    1bd2:	4a02      	ldr	r2, [pc, #8]	; (1bdc <arch_irq_enable+0x1c>)
    1bd4:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    1bd8:	4770      	bx	lr
    1bda:	bf00      	nop
    1bdc:	e000e100 	.word	0xe000e100

00001be0 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    1be0:	4b05      	ldr	r3, [pc, #20]	; (1bf8 <arch_irq_is_enabled+0x18>)
    1be2:	0942      	lsrs	r2, r0, #5
    1be4:	f000 001f 	and.w	r0, r0, #31
    1be8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    1bec:	2301      	movs	r3, #1
    1bee:	fa03 f000 	lsl.w	r0, r3, r0
}
    1bf2:	4010      	ands	r0, r2
    1bf4:	4770      	bx	lr
    1bf6:	bf00      	nop
    1bf8:	e000e100 	.word	0xe000e100

00001bfc <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    1bfc:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    1bfe:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1c00:	bfa8      	it	ge
    1c02:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
    1c06:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1c0a:	bfb8      	it	lt
    1c0c:	4b06      	ldrlt	r3, [pc, #24]	; (1c28 <z_arm_irq_priority_set+0x2c>)
    1c0e:	ea4f 1141 	mov.w	r1, r1, lsl #5
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1c12:	bfac      	ite	ge
    1c14:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1c18:	f000 000f 	andlt.w	r0, r0, #15
    1c1c:	b2c9      	uxtb	r1, r1
    1c1e:	bfb4      	ite	lt
    1c20:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1c22:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
    1c26:	4770      	bx	lr
    1c28:	e000ed14 	.word	0xe000ed14

00001c2c <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1c2c:	4a0b      	ldr	r2, [pc, #44]	; (1c5c <z_arm_prep_c+0x30>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    1c2e:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1c30:	4b0b      	ldr	r3, [pc, #44]	; (1c60 <z_arm_prep_c+0x34>)
    1c32:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    1c36:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    1c38:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1c3c:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    1c40:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    1c44:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    1c48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    1c4c:	f002 fc72 	bl	4534 <z_bss_zero>
	z_data_copy();
    1c50:	f003 fc66 	bl	5520 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    1c54:	f000 f9a0 	bl	1f98 <z_arm_interrupt_init>
	z_cstart();
    1c58:	f002 fc76 	bl	4548 <z_cstart>
    1c5c:	00000000 	.word	0x00000000
    1c60:	e000ed00 	.word	0xe000ed00

00001c64 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    1c64:	4a09      	ldr	r2, [pc, #36]	; (1c8c <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    1c66:	490a      	ldr	r1, [pc, #40]	; (1c90 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    1c68:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    1c6a:	6809      	ldr	r1, [r1, #0]
    1c6c:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1c6e:	4909      	ldr	r1, [pc, #36]	; (1c94 <arch_swap+0x30>)
	_current->arch.basepri = key;
    1c70:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1c72:	684b      	ldr	r3, [r1, #4]
    1c74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    1c78:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
    1c7a:	2300      	movs	r3, #0
    1c7c:	f383 8811 	msr	BASEPRI, r3
    1c80:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    1c84:	6893      	ldr	r3, [r2, #8]
}
    1c86:	6f98      	ldr	r0, [r3, #120]	; 0x78
    1c88:	4770      	bx	lr
    1c8a:	bf00      	nop
    1c8c:	20000c18 	.word	0x20000c18
    1c90:	0000696c 	.word	0x0000696c
    1c94:	e000ed00 	.word	0xe000ed00

00001c98 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    1c98:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    1c9c:	9b00      	ldr	r3, [sp, #0]
    1c9e:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    1ca2:	490a      	ldr	r1, [pc, #40]	; (1ccc <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    1ca4:	9b01      	ldr	r3, [sp, #4]
    1ca6:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    1caa:	9b02      	ldr	r3, [sp, #8]
    1cac:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    1cb0:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    1cb4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    1cb8:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    1cbc:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    1cc0:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    1cc2:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    1cc4:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    1cc6:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    1cc8:	4770      	bx	lr
    1cca:	bf00      	nop
    1ccc:	00005c0d 	.word	0x00005c0d

00001cd0 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    1cd0:	4a0b      	ldr	r2, [pc, #44]	; (1d00 <z_check_thread_stack_fail+0x30>)
{
    1cd2:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    1cd4:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    1cd6:	b190      	cbz	r0, 1cfe <z_check_thread_stack_fail+0x2e>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    1cd8:	f113 0f16 	cmn.w	r3, #22
    1cdc:	6e40      	ldr	r0, [r0, #100]	; 0x64
    1cde:	d005      	beq.n	1cec <z_check_thread_stack_fail+0x1c>
    1ce0:	f1a0 0220 	sub.w	r2, r0, #32
    1ce4:	429a      	cmp	r2, r3
    1ce6:	d806      	bhi.n	1cf6 <z_check_thread_stack_fail+0x26>
    1ce8:	4283      	cmp	r3, r0
    1cea:	d204      	bcs.n	1cf6 <z_check_thread_stack_fail+0x26>
    1cec:	4281      	cmp	r1, r0
    1cee:	bf2c      	ite	cs
    1cf0:	2100      	movcs	r1, #0
    1cf2:	2101      	movcc	r1, #1
    1cf4:	e000      	b.n	1cf8 <z_check_thread_stack_fail+0x28>
    1cf6:	2100      	movs	r1, #0
    1cf8:	2900      	cmp	r1, #0
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    1cfa:	bf08      	it	eq
    1cfc:	2000      	moveq	r0, #0
}
    1cfe:	4770      	bx	lr
    1d00:	20000c18 	.word	0x20000c18

00001d04 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    1d04:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    1d06:	4b09      	ldr	r3, [pc, #36]	; (1d2c <arch_switch_to_main_thread+0x28>)
    1d08:	6098      	str	r0, [r3, #8]
{
    1d0a:	460d      	mov	r5, r1
    1d0c:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    1d0e:	f000 f9af 	bl	2070 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    1d12:	4620      	mov	r0, r4
    1d14:	f385 8809 	msr	PSP, r5
    1d18:	2100      	movs	r1, #0
    1d1a:	b663      	cpsie	if
    1d1c:	f381 8811 	msr	BASEPRI, r1
    1d20:	f3bf 8f6f 	isb	sy
    1d24:	2200      	movs	r2, #0
    1d26:	2300      	movs	r3, #0
    1d28:	f003 ff70 	bl	5c0c <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    1d2c:	20000c18 	.word	0x20000c18

00001d30 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    1d30:	4b04      	ldr	r3, [pc, #16]	; (1d44 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    1d32:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    1d34:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    1d36:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    1d38:	d003      	beq.n	1d42 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    1d3a:	4903      	ldr	r1, [pc, #12]	; (1d48 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    1d3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    1d40:	600a      	str	r2, [r1, #0]

00001d42 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    1d42:	4770      	bx	lr
	ldr r3, =_kernel
    1d44:	20000c18 	.word	0x20000c18
	ldr r1, =_SCS_ICSR
    1d48:	e000ed04 	.word	0xe000ed04

00001d4c <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    1d4c:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    1d50:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    1d54:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    1d56:	4672      	mov	r2, lr
	bl z_arm_fault
    1d58:	f000 f892 	bl	1e80 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    1d5c:	bd01      	pop	{r0, pc}
    1d5e:	bf00      	nop

00001d60 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    1d60:	2000      	movs	r0, #0
    msr CONTROL, r0
    1d62:	f380 8814 	msr	CONTROL, r0
    isb
    1d66:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    1d6a:	f004 fbd7 	bl	651c <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    1d6e:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    1d70:	490d      	ldr	r1, [pc, #52]	; (1da8 <__start+0x48>)
    str r0, [r1]
    1d72:	6008      	str	r0, [r1, #0]
    dsb
    1d74:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    1d78:	480c      	ldr	r0, [pc, #48]	; (1dac <__start+0x4c>)
    msr msp, r0
    1d7a:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    1d7e:	f000 f927 	bl	1fd0 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1d82:	2020      	movs	r0, #32
    msr BASEPRI, r0
    1d84:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    1d88:	4809      	ldr	r0, [pc, #36]	; (1db0 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    1d8a:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    1d8e:	1840      	adds	r0, r0, r1
    msr PSP, r0
    1d90:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    1d94:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    1d98:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    1d9a:	4308      	orrs	r0, r1
    msr CONTROL, r0
    1d9c:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    1da0:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    1da4:	f7ff ff42 	bl	1c2c <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    1da8:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    1dac:	200022a0 	.word	0x200022a0
    ldr r0, =z_interrupt_stacks
    1db0:	20002420 	.word	0x20002420

00001db4 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
    1db4:	b538      	push	{r3, r4, r5, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    1db6:	4b19      	ldr	r3, [pc, #100]	; (1e1c <mem_manage_fault+0x68>)
{
    1db8:	4614      	mov	r4, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    1dba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    1dbc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    1dbe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
{
    1dc0:	4605      	mov	r5, r0
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    1dc2:	0790      	lsls	r0, r2, #30
    1dc4:	d519      	bpl.n	1dfa <mem_manage_fault+0x46>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    1dc6:	6b58      	ldr	r0, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    1dc8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1dca:	0612      	lsls	r2, r2, #24
    1dcc:	d515      	bpl.n	1dfa <mem_manage_fault+0x46>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault != 0) {
    1dce:	b119      	cbz	r1, 1dd8 <mem_manage_fault+0x24>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    1dd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1dd2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    1dd6:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    1dd8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    1dda:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    1ddc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1dde:	06d1      	lsls	r1, r2, #27
    1de0:	d40e      	bmi.n	1e00 <mem_manage_fault+0x4c>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    1de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    1de4:	079a      	lsls	r2, r3, #30
    1de6:	d40b      	bmi.n	1e00 <mem_manage_fault+0x4c>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    1de8:	2000      	movs	r0, #0
		"without stack guard, user-mode or null-pointer detection\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    1dea:	4a0c      	ldr	r2, [pc, #48]	; (1e1c <mem_manage_fault+0x68>)
    1dec:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1dee:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    1df2:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    1df4:	2300      	movs	r3, #0
    1df6:	7023      	strb	r3, [r4, #0]

	return reason;
}
    1df8:	bd38      	pop	{r3, r4, r5, pc}
	uint32_t mmfar = -EINVAL;
    1dfa:	f06f 0015 	mvn.w	r0, #21
    1dfe:	e7eb      	b.n	1dd8 <mem_manage_fault+0x24>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    1e00:	4b06      	ldr	r3, [pc, #24]	; (1e1c <mem_manage_fault+0x68>)
    1e02:	685b      	ldr	r3, [r3, #4]
    1e04:	051b      	lsls	r3, r3, #20
    1e06:	d5ef      	bpl.n	1de8 <mem_manage_fault+0x34>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    1e08:	4629      	mov	r1, r5
    1e0a:	f7ff ff61 	bl	1cd0 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    1e0e:	2800      	cmp	r0, #0
    1e10:	d0ea      	beq.n	1de8 <mem_manage_fault+0x34>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    1e12:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    1e16:	2002      	movs	r0, #2
    1e18:	e7e7      	b.n	1dea <mem_manage_fault+0x36>
    1e1a:	bf00      	nop
    1e1c:	e000ed00 	.word	0xe000ed00

00001e20 <bus_fault.isra.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    1e20:	4b0d      	ldr	r3, [pc, #52]	; (1e58 <bus_fault.isra.0+0x38>)
    1e22:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    1e24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    1e26:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1e28:	0592      	lsls	r2, r2, #22
    1e2a:	d508      	bpl.n	1e3e <bus_fault.isra.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    1e2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    1e2e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1e30:	0412      	lsls	r2, r2, #16
    1e32:	d504      	bpl.n	1e3e <bus_fault.isra.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
    1e34:	b118      	cbz	r0, 1e3e <bus_fault.isra.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    1e36:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1e38:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    1e3c:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    1e3e:	4b06      	ldr	r3, [pc, #24]	; (1e58 <bus_fault.isra.0+0x38>)
    1e40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    1e42:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1e44:	05d2      	lsls	r2, r2, #23
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    1e46:	bf58      	it	pl
    1e48:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    1e4a:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    1e4c:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    1e4e:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
    1e52:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    1e54:	7008      	strb	r0, [r1, #0]

	return reason;
}
    1e56:	4770      	bx	lr
    1e58:	e000ed00 	.word	0xe000ed00

00001e5c <usage_fault.isra.0>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    1e5c:	4b07      	ldr	r3, [pc, #28]	; (1e7c <usage_fault.isra.0+0x20>)
    1e5e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    1e60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    1e62:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    1e64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    1e66:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    1e68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    1e6a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1e6c:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    1e70:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    1e74:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
    1e76:	2000      	movs	r0, #0
    1e78:	4770      	bx	lr
    1e7a:	bf00      	nop
    1e7c:	e000ed00 	.word	0xe000ed00

00001e80 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    1e80:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    1e82:	4b3e      	ldr	r3, [pc, #248]	; (1f7c <z_arm_fault+0xfc>)
    1e84:	685b      	ldr	r3, [r3, #4]
{
    1e86:	b08a      	sub	sp, #40	; 0x28
    1e88:	460d      	mov	r5, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    1e8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
    1e8e:	2600      	movs	r6, #0
    1e90:	f386 8811 	msr	BASEPRI, r6
    1e94:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    1e98:	f002 417f 	and.w	r1, r2, #4278190080	; 0xff000000
    1e9c:	f1b1 4f7f 	cmp.w	r1, #4278190080	; 0xff000000
    1ea0:	d111      	bne.n	1ec6 <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    1ea2:	f002 010c 	and.w	r1, r2, #12
    1ea6:	2908      	cmp	r1, #8
    1ea8:	d00d      	beq.n	1ec6 <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    1eaa:	0712      	lsls	r2, r2, #28
    1eac:	d401      	bmi.n	1eb2 <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
    1eae:	4605      	mov	r5, r0
			*nested_exc = true;
    1eb0:	2601      	movs	r6, #1
	*recoverable = false;
    1eb2:	2200      	movs	r2, #0
    1eb4:	3b03      	subs	r3, #3
    1eb6:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
    1eba:	2b03      	cmp	r3, #3
    1ebc:	d857      	bhi.n	1f6e <z_arm_fault+0xee>
    1ebe:	e8df f003 	tbb	[pc, r3]
    1ec2:	4e04      	.short	0x4e04
    1ec4:	4b52      	.short	0x4b52
		return NULL;
    1ec6:	4635      	mov	r5, r6
    1ec8:	e7f3      	b.n	1eb2 <z_arm_fault+0x32>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    1eca:	4b2c      	ldr	r3, [pc, #176]	; (1f7c <z_arm_fault+0xfc>)
    1ecc:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    1ece:	f014 0402 	ands.w	r4, r4, #2
    1ed2:	d14c      	bne.n	1f6e <z_arm_fault+0xee>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    1ed4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1ed6:	2a00      	cmp	r2, #0
    1ed8:	db18      	blt.n	1f0c <z_arm_fault+0x8c>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    1eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1edc:	005b      	lsls	r3, r3, #1
    1ede:	d515      	bpl.n	1f0c <z_arm_fault+0x8c>
	uint16_t fault_insn = *(ret_addr - 1);
    1ee0:	69ab      	ldr	r3, [r5, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    1ee2:	f833 2c02 	ldrh.w	r2, [r3, #-2]
    1ee6:	f64d 7302 	movw	r3, #57090	; 0xdf02
    1eea:	429a      	cmp	r2, r3
    1eec:	d00d      	beq.n	1f0a <z_arm_fault+0x8a>
		} else if (SCB_MMFSR != 0) {
    1eee:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    1ef2:	f603 6326 	addw	r3, r3, #3622	; 0xe26
    1ef6:	781b      	ldrb	r3, [r3, #0]
    1ef8:	b303      	cbz	r3, 1f3c <z_arm_fault+0xbc>
			reason = mem_manage_fault(esf, 1, recoverable);
    1efa:	f10d 0207 	add.w	r2, sp, #7
    1efe:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    1f00:	4628      	mov	r0, r5
    1f02:	f7ff ff57 	bl	1db4 <mem_manage_fault>
    1f06:	4604      	mov	r4, r0
		break;
    1f08:	e000      	b.n	1f0c <z_arm_fault+0x8c>
			reason = esf->basic.r0;
    1f0a:	682c      	ldr	r4, [r5, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    1f0c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1f10:	b993      	cbnz	r3, 1f38 <z_arm_fault+0xb8>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    1f12:	2220      	movs	r2, #32
    1f14:	4629      	mov	r1, r5
    1f16:	a802      	add	r0, sp, #8
    1f18:	f003 febe 	bl	5c98 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    1f1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1f1e:	b346      	cbz	r6, 1f72 <z_arm_fault+0xf2>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    1f20:	f3c3 0208 	ubfx	r2, r3, #0, #9
    1f24:	b922      	cbnz	r2, 1f30 <z_arm_fault+0xb0>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    1f26:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    1f2a:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    1f2e:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    1f30:	a902      	add	r1, sp, #8
    1f32:	4620      	mov	r0, r4
    1f34:	f003 fe74 	bl	5c20 <z_arm_fatal_error>
}
    1f38:	b00a      	add	sp, #40	; 0x28
    1f3a:	bd70      	pop	{r4, r5, r6, pc}
		} else if (SCB_BFSR != 0) {
    1f3c:	4b10      	ldr	r3, [pc, #64]	; (1f80 <z_arm_fault+0x100>)
    1f3e:	781b      	ldrb	r3, [r3, #0]
    1f40:	b12b      	cbz	r3, 1f4e <z_arm_fault+0xce>
			reason = bus_fault(esf, 1, recoverable);
    1f42:	f10d 0107 	add.w	r1, sp, #7
    1f46:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    1f48:	f7ff ff6a 	bl	1e20 <bus_fault.isra.0>
    1f4c:	e7db      	b.n	1f06 <z_arm_fault+0x86>
		} else if (SCB_UFSR != 0) {
    1f4e:	4b0d      	ldr	r3, [pc, #52]	; (1f84 <z_arm_fault+0x104>)
    1f50:	881b      	ldrh	r3, [r3, #0]
    1f52:	b29b      	uxth	r3, r3
    1f54:	2b00      	cmp	r3, #0
    1f56:	d0d9      	beq.n	1f0c <z_arm_fault+0x8c>
		reason = usage_fault(esf);
    1f58:	f7ff ff80 	bl	1e5c <usage_fault.isra.0>
    1f5c:	e7d3      	b.n	1f06 <z_arm_fault+0x86>
		reason = mem_manage_fault(esf, 0, recoverable);
    1f5e:	f10d 0207 	add.w	r2, sp, #7
    1f62:	2100      	movs	r1, #0
    1f64:	e7cc      	b.n	1f00 <z_arm_fault+0x80>
		reason = bus_fault(esf, 0, recoverable);
    1f66:	f10d 0107 	add.w	r1, sp, #7
    1f6a:	2000      	movs	r0, #0
    1f6c:	e7ec      	b.n	1f48 <z_arm_fault+0xc8>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    1f6e:	2400      	movs	r4, #0
    1f70:	e7cc      	b.n	1f0c <z_arm_fault+0x8c>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    1f72:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    1f76:	f023 0301 	bic.w	r3, r3, #1
    1f7a:	e7d8      	b.n	1f2e <z_arm_fault+0xae>
    1f7c:	e000ed00 	.word	0xe000ed00
    1f80:	e000ed29 	.word	0xe000ed29
    1f84:	e000ed2a 	.word	0xe000ed2a

00001f88 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    1f88:	4a02      	ldr	r2, [pc, #8]	; (1f94 <z_arm_fault_init+0xc>)
    1f8a:	6953      	ldr	r3, [r2, #20]
    1f8c:	f043 0310 	orr.w	r3, r3, #16
    1f90:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    1f92:	4770      	bx	lr
    1f94:	e000ed00 	.word	0xe000ed00

00001f98 <z_arm_interrupt_init>:
    1f98:	4804      	ldr	r0, [pc, #16]	; (1fac <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    1f9a:	2300      	movs	r3, #0
    1f9c:	2120      	movs	r1, #32
    1f9e:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    1fa0:	3301      	adds	r3, #1
    1fa2:	2b30      	cmp	r3, #48	; 0x30
    1fa4:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    1fa8:	d1f9      	bne.n	1f9e <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    1faa:	4770      	bx	lr
    1fac:	e000e100 	.word	0xe000e100

00001fb0 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    1fb0:	4a06      	ldr	r2, [pc, #24]	; (1fcc <z_arm_clear_arm_mpu_config+0x1c>)
    1fb2:	6811      	ldr	r1, [r2, #0]

	for (i = 0; i < num_regions; i++) {
    1fb4:	2300      	movs	r3, #0
	int num_regions =
    1fb6:	f3c1 2107 	ubfx	r1, r1, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
    1fba:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
    1fbc:	428b      	cmp	r3, r1
    1fbe:	d100      	bne.n	1fc2 <z_arm_clear_arm_mpu_config+0x12>
		ARM_MPU_ClrRegion(i);
	}
}
    1fc0:	4770      	bx	lr
  MPU->RNR = rnr;
    1fc2:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
    1fc4:	6110      	str	r0, [r2, #16]
	for (i = 0; i < num_regions; i++) {
    1fc6:	3301      	adds	r3, #1
    1fc8:	e7f8      	b.n	1fbc <z_arm_clear_arm_mpu_config+0xc>
    1fca:	bf00      	nop
    1fcc:	e000ed90 	.word	0xe000ed90

00001fd0 <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
    1fd0:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    1fd2:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    1fd4:	2300      	movs	r3, #0
    1fd6:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    1fda:	f7ff ffe9 	bl	1fb0 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    1fde:	4b14      	ldr	r3, [pc, #80]	; (2030 <z_arm_init_arch_hw_at_boot+0x60>)
    1fe0:	f04f 32ff 	mov.w	r2, #4294967295
    1fe4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    1fe8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    1fec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    1ff0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    1ff4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    1ff8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    1ffc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    2000:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    2004:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    2008:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    200c:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    2010:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    2014:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    2018:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    201c:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    2020:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
    2024:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    2026:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    202a:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    202e:	bd08      	pop	{r3, pc}
    2030:	e000e100 	.word	0xe000e100

00002034 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    2034:	4b06      	ldr	r3, [pc, #24]	; (2050 <z_impl_k_thread_abort+0x1c>)
    2036:	689b      	ldr	r3, [r3, #8]
    2038:	4283      	cmp	r3, r0
    203a:	d107      	bne.n	204c <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    203c:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    2040:	b123      	cbz	r3, 204c <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    2042:	4a04      	ldr	r2, [pc, #16]	; (2054 <z_impl_k_thread_abort+0x20>)
    2044:	6853      	ldr	r3, [r2, #4]
    2046:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    204a:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
    204c:	f002 bf0e 	b.w	4e6c <z_thread_abort>
    2050:	20000c18 	.word	0x20000c18
    2054:	e000ed00 	.word	0xe000ed00

00002058 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    2058:	4b02      	ldr	r3, [pc, #8]	; (2064 <z_arm_configure_static_mpu_regions+0xc>)
    205a:	4a03      	ldr	r2, [pc, #12]	; (2068 <z_arm_configure_static_mpu_regions+0x10>)
    205c:	4803      	ldr	r0, [pc, #12]	; (206c <z_arm_configure_static_mpu_regions+0x14>)
    205e:	2101      	movs	r1, #1
    2060:	f000 b868 	b.w	2134 <arm_core_mpu_configure_static_mpu_regions>
    2064:	20040000 	.word	0x20040000
    2068:	20000000 	.word	0x20000000
    206c:	00006824 	.word	0x00006824

00002070 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    2070:	6e42      	ldr	r2, [r0, #100]	; 0x64
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    2072:	4b05      	ldr	r3, [pc, #20]	; (2088 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    2074:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
    2076:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    2078:	4a04      	ldr	r2, [pc, #16]	; (208c <z_arm_configure_dynamic_mpu_regions+0x1c>)
    207a:	2120      	movs	r1, #32
    207c:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    2080:	4618      	mov	r0, r3
    2082:	2101      	movs	r1, #1
    2084:	f000 b860 	b.w	2148 <arm_core_mpu_configure_dynamic_mpu_regions>
    2088:	20000ab0 	.word	0x20000ab0
    208c:	150b0000 	.word	0x150b0000

00002090 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    2090:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    2092:	4f1e      	ldr	r7, [pc, #120]	; (210c <mpu_configure_regions+0x7c>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    2094:	2600      	movs	r6, #0
    2096:	428e      	cmp	r6, r1
    2098:	db01      	blt.n	209e <mpu_configure_regions+0xe>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    209a:	4610      	mov	r0, r2
    209c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i].size == 0U) {
    209e:	6844      	ldr	r4, [r0, #4]
    20a0:	b384      	cbz	r4, 2104 <mpu_configure_regions+0x74>
		if (do_sanity_check &&
    20a2:	b153      	cbz	r3, 20ba <mpu_configure_regions+0x2a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    20a4:	f104 3cff 	add.w	ip, r4, #4294967295
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    20a8:	ea14 0f0c 	tst.w	r4, ip
    20ac:	d118      	bne.n	20e0 <mpu_configure_regions+0x50>
		&&
    20ae:	2c1f      	cmp	r4, #31
    20b0:	d916      	bls.n	20e0 <mpu_configure_regions+0x50>
		((part->start & (part->size - 1U)) == 0U);
    20b2:	6805      	ldr	r5, [r0, #0]
		&&
    20b4:	ea1c 0f05 	tst.w	ip, r5
    20b8:	d112      	bne.n	20e0 <mpu_configure_regions+0x50>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    20ba:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    20bc:	6805      	ldr	r5, [r0, #0]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    20be:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    20c2:	b2d2      	uxtb	r2, r2
    20c4:	d90f      	bls.n	20e6 <mpu_configure_regions+0x56>
	/*
	 * A size value greater than 2^31 could not be handled by
	 * round_up_to_next_power_of_two() properly. We handle
	 * it separately here.
	 */
	if (size > (1UL << 31)) {
    20c6:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    20ca:	d80e      	bhi.n	20ea <mpu_configure_regions+0x5a>
		return REGION_4G;
	}

	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    20cc:	3c01      	subs	r4, #1
    20ce:	fab4 f484 	clz	r4, r4
    20d2:	f1c4 041f 	rsb	r4, r4, #31
    20d6:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    20d8:	2a07      	cmp	r2, #7
#if defined(CONFIG_CPU_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    20da:	ea4c 0404 	orr.w	r4, ip, r4
    20de:	d906      	bls.n	20ee <mpu_configure_regions+0x5e>
			return -EINVAL;
    20e0:	f06f 0215 	mvn.w	r2, #21
    20e4:	e7d9      	b.n	209a <mpu_configure_regions+0xa>
		return REGION_32B;
    20e6:	2408      	movs	r4, #8
    20e8:	e7f6      	b.n	20d8 <mpu_configure_regions+0x48>
		return REGION_4G;
    20ea:	243e      	movs	r4, #62	; 0x3e
    20ec:	e7f4      	b.n	20d8 <mpu_configure_regions+0x48>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    20ee:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
    20f2:	4315      	orrs	r5, r2
    20f4:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    20f8:	f044 0401 	orr.w	r4, r4, #1
    20fc:	60ba      	str	r2, [r7, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    20fe:	60fd      	str	r5, [r7, #12]
		reg_index++;
    2100:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    2102:	613c      	str	r4, [r7, #16]
	for (i = 0; i < regions_num; i++) {
    2104:	3601      	adds	r6, #1
    2106:	300c      	adds	r0, #12
    2108:	e7c5      	b.n	2096 <mpu_configure_regions+0x6>
    210a:	bf00      	nop
    210c:	e000ed90 	.word	0xe000ed90

00002110 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    2110:	4b03      	ldr	r3, [pc, #12]	; (2120 <arm_core_mpu_enable+0x10>)
    2112:	2205      	movs	r2, #5
    2114:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    2116:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    211a:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    211e:	4770      	bx	lr
    2120:	e000ed90 	.word	0xe000ed90

00002124 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    2124:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    2128:	4b01      	ldr	r3, [pc, #4]	; (2130 <arm_core_mpu_disable+0xc>)
    212a:	2200      	movs	r2, #0
    212c:	605a      	str	r2, [r3, #4]
}
    212e:	4770      	bx	lr
    2130:	e000ed90 	.word	0xe000ed90

00002134 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    2134:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    2136:	4c03      	ldr	r4, [pc, #12]	; (2144 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    2138:	2301      	movs	r3, #1
    213a:	7822      	ldrb	r2, [r4, #0]
    213c:	f7ff ffa8 	bl	2090 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    2140:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    2142:	bd10      	pop	{r4, pc}
    2144:	20000c6c 	.word	0x20000c6c

00002148 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    2148:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    214a:	4a08      	ldr	r2, [pc, #32]	; (216c <arm_core_mpu_configure_dynamic_mpu_regions+0x24>)
    214c:	2300      	movs	r3, #0
    214e:	7812      	ldrb	r2, [r2, #0]
    2150:	f7ff ff9e 	bl	2090 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    2154:	f110 0f16 	cmn.w	r0, #22
    2158:	d003      	beq.n	2162 <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
  MPU->RNR = rnr;
    215a:	4b05      	ldr	r3, [pc, #20]	; (2170 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
  MPU->RASR = 0U;
    215c:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    215e:	2807      	cmp	r0, #7
    2160:	dd00      	ble.n	2164 <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    2162:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
    2164:	6098      	str	r0, [r3, #8]
  MPU->RASR = 0U;
    2166:	611a      	str	r2, [r3, #16]
    2168:	3001      	adds	r0, #1
    216a:	e7f8      	b.n	215e <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
    216c:	20000c6c 	.word	0x20000c6c
    2170:	e000ed90 	.word	0xe000ed90

00002174 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    2174:	4913      	ldr	r1, [pc, #76]	; (21c4 <z_arm_mpu_init+0x50>)
    2176:	6808      	ldr	r0, [r1, #0]
    2178:	2808      	cmp	r0, #8
{
    217a:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    217c:	d81e      	bhi.n	21bc <z_arm_mpu_init+0x48>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    217e:	f7ff ffd1 	bl	2124 <arm_core_mpu_disable>
    2182:	4c11      	ldr	r4, [pc, #68]	; (21c8 <z_arm_mpu_init+0x54>)
    2184:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    2186:	2200      	movs	r2, #0
    2188:	4290      	cmp	r0, r2
    218a:	f101 010c 	add.w	r1, r1, #12
    218e:	d105      	bne.n	219c <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    2190:	4b0e      	ldr	r3, [pc, #56]	; (21cc <z_arm_mpu_init+0x58>)
    2192:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    2194:	f7ff ffbc 	bl	2110 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    2198:	2000      	movs	r0, #0
}
    219a:	bd10      	pop	{r4, pc}
    219c:	60a2      	str	r2, [r4, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    219e:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    21a2:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    21a6:	4313      	orrs	r3, r2
    21a8:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    21ac:	60e3      	str	r3, [r4, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    21ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
    21b2:	f043 0301 	orr.w	r3, r3, #1
    21b6:	6123      	str	r3, [r4, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    21b8:	3201      	adds	r2, #1
    21ba:	e7e5      	b.n	2188 <z_arm_mpu_init+0x14>
		return -1;
    21bc:	f04f 30ff 	mov.w	r0, #4294967295
    21c0:	e7eb      	b.n	219a <z_arm_mpu_init+0x26>
    21c2:	bf00      	nop
    21c4:	00006830 	.word	0x00006830
    21c8:	e000ed90 	.word	0xe000ed90
    21cc:	20000c6c 	.word	0x20000c6c

000021d0 <printf>:

	return r;
}

int printf(const char *ZRESTRICT format, ...)
{
    21d0:	b40f      	push	{r0, r1, r2, r3}
    21d2:	b507      	push	{r0, r1, r2, lr}
    21d4:	ab04      	add	r3, sp, #16
	va_list vargs;
	int     r;

	va_start(vargs, format);
	r = cbvprintf(fputc, DESC(stdout), format, vargs);
    21d6:	2102      	movs	r1, #2
{
    21d8:	f853 2b04 	ldr.w	r2, [r3], #4
	r = cbvprintf(fputc, DESC(stdout), format, vargs);
    21dc:	4804      	ldr	r0, [pc, #16]	; (21f0 <printf+0x20>)
	va_start(vargs, format);
    21de:	9301      	str	r3, [sp, #4]
	r = cbvprintf(fputc, DESC(stdout), format, vargs);
    21e0:	f7fe fdc0 	bl	d64 <cbvprintf>
	va_end(vargs);

	return r;
}
    21e4:	b003      	add	sp, #12
    21e6:	f85d eb04 	ldr.w	lr, [sp], #4
    21ea:	b004      	add	sp, #16
    21ec:	4770      	bx	lr
    21ee:	bf00      	nop
    21f0:	00005c49 	.word	0x00005c49

000021f4 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    21f4:	4b01      	ldr	r3, [pc, #4]	; (21fc <__stdout_hook_install+0x8>)
    21f6:	6018      	str	r0, [r3, #0]
}
    21f8:	4770      	bx	lr
    21fa:	bf00      	nop
    21fc:	200000c4 	.word	0x200000c4

00002200 <z_impl_zephyr_fputc>:

int z_impl_zephyr_fputc(int c, FILE *stream)
{
	return (stream == stdout || stream == stderr) ? _stdout_hook(c) : EOF;
    2200:	3902      	subs	r1, #2
    2202:	2901      	cmp	r1, #1
    2204:	d802      	bhi.n	220c <z_impl_zephyr_fputc+0xc>
    2206:	4b03      	ldr	r3, [pc, #12]	; (2214 <z_impl_zephyr_fputc+0x14>)
    2208:	681b      	ldr	r3, [r3, #0]
    220a:	4718      	bx	r3
}
    220c:	f04f 30ff 	mov.w	r0, #4294967295
    2210:	4770      	bx	lr
    2212:	bf00      	nop
    2214:	200000c4 	.word	0x200000c4

00002218 <nordicsemi_nrf52_init>:
	__asm__ volatile(
    2218:	f04f 0320 	mov.w	r3, #32
    221c:	f3ef 8111 	mrs	r1, BASEPRI
    2220:	f383 8812 	msr	BASEPRI_MAX, r3
    2224:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    2228:	4a0f      	ldr	r2, [pc, #60]	; (2268 <nordicsemi_nrf52_init+0x50>)
    222a:	2301      	movs	r3, #1
    222c:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    2230:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2234:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    2238:	4a0c      	ldr	r2, [pc, #48]	; (226c <nordicsemi_nrf52_init+0x54>)
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    223a:	6812      	ldr	r2, [r2, #0]
    223c:	2a08      	cmp	r2, #8
    223e:	d108      	bne.n	2252 <nordicsemi_nrf52_init+0x3a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    2240:	4a0b      	ldr	r2, [pc, #44]	; (2270 <nordicsemi_nrf52_init+0x58>)
    2242:	6812      	ldr	r2, [r2, #0]
            {
                switch(var2)
    2244:	2a05      	cmp	r2, #5
    2246:	d804      	bhi.n	2252 <nordicsemi_nrf52_init+0x3a>
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
    2248:	480a      	ldr	r0, [pc, #40]	; (2274 <nordicsemi_nrf52_init+0x5c>)
    224a:	5c82      	ldrb	r2, [r0, r2]
    224c:	b10a      	cbz	r2, 2252 <nordicsemi_nrf52_init+0x3a>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
    224e:	4a0a      	ldr	r2, [pc, #40]	; (2278 <nordicsemi_nrf52_init+0x60>)
    2250:	6013      	str	r3, [r2, #0]
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    2252:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2256:	2201      	movs	r2, #1
    2258:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
    225c:	f381 8811 	msr	BASEPRI, r1
    2260:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    2264:	2000      	movs	r0, #0
    2266:	4770      	bx	lr
    2268:	4001e000 	.word	0x4001e000
    226c:	10000130 	.word	0x10000130
    2270:	10000134 	.word	0x10000134
    2274:	00006cd7 	.word	0x00006cd7
    2278:	40000638 	.word	0x40000638

0000227c <sys_arch_reboot>:
    *p_gpregret = val;
    227c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2280:	b2c0      	uxtb	r0, r0
    2282:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    2286:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    228a:	4905      	ldr	r1, [pc, #20]	; (22a0 <sys_arch_reboot+0x24>)
    228c:	4b05      	ldr	r3, [pc, #20]	; (22a4 <sys_arch_reboot+0x28>)
    228e:	68ca      	ldr	r2, [r1, #12]
    2290:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    2294:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    2296:	60cb      	str	r3, [r1, #12]
    2298:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    229c:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    229e:	e7fd      	b.n	229c <sys_arch_reboot+0x20>
    22a0:	e000ed00 	.word	0xe000ed00
    22a4:	05fa0004 	.word	0x05fa0004

000022a8 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    22a8:	b120      	cbz	r0, 22b4 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    22aa:	4b03      	ldr	r3, [pc, #12]	; (22b8 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    22ac:	0180      	lsls	r0, r0, #6
    22ae:	f043 0301 	orr.w	r3, r3, #1
    22b2:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    22b4:	4770      	bx	lr
    22b6:	bf00      	nop
    22b8:	000067f0 	.word	0x000067f0

000022bc <adc_context_start_sampling.isra.0>:
    return (p_reg->STATUS == (SAADC_STATUS_STATUS_Busy << SAADC_STATUS_STATUS_Pos));
}

NRF_STATIC_INLINE void nrf_saadc_enable(NRF_SAADC_Type * p_reg)
{
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Enabled << SAADC_ENABLE_ENABLE_Pos);
    22bc:	4a05      	ldr	r2, [pc, #20]	; (22d4 <adc_context_start_sampling.isra.0+0x18>)
    22be:	2301      	movs	r3, #1
    22c0:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500

static void adc_context_start_sampling(struct adc_context *ctx)
{
	nrf_saadc_enable(NRF_SAADC);

	if (ctx->sequence.calibrate) {
    22c4:	b108      	cbz	r0, 22ca <adc_context_start_sampling.isra.0+0xe>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    22c6:	60d3      	str	r3, [r2, #12]
}
    22c8:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    22ca:	6013      	str	r3, [r2, #0]
    22cc:	4a02      	ldr	r2, [pc, #8]	; (22d8 <adc_context_start_sampling.isra.0+0x1c>)
    22ce:	6013      	str	r3, [r2, #0]
				       NRF_SAADC_TASK_CALIBRATEOFFSET);
	} else {
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_START);
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}
    22d0:	4770      	bx	lr
    22d2:	bf00      	nop
    22d4:	40007000 	.word	0x40007000
    22d8:	40007004 	.word	0x40007004

000022dc <adc_nrfx_channel_setup>:
	uint8_t channel_id = channel_cfg->channel_id;
    22dc:	7908      	ldrb	r0, [r1, #4]
{
    22de:	b570      	push	{r4, r5, r6, lr}
	uint8_t channel_id = channel_cfg->channel_id;
    22e0:	f000 041f 	and.w	r4, r0, #31
	if (channel_id >= SAADC_CH_NUM) {
    22e4:	2c07      	cmp	r4, #7
    22e6:	d81f      	bhi.n	2328 <adc_nrfx_channel_setup+0x4c>
	switch (channel_cfg->gain) {
    22e8:	780b      	ldrb	r3, [r1, #0]
    22ea:	2b09      	cmp	r3, #9
    22ec:	d81c      	bhi.n	2328 <adc_nrfx_channel_setup+0x4c>
    22ee:	e8df f003 	tbb	[pc, r3]
    22f2:	0606      	.short	0x0606
    22f4:	1b060606 	.word	0x1b060606
    22f8:	201b1e05 	.word	0x201b1e05
		config.gain = NRF_SAADC_GAIN1;
    22fc:	2305      	movs	r3, #5
	switch (channel_cfg->reference) {
    22fe:	784a      	ldrb	r2, [r1, #1]
    2300:	2a03      	cmp	r2, #3
    2302:	d018      	beq.n	2336 <adc_nrfx_channel_setup+0x5a>
    2304:	2a04      	cmp	r2, #4
    2306:	d10f      	bne.n	2328 <adc_nrfx_channel_setup+0x4c>
    2308:	2500      	movs	r5, #0
	switch (channel_cfg->acquisition_time) {
    230a:	884a      	ldrh	r2, [r1, #2]
    230c:	f244 060a 	movw	r6, #16394	; 0x400a
    2310:	42b2      	cmp	r2, r6
    2312:	d044      	beq.n	239e <adc_nrfx_channel_setup+0xc2>
    2314:	d811      	bhi.n	233a <adc_nrfx_channel_setup+0x5e>
    2316:	f244 0603 	movw	r6, #16387	; 0x4003
    231a:	42b2      	cmp	r2, r6
    231c:	d03b      	beq.n	2396 <adc_nrfx_channel_setup+0xba>
    231e:	f244 0605 	movw	r6, #16389	; 0x4005
    2322:	42b2      	cmp	r2, r6
    2324:	d039      	beq.n	239a <adc_nrfx_channel_setup+0xbe>
    2326:	b3d2      	cbz	r2, 239e <adc_nrfx_channel_setup+0xc2>
    2328:	f06f 0015 	mvn.w	r0, #21
    232c:	e032      	b.n	2394 <adc_nrfx_channel_setup+0xb8>
		config.gain = NRF_SAADC_GAIN2;
    232e:	2306      	movs	r3, #6
		break;
    2330:	e7e5      	b.n	22fe <adc_nrfx_channel_setup+0x22>
		config.gain = NRF_SAADC_GAIN4;
    2332:	2307      	movs	r3, #7
		break;
    2334:	e7e3      	b.n	22fe <adc_nrfx_channel_setup+0x22>
		config.reference = NRF_SAADC_REFERENCE_VDD4;
    2336:	2501      	movs	r5, #1
    2338:	e7e7      	b.n	230a <adc_nrfx_channel_setup+0x2e>
	switch (channel_cfg->acquisition_time) {
    233a:	f244 0614 	movw	r6, #16404	; 0x4014
    233e:	42b2      	cmp	r2, r6
    2340:	d02f      	beq.n	23a2 <adc_nrfx_channel_setup+0xc6>
    2342:	f244 0628 	movw	r6, #16424	; 0x4028
    2346:	42b2      	cmp	r2, r6
    2348:	d02d      	beq.n	23a6 <adc_nrfx_channel_setup+0xca>
    234a:	f244 060f 	movw	r6, #16399	; 0x400f
    234e:	42b2      	cmp	r2, r6
    2350:	d1ea      	bne.n	2328 <adc_nrfx_channel_setup+0x4c>
		config.acq_time = NRF_SAADC_ACQTIME_15US;
    2352:	2203      	movs	r2, #3
            ((config->resistor_p   << SAADC_CH_CONFIG_RESP_Pos)   & SAADC_CH_CONFIG_RESP_Msk)
            | ((config->resistor_n << SAADC_CH_CONFIG_RESN_Pos)   & SAADC_CH_CONFIG_RESN_Msk)
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
            | ((config->reference  << SAADC_CH_CONFIG_REFSEL_Pos) & SAADC_CH_CONFIG_REFSEL_Msk)
            | ((config->acq_time   << SAADC_CH_CONFIG_TACQ_Pos)   & SAADC_CH_CONFIG_TACQ_Msk)
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
    2354:	f3c0 1040 	ubfx	r0, r0, #5, #1
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
    2358:	021b      	lsls	r3, r3, #8
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
    235a:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
    235e:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
    2362:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    p_reg->CH[channel].CONFIG =
    2366:	0122      	lsls	r2, r4, #4
    2368:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    236c:	f502 42e0 	add.w	r2, r2, #28672	; 0x7000
    p_reg->CH[channel].PSELP = pselp;
    2370:	2000      	movs	r0, #0
    p_reg->CH[channel].CONFIG =
    2372:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    p_reg->CH[channel].PSELN = pseln;
    2376:	0123      	lsls	r3, r4, #4
    2378:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    237c:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
    2380:	798a      	ldrb	r2, [r1, #6]
    2382:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CH[channel].PSELP = pselp;
    2386:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	m_data.positive_inputs[channel_id] = channel_cfg->input_positive;
    238a:	4b08      	ldr	r3, [pc, #32]	; (23ac <adc_nrfx_channel_setup+0xd0>)
    238c:	441c      	add	r4, r3
    238e:	794b      	ldrb	r3, [r1, #5]
    2390:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
}
    2394:	bd70      	pop	{r4, r5, r6, pc}
	switch (channel_cfg->acquisition_time) {
    2396:	2200      	movs	r2, #0
    2398:	e7dc      	b.n	2354 <adc_nrfx_channel_setup+0x78>
		config.acq_time = NRF_SAADC_ACQTIME_5US;
    239a:	2201      	movs	r2, #1
    239c:	e7da      	b.n	2354 <adc_nrfx_channel_setup+0x78>
		config.acq_time = NRF_SAADC_ACQTIME_10US;
    239e:	2202      	movs	r2, #2
    23a0:	e7d8      	b.n	2354 <adc_nrfx_channel_setup+0x78>
		config.acq_time = NRF_SAADC_ACQTIME_20US;
    23a2:	2204      	movs	r2, #4
    23a4:	e7d6      	b.n	2354 <adc_nrfx_channel_setup+0x78>
		config.acq_time = NRF_SAADC_ACQTIME_40US;
    23a6:	2205      	movs	r2, #5
    23a8:	e7d4      	b.n	2354 <adc_nrfx_channel_setup+0x78>
    23aa:	bf00      	nop
    23ac:	20000000 	.word	0x20000000

000023b0 <saadc_irq_handler>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    23b0:	4b2d      	ldr	r3, [pc, #180]	; (2468 <saadc_irq_handler+0xb8>)
    23b2:	681a      	ldr	r2, [r3, #0]
	return error;
}
#endif /* CONFIG_ADC_ASYNC */

static void saadc_irq_handler(const struct device *dev)
{
    23b4:	b510      	push	{r4, lr}
	if (nrf_saadc_event_check(NRF_SAADC, NRF_SAADC_EVENT_END)) {
    23b6:	2a00      	cmp	r2, #0
    23b8:	d048      	beq.n	244c <saadc_irq_handler+0x9c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    23ba:	2200      	movs	r2, #0
    23bc:	601a      	str	r2, [r3, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    23be:	681b      	ldr	r3, [r3, #0]
 * function if required and takes further actions accordingly.
 */
static inline void adc_context_on_sampling_done(struct adc_context *ctx,
						const struct device *dev)
{
	if (ctx->sequence.options) {
    23c0:	4c2a      	ldr	r4, [pc, #168]	; (246c <saadc_irq_handler+0xbc>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    23c2:	4b2b      	ldr	r3, [pc, #172]	; (2470 <saadc_irq_handler+0xc0>)
    23c4:	2101      	movs	r1, #1
    23c6:	6019      	str	r1, [r3, #0]
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Disabled << SAADC_ENABLE_ENABLE_Pos);
    23c8:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8
    23cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
    23ce:	b3c3      	cbz	r3, 2442 <saadc_irq_handler+0x92>
		adc_sequence_callback callback = ctx->options.callback;
    23d0:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
		enum adc_action action;
		bool finish = false;
		bool repeat = false;

		if (callback) {
    23d2:	b143      	cbz	r3, 23e6 <saadc_irq_handler+0x36>
			action = callback(dev,
    23d4:	f8b4 2088 	ldrh.w	r2, [r4, #136]	; 0x88
    23d8:	f104 0164 	add.w	r1, r4, #100	; 0x64
    23dc:	4798      	blx	r3
					  ctx->sampling_index);
		} else {
			action = ADC_ACTION_CONTINUE;
		}

		switch (action) {
    23de:	2801      	cmp	r0, #1
    23e0:	d014      	beq.n	240c <saadc_irq_handler+0x5c>
    23e2:	2802      	cmp	r0, #2
    23e4:	d028      	beq.n	2438 <saadc_irq_handler+0x88>
			break;
		case ADC_ACTION_FINISH:
			finish = true;
			break;
		default: /* ADC_ACTION_CONTINUE */
			if (ctx->sampling_index <
    23e6:	f8b4 3088 	ldrh.w	r3, [r4, #136]	; 0x88
    23ea:	f8b4 2084 	ldrh.w	r2, [r4, #132]	; 0x84
    23ee:	429a      	cmp	r2, r3
    23f0:	d922      	bls.n	2438 <saadc_irq_handler+0x88>
			    ctx->options.extra_samplings) {
				++ctx->sampling_index;
    23f2:	3301      	adds	r3, #1
    23f4:	f8a4 3088 	strh.w	r3, [r4, #136]	; 0x88
    return (nrf_saadc_value_t *)p_reg->RESULT.PTR;
    23f8:	4b1e      	ldr	r3, [pc, #120]	; (2474 <saadc_irq_handler+0xc4>)
    23fa:	f8d3 262c 	ldr.w	r2, [r3, #1580]	; 0x62c
    return p_reg->RESULT.AMOUNT;
    23fe:	f8d3 1634 	ldr.w	r1, [r3, #1588]	; 0x634
			nrf_saadc_buffer_pointer_get(NRF_SAADC) +
    2402:	b289      	uxth	r1, r1
		nrf_saadc_buffer_pointer_set(
    2404:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
    2408:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
			/*
			 * Immediately start the next sampling if working with
			 * a zero interval or if the timer expired again while
			 * the current sampling was in progress.
			 */
			if (ctx->options.interval_us == 0U) {
    240c:	6fa3      	ldr	r3, [r4, #120]	; 0x78
    240e:	b92b      	cbnz	r3, 241c <saadc_irq_handler+0x6c>
				adc_context_start_sampling(ctx);
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
				adc_context_start_sampling(ctx);
    2410:	f894 0076 	ldrb.w	r0, [r4, #118]	; 0x76
		 */
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_STOP);
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_START);
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}
    2414:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2418:	f7ff bf50 	b.w	22bc <adc_context_start_sampling.isra.0>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    241c:	f3bf 8f5b 	dmb	ish
    2420:	e854 3f00 	ldrex	r3, [r4]
    2424:	1e5a      	subs	r2, r3, #1
    2426:	e844 2100 	strex	r1, r2, [r4]
    242a:	2900      	cmp	r1, #0
    242c:	d1f8      	bne.n	2420 <saadc_irq_handler+0x70>
    242e:	f3bf 8f5b 	dmb	ish
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
    2432:	2b01      	cmp	r3, #1
    2434:	dcec      	bgt.n	2410 <saadc_irq_handler+0x60>
    2436:	bd10      	pop	{r4, pc}
			}

			return;
		}

		if (ctx->options.interval_us != 0U) {
    2438:	6fa3      	ldr	r3, [r4, #120]	; 0x78
    243a:	b113      	cbz	r3, 2442 <saadc_irq_handler+0x92>
	z_impl_k_timer_stop(timer);
    243c:	480e      	ldr	r0, [pc, #56]	; (2478 <saadc_irq_handler+0xc8>)
    243e:	f004 f84e 	bl	64de <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    2442:	480e      	ldr	r0, [pc, #56]	; (247c <saadc_irq_handler+0xcc>)
    2444:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2448:	f002 bd62 	b.w	4f10 <z_impl_k_sem_give>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    244c:	4b0c      	ldr	r3, [pc, #48]	; (2480 <saadc_irq_handler+0xd0>)
    244e:	6819      	ldr	r1, [r3, #0]
	} else if (nrf_saadc_event_check(NRF_SAADC,
    2450:	2900      	cmp	r1, #0
    2452:	d0f0      	beq.n	2436 <saadc_irq_handler+0x86>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2454:	601a      	str	r2, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2456:	4a06      	ldr	r2, [pc, #24]	; (2470 <saadc_irq_handler+0xc0>)
    2458:	681b      	ldr	r3, [r3, #0]
    245a:	2301      	movs	r3, #1
    245c:	6013      	str	r3, [r2, #0]
    245e:	f842 3c08 	str.w	r3, [r2, #-8]
    2462:	f842 3c04 	str.w	r3, [r2, #-4]
}
    2466:	e7e6      	b.n	2436 <saadc_irq_handler+0x86>
    2468:	40007104 	.word	0x40007104
    246c:	20000000 	.word	0x20000000
    2470:	40007008 	.word	0x40007008
    2474:	40007000 	.word	0x40007000
    2478:	20000008 	.word	0x20000008
    247c:	20000050 	.word	0x20000050
    2480:	40007110 	.word	0x40007110

00002484 <adc_nrfx_read>:
{
    2484:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2486:	460d      	mov	r5, r1
	return z_impl_k_sem_take(sem, timeout);
    2488:	485d      	ldr	r0, [pc, #372]	; (2600 <adc_nrfx_read+0x17c>)
    248a:	f04f 32ff 	mov.w	r2, #4294967295
    248e:	f04f 33ff 	mov.w	r3, #4294967295
    2492:	f002 fd5d 	bl	4f50 <z_impl_k_sem_take>
	uint32_t selected_channels = sequence->channels;
    2496:	6868      	ldr	r0, [r5, #4]
	if (!selected_channels ||
    2498:	b910      	cbnz	r0, 24a0 <adc_nrfx_read+0x1c>
	error = set_resolution(sequence);
    249a:	f06f 0415 	mvn.w	r4, #21
    249e:	e097      	b.n	25d0 <adc_nrfx_read+0x14c>
	if (!selected_channels ||
    24a0:	f030 02ff 	bics.w	r2, r0, #255	; 0xff
    24a4:	d1f9      	bne.n	249a <adc_nrfx_read+0x16>
    p_reg->CH[channel].PSELP = pselp;
    24a6:	4c57      	ldr	r4, [pc, #348]	; (2604 <adc_nrfx_read+0x180>)
			if (m_data.positive_inputs[channel_id] == 0U) {
    24a8:	4f57      	ldr	r7, [pc, #348]	; (2608 <adc_nrfx_read+0x184>)
	active_channels = 0U;
    24aa:	4611      	mov	r1, r2
		if (selected_channels & BIT(channel_id)) {
    24ac:	fa20 f302 	lsr.w	r3, r0, r2
    24b0:	f013 0301 	ands.w	r3, r3, #1
    24b4:	d032      	beq.n	251c <adc_nrfx_read+0x98>
			if (m_data.positive_inputs[channel_id] == 0U) {
    24b6:	18bb      	adds	r3, r7, r2
    24b8:	f893 c090 	ldrb.w	ip, [r3, #144]	; 0x90
    24bc:	f1bc 0f00 	cmp.w	ip, #0
    24c0:	d0eb      	beq.n	249a <adc_nrfx_read+0x16>

NRF_STATIC_INLINE void nrf_saadc_burst_set(NRF_SAADC_Type *  p_reg,
                                           uint8_t           channel,
                                           nrf_saadc_burst_t burst)
{
    p_reg->CH[channel].CONFIG = (p_reg->CH[channel].CONFIG & ~SAADC_CH_CONFIG_BURST_Msk) |
    24c2:	eb04 1e02 	add.w	lr, r4, r2, lsl #4
			nrf_saadc_burst_set(NRF_SAADC, channel_id,
    24c6:	7c6e      	ldrb	r6, [r5, #17]
    24c8:	f8de 3518 	ldr.w	r3, [lr, #1304]	; 0x518
    24cc:	3e00      	subs	r6, #0
    24ce:	bf18      	it	ne
    24d0:	2601      	movne	r6, #1
    24d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    24d6:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
    24da:	f8ce 3518 	str.w	r3, [lr, #1304]	; 0x518
    p_reg->CH[channel].PSELP = pselp;
    24de:	f102 0351 	add.w	r3, r2, #81	; 0x51
    24e2:	011b      	lsls	r3, r3, #4
			++active_channels;
    24e4:	3101      	adds	r1, #1
    24e6:	f844 c003 	str.w	ip, [r4, r3]
    24ea:	b2c9      	uxtb	r1, r1
	} while (++channel_id < SAADC_CH_NUM);
    24ec:	3201      	adds	r2, #1
    24ee:	2a08      	cmp	r2, #8
    24f0:	d1dc      	bne.n	24ac <adc_nrfx_read+0x28>
	switch (sequence->resolution) {
    24f2:	7c2b      	ldrb	r3, [r5, #16]
    24f4:	3b08      	subs	r3, #8
    24f6:	2b06      	cmp	r3, #6
    24f8:	d8cf      	bhi.n	249a <adc_nrfx_read+0x16>
    24fa:	a201      	add	r2, pc, #4	; (adr r2, 2500 <adc_nrfx_read+0x7c>)
    24fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    2500:	000025e5 	.word	0x000025e5
    2504:	0000249b 	.word	0x0000249b
    2508:	00002527 	.word	0x00002527
    250c:	0000249b 	.word	0x0000249b
    2510:	000025dd 	.word	0x000025dd
    2514:	0000249b 	.word	0x0000249b
    2518:	000025e1 	.word	0x000025e1
    251c:	f102 0651 	add.w	r6, r2, #81	; 0x51
    2520:	0136      	lsls	r6, r6, #4
    2522:	51a3      	str	r3, [r4, r6]
}
    2524:	e7e2      	b.n	24ec <adc_nrfx_read+0x68>
	error = set_resolution(sequence);
    2526:	2201      	movs	r2, #1
    p_reg->RESOLUTION = resolution;
    2528:	4b36      	ldr	r3, [pc, #216]	; (2604 <adc_nrfx_read+0x180>)
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
    252a:	2901      	cmp	r1, #1
    252c:	f8c3 25f0 	str.w	r2, [r3, #1520]	; 0x5f0
	error = set_oversampling(sequence, active_channels);
    2530:	7c6a      	ldrb	r2, [r5, #17]
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
    2532:	d959      	bls.n	25e8 <adc_nrfx_read+0x164>
    2534:	2a00      	cmp	r2, #0
    2536:	d1b0      	bne.n	249a <adc_nrfx_read+0x16>
    p_reg->OVERSAMPLE = oversample;
    2538:	f8c3 25f4 	str.w	r2, [r3, #1524]	; 0x5f4
	if (sequence->options) {
    253c:	682a      	ldr	r2, [r5, #0]
	needed_buffer_size = active_channels * sizeof(nrf_saadc_value_t);
    253e:	004b      	lsls	r3, r1, #1
	if (sequence->options) {
    2540:	b112      	cbz	r2, 2548 <adc_nrfx_read+0xc4>
		needed_buffer_size *= (1 + sequence->options->extra_samplings);
    2542:	8992      	ldrh	r2, [r2, #12]
    2544:	fb02 3303 	mla	r3, r2, r3, r3
	if (sequence->buffer_size < needed_buffer_size) {
    2548:	68ea      	ldr	r2, [r5, #12]
    254a:	429a      	cmp	r2, r3
    254c:	d354      	bcc.n	25f8 <adc_nrfx_read+0x174>
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
    254e:	4b2d      	ldr	r3, [pc, #180]	; (2604 <adc_nrfx_read+0x180>)
    2550:	68aa      	ldr	r2, [r5, #8]
    2552:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
	ctx->sequence = *sequence;
    2556:	462f      	mov	r7, r5
    p_reg->RESULT.MAXCNT = size;
    2558:	f8c3 1630 	str.w	r1, [r3, #1584]	; 0x630
    255c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    255e:	4c2a      	ldr	r4, [pc, #168]	; (2608 <adc_nrfx_read+0x184>)
    2560:	f104 0664 	add.w	r6, r4, #100	; 0x64
    2564:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    2566:	683b      	ldr	r3, [r7, #0]
    2568:	6033      	str	r3, [r6, #0]
	if (sequence->options) {
    256a:	682b      	ldr	r3, [r5, #0]
	ctx->status = 0;
    256c:	2600      	movs	r6, #0
    256e:	6626      	str	r6, [r4, #96]	; 0x60
	if (sequence->options) {
    2570:	2b00      	cmp	r3, #0
    2572:	d03c      	beq.n	25ee <adc_nrfx_read+0x16a>
		ctx->options = *sequence->options;
    2574:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    2576:	f104 0578 	add.w	r5, r4, #120	; 0x78
    257a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		ctx->sequence.options = &ctx->options;
    257e:	6665      	str	r5, [r4, #100]	; 0x64
		ctx->sampling_index = 0U;
    2580:	f8a4 6088 	strh.w	r6, [r4, #136]	; 0x88
		if (ctx->options.interval_us != 0U) {
    2584:	b398      	cbz	r0, 25ee <adc_nrfx_read+0x16a>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    2586:	f3bf 8f5b 	dmb	ish
    258a:	e854 3f00 	ldrex	r3, [r4]
    258e:	e844 6200 	strex	r2, r6, [r4]
    2592:	2a00      	cmp	r2, #0
    2594:	d1f9      	bne.n	258a <adc_nrfx_read+0x106>
    2596:	f3bf 8f5b 	dmb	ish
		} else {
			return (t * to_hz + off) / from_hz;
    259a:	481c      	ldr	r0, [pc, #112]	; (260c <adc_nrfx_read+0x188>)
    259c:	6fa6      	ldr	r6, [r4, #120]	; 0x78
    259e:	4a1c      	ldr	r2, [pc, #112]	; (2610 <adc_nrfx_read+0x18c>)
    25a0:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    25a4:	2100      	movs	r1, #0
    25a6:	2300      	movs	r3, #0
    25a8:	fbe5 0106 	umlal	r0, r1, r5, r6
    25ac:	f7fd ff8a 	bl	4c4 <__aeabi_uldivmod>
	z_impl_k_timer_start(timer, duration, period);
    25b0:	2200      	movs	r2, #0
    25b2:	e9cd 0100 	strd	r0, r1, [sp]
    25b6:	2300      	movs	r3, #0
    25b8:	f104 0008 	add.w	r0, r4, #8
    25bc:	f002 ff50 	bl	5460 <z_impl_k_timer_start>
	return z_impl_k_sem_take(sem, timeout);
    25c0:	4814      	ldr	r0, [pc, #80]	; (2614 <adc_nrfx_read+0x190>)
    25c2:	f04f 32ff 	mov.w	r2, #4294967295
    25c6:	f04f 33ff 	mov.w	r3, #4294967295
    25ca:	f002 fcc1 	bl	4f50 <z_impl_k_sem_take>
	return ctx->status;
    25ce:	6e24      	ldr	r4, [r4, #96]	; 0x60
	z_impl_k_sem_give(sem);
    25d0:	480b      	ldr	r0, [pc, #44]	; (2600 <adc_nrfx_read+0x17c>)
    25d2:	f002 fc9d 	bl	4f10 <z_impl_k_sem_give>
}
    25d6:	4620      	mov	r0, r4
    25d8:	b003      	add	sp, #12
    25da:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_resolution = NRF_SAADC_RESOLUTION_12BIT;
    25dc:	2202      	movs	r2, #2
		break;
    25de:	e7a3      	b.n	2528 <adc_nrfx_read+0xa4>
		nrf_resolution = NRF_SAADC_RESOLUTION_14BIT;
    25e0:	2203      	movs	r2, #3
		break;
    25e2:	e7a1      	b.n	2528 <adc_nrfx_read+0xa4>
		nrf_resolution = NRF_SAADC_RESOLUTION_8BIT;
    25e4:	2200      	movs	r2, #0
    25e6:	e79f      	b.n	2528 <adc_nrfx_read+0xa4>
	switch (sequence->oversampling) {
    25e8:	2a08      	cmp	r2, #8
    25ea:	d9a5      	bls.n	2538 <adc_nrfx_read+0xb4>
    25ec:	e755      	b.n	249a <adc_nrfx_read+0x16>
	adc_context_start_sampling(ctx);
    25ee:	f894 0076 	ldrb.w	r0, [r4, #118]	; 0x76
    25f2:	f7ff fe63 	bl	22bc <adc_context_start_sampling.isra.0>
    25f6:	e7e3      	b.n	25c0 <adc_nrfx_read+0x13c>
		return -ENOMEM;
    25f8:	f06f 040b 	mvn.w	r4, #11
    25fc:	e7e8      	b.n	25d0 <adc_nrfx_read+0x14c>
    25fe:	bf00      	nop
    2600:	20000040 	.word	0x20000040
    2604:	40007000 	.word	0x40007000
    2608:	20000000 	.word	0x20000000
    260c:	000f423f 	.word	0x000f423f
    2610:	000f4240 	.word	0x000f4240
    2614:	20000050 	.word	0x20000050

00002618 <init_saadc>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2618:	4b0d      	ldr	r3, [pc, #52]	; (2650 <init_saadc+0x38>)

static int init_saadc(const struct device *dev)
{
    261a:	b510      	push	{r4, lr}
    261c:	2400      	movs	r4, #0
    261e:	601c      	str	r4, [r3, #0]
    2620:	681b      	ldr	r3, [r3, #0]
    2622:	4b0c      	ldr	r3, [pc, #48]	; (2654 <init_saadc+0x3c>)
    2624:	601c      	str	r4, [r3, #0]
    2626:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    2628:	4b0b      	ldr	r3, [pc, #44]	; (2658 <init_saadc+0x40>)
    262a:	2212      	movs	r2, #18
    262c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_END);
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_CALIBRATEDONE);
	nrf_saadc_int_enable(NRF_SAADC,
			     NRF_SAADC_INT_END | NRF_SAADC_INT_CALIBRATEDONE);
	NRFX_IRQ_ENABLE(DT_INST_IRQN(0));
    2630:	2007      	movs	r0, #7
    2632:	f7ff fac5 	bl	1bc0 <arch_irq_enable>

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    2636:	4622      	mov	r2, r4
    2638:	2101      	movs	r1, #1
    263a:	2007      	movs	r0, #7
    263c:	f7ff fade 	bl	1bfc <z_arm_irq_priority_set>
		/* coverity[OVERRUN] */
		return (unsigned int) arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_COUNT_GET);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_count_get(sem);
    2640:	4806      	ldr	r0, [pc, #24]	; (265c <init_saadc+0x44>)
	if (!k_sem_count_get(&ctx->lock)) {
    2642:	6c83      	ldr	r3, [r0, #72]	; 0x48
    2644:	b913      	cbnz	r3, 264c <init_saadc+0x34>
	z_impl_k_sem_give(sem);
    2646:	3040      	adds	r0, #64	; 0x40
    2648:	f002 fc62 	bl	4f10 <z_impl_k_sem_give>
		    saadc_irq_handler, DEVICE_DT_INST_GET(0), 0);

	adc_context_unlock_unconditionally(&m_data.ctx);

	return 0;
}
    264c:	2000      	movs	r0, #0
    264e:	bd10      	pop	{r4, pc}
    2650:	40007104 	.word	0x40007104
    2654:	40007110 	.word	0x40007110
    2658:	40007000 	.word	0x40007000
    265c:	20000000 	.word	0x20000000

00002660 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    2660:	4a0e      	ldr	r2, [pc, #56]	; (269c <onoff_stop+0x3c>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    2662:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    2664:	1a84      	subs	r4, r0, r2
    2666:	10a3      	asrs	r3, r4, #2
    2668:	4c0d      	ldr	r4, [pc, #52]	; (26a0 <onoff_stop+0x40>)
    266a:	435c      	muls	r4, r3
{
    266c:	4605      	mov	r5, r0
    266e:	b2e4      	uxtb	r4, r4
	err = set_off_state(&subdata->flags, ctx);
    2670:	200c      	movs	r0, #12
    2672:	fb00 2004 	mla	r0, r0, r4, r2
{
    2676:	460e      	mov	r6, r1
	err = set_off_state(&subdata->flags, ctx);
    2678:	2140      	movs	r1, #64	; 0x40
    267a:	4408      	add	r0, r1
    267c:	f003 fb5e 	bl	5d3c <set_off_state>
	if (err < 0) {
    2680:	1e01      	subs	r1, r0, #0
    2682:	db05      	blt.n	2690 <onoff_stop+0x30>
	get_sub_config(dev, type)->stop();
    2684:	4b07      	ldr	r3, [pc, #28]	; (26a4 <onoff_stop+0x44>)
    2686:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
    268a:	6863      	ldr	r3, [r4, #4]
    268c:	4798      	blx	r3
	return 0;
    268e:	2100      	movs	r1, #0
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
	notify(mgr, res);
    2690:	4628      	mov	r0, r5
    2692:	4633      	mov	r3, r6
}
    2694:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    2698:	4718      	bx	r3
    269a:	bf00      	nop
    269c:	20000acc 	.word	0x20000acc
    26a0:	b6db6db7 	.word	0xb6db6db7
    26a4:	00006874 	.word	0x00006874

000026a8 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    26a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    26ac:	4e10      	ldr	r6, [pc, #64]	; (26f0 <onoff_start+0x48>)
    26ae:	1b84      	subs	r4, r0, r6
    26b0:	10a3      	asrs	r3, r4, #2
    26b2:	4c10      	ldr	r4, [pc, #64]	; (26f4 <onoff_start+0x4c>)
    26b4:	435c      	muls	r4, r3
    26b6:	b2e4      	uxtb	r4, r4
	err = set_starting_state(&subdata->flags, ctx);
    26b8:	250c      	movs	r5, #12
    26ba:	4365      	muls	r5, r4
{
    26bc:	4680      	mov	r8, r0
	err = set_starting_state(&subdata->flags, ctx);
    26be:	f105 0040 	add.w	r0, r5, #64	; 0x40
{
    26c2:	460f      	mov	r7, r1
	err = set_starting_state(&subdata->flags, ctx);
    26c4:	4430      	add	r0, r6
    26c6:	2140      	movs	r1, #64	; 0x40
    26c8:	f003 fb51 	bl	5d6e <set_starting_state>
	if (err < 0) {
    26cc:	1e01      	subs	r1, r0, #0
    26ce:	db09      	blt.n	26e4 <onoff_start+0x3c>
	subdata->cb = cb;
    26d0:	4a09      	ldr	r2, [pc, #36]	; (26f8 <onoff_start+0x50>)
    26d2:	1973      	adds	r3, r6, r5
	subdata->user_data = user_data;
    26d4:	e9c3 270e 	strd	r2, r7, [r3, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    26d8:	4b08      	ldr	r3, [pc, #32]	; (26fc <onoff_start+0x54>)
    26da:	f853 3034 	ldr.w	r3, [r3, r4, lsl #3]
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
    26de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
    26e2:	4718      	bx	r3
		notify(mgr, err);
    26e4:	4640      	mov	r0, r8
    26e6:	463b      	mov	r3, r7
}
    26e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
    26ec:	4718      	bx	r3
    26ee:	bf00      	nop
    26f0:	20000acc 	.word	0x20000acc
    26f4:	b6db6db7 	.word	0xb6db6db7
    26f8:	00005dd1 	.word	0x00005dd1
    26fc:	00006874 	.word	0x00006874

00002700 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    2700:	2200      	movs	r2, #0
{
    2702:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    2704:	2101      	movs	r1, #1
{
    2706:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    2708:	4610      	mov	r0, r2
    270a:	f7ff fa77 	bl	1bfc <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    270e:	2000      	movs	r0, #0
    2710:	f7ff fa56 	bl	1bc0 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    2714:	480f      	ldr	r0, [pc, #60]	; (2754 <clk_init+0x54>)
    2716:	f000 ffd5 	bl	36c4 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    271a:	4b0f      	ldr	r3, [pc, #60]	; (2758 <clk_init+0x58>)
    271c:	4298      	cmp	r0, r3
    271e:	d115      	bne.n	274c <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    2720:	f003 fc98 	bl	6054 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    2724:	6926      	ldr	r6, [r4, #16]

		err = onoff_manager_init(get_onoff_manager(dev, i),
    2726:	490d      	ldr	r1, [pc, #52]	; (275c <clk_init+0x5c>)
    2728:	4630      	mov	r0, r6
    272a:	f003 f9ff 	bl	5b2c <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    272e:	2800      	cmp	r0, #0
    2730:	db0b      	blt.n	274a <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    2732:	2501      	movs	r5, #1
    2734:	6435      	str	r5, [r6, #64]	; 0x40
						get_sub_data(dev, i);
    2736:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    2738:	4908      	ldr	r1, [pc, #32]	; (275c <clk_init+0x5c>)
    273a:	f104 001c 	add.w	r0, r4, #28
    273e:	f003 f9f5 	bl	5b2c <onoff_manager_init>
		if (err < 0) {
    2742:	2800      	cmp	r0, #0
    2744:	db01      	blt.n	274a <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    2746:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
    2748:	2000      	movs	r0, #0
}
    274a:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    274c:	f06f 0004 	mvn.w	r0, #4
    2750:	e7fb      	b.n	274a <clk_init+0x4a>
    2752:	bf00      	nop
    2754:	00002795 	.word	0x00002795
    2758:	0bad0000 	.word	0x0bad0000
    275c:	00006884 	.word	0x00006884

00002760 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    2760:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    2762:	230c      	movs	r3, #12
    2764:	4809      	ldr	r0, [pc, #36]	; (278c <clkstarted_handle.constprop.0+0x2c>)
    2766:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    2768:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    276a:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    276c:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
    2770:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    2772:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
    2774:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    2776:	4418      	add	r0, r3
    2778:	f003 fb17 	bl	5daa <set_on_state>
	if (callback) {
    277c:	b12d      	cbz	r5, 278a <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    277e:	4632      	mov	r2, r6
    2780:	462b      	mov	r3, r5
    2782:	4803      	ldr	r0, [pc, #12]	; (2790 <clkstarted_handle.constprop.0+0x30>)
}
    2784:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    2788:	4718      	bx	r3
}
    278a:	bd70      	pop	{r4, r5, r6, pc}
    278c:	20000acc 	.word	0x20000acc
    2790:	00006598 	.word	0x00006598

00002794 <clock_event_handler>:
	switch (event) {
    2794:	b110      	cbz	r0, 279c <clock_event_handler+0x8>
    2796:	2801      	cmp	r0, #1
    2798:	d004      	beq.n	27a4 <clock_event_handler+0x10>
    279a:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    279c:	4b03      	ldr	r3, [pc, #12]	; (27ac <clock_event_handler+0x18>)
    279e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    27a0:	075b      	lsls	r3, r3, #29
    27a2:	d101      	bne.n	27a8 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    27a4:	f7ff bfdc 	b.w	2760 <clkstarted_handle.constprop.0>
}
    27a8:	4770      	bx	lr
    27aa:	bf00      	nop
    27ac:	20000acc 	.word	0x20000acc

000027b0 <generic_hfclk_start>:
{
    27b0:	b508      	push	{r3, lr}
	__asm__ volatile(
    27b2:	f04f 0320 	mov.w	r3, #32
    27b6:	f3ef 8111 	mrs	r1, BASEPRI
    27ba:	f383 8812 	msr	BASEPRI_MAX, r3
    27be:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    27c2:	4a12      	ldr	r2, [pc, #72]	; (280c <generic_hfclk_start+0x5c>)
    27c4:	6813      	ldr	r3, [r2, #0]
    27c6:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    27ca:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    27ce:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    27d0:	d00c      	beq.n	27ec <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    27d2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    27d6:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    27da:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    27de:	f013 0301 	ands.w	r3, r3, #1
    27e2:	d003      	beq.n	27ec <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    27e4:	480a      	ldr	r0, [pc, #40]	; (2810 <generic_hfclk_start+0x60>)
    27e6:	f003 fae0 	bl	5daa <set_on_state>
			already_started = true;
    27ea:	2301      	movs	r3, #1
	__asm__ volatile(
    27ec:	f381 8811 	msr	BASEPRI, r1
    27f0:	f3bf 8f6f 	isb	sy
	if (already_started) {
    27f4:	b123      	cbz	r3, 2800 <generic_hfclk_start+0x50>
}
    27f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    27fa:	2000      	movs	r0, #0
    27fc:	f7ff bfb0 	b.w	2760 <clkstarted_handle.constprop.0>
}
    2800:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    2804:	2001      	movs	r0, #1
    2806:	f000 bf6d 	b.w	36e4 <nrfx_clock_start>
    280a:	bf00      	nop
    280c:	20000b1c 	.word	0x20000b1c
    2810:	20000b0c 	.word	0x20000b0c

00002814 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    2814:	4b09      	ldr	r3, [pc, #36]	; (283c <generic_hfclk_stop+0x28>)
    2816:	f3bf 8f5b 	dmb	ish
    281a:	e853 2f00 	ldrex	r2, [r3]
    281e:	f022 0102 	bic.w	r1, r2, #2
    2822:	e843 1000 	strex	r0, r1, [r3]
    2826:	2800      	cmp	r0, #0
    2828:	d1f7      	bne.n	281a <generic_hfclk_stop+0x6>
    282a:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    282e:	07d3      	lsls	r3, r2, #31
    2830:	d402      	bmi.n	2838 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    2832:	2001      	movs	r0, #1
    2834:	f000 bf88 	b.w	3748 <nrfx_clock_stop>
}
    2838:	4770      	bx	lr
    283a:	bf00      	nop
    283c:	20000b1c 	.word	0x20000b1c

00002840 <api_blocking_start>:
{
    2840:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    2842:	2200      	movs	r2, #0
    2844:	2301      	movs	r3, #1
    2846:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    284a:	4a09      	ldr	r2, [pc, #36]	; (2870 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    284c:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    2850:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    2852:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    2856:	f003 fae1 	bl	5e1c <api_start>
	if (err < 0) {
    285a:	2800      	cmp	r0, #0
    285c:	db05      	blt.n	286a <api_blocking_start+0x2a>
	return z_impl_k_sem_take(sem, timeout);
    285e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    2862:	2300      	movs	r3, #0
    2864:	4668      	mov	r0, sp
    2866:	f002 fb73 	bl	4f50 <z_impl_k_sem_take>
}
    286a:	b005      	add	sp, #20
    286c:	f85d fb04 	ldr.w	pc, [sp], #4
    2870:	00005def 	.word	0x00005def

00002874 <z_nrf_clock_control_lf_on>:
{
    2874:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    2878:	493a      	ldr	r1, [pc, #232]	; (2964 <z_nrf_clock_control_lf_on+0xf0>)
    287a:	f3bf 8f5b 	dmb	ish
    287e:	4606      	mov	r6, r0
    2880:	2201      	movs	r2, #1
    2882:	e851 3f00 	ldrex	r3, [r1]
    2886:	e841 2000 	strex	r0, r2, [r1]
    288a:	2800      	cmp	r0, #0
    288c:	d1f9      	bne.n	2882 <z_nrf_clock_control_lf_on+0xe>
    288e:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    2892:	b933      	cbnz	r3, 28a2 <z_nrf_clock_control_lf_on+0x2e>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    2894:	4934      	ldr	r1, [pc, #208]	; (2968 <z_nrf_clock_control_lf_on+0xf4>)
		err = onoff_request(mgr, &cli);
    2896:	4835      	ldr	r0, [pc, #212]	; (296c <z_nrf_clock_control_lf_on+0xf8>)
    2898:	604b      	str	r3, [r1, #4]
    289a:	60cb      	str	r3, [r1, #12]
    289c:	608a      	str	r2, [r1, #8]
    289e:	f003 f958 	bl	5b52 <onoff_request>
	switch (start_mode) {
    28a2:	1e73      	subs	r3, r6, #1
    28a4:	2b01      	cmp	r3, #1
    28a6:	d832      	bhi.n	290e <z_nrf_clock_control_lf_on+0x9a>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    28a8:	2e01      	cmp	r6, #1
    28aa:	d107      	bne.n	28bc <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    28ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    28b0:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    28b4:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    28b8:	2b01      	cmp	r3, #1
    28ba:	d028      	beq.n	290e <z_nrf_clock_control_lf_on+0x9a>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    28bc:	f003 fdbf 	bl	643e <k_is_in_isr>
    28c0:	4604      	mov	r4, r0
    28c2:	b918      	cbnz	r0, 28cc <z_nrf_clock_control_lf_on+0x58>
	return !z_sys_post_kernel;
    28c4:	4b2a      	ldr	r3, [pc, #168]	; (2970 <z_nrf_clock_control_lf_on+0xfc>)
	int key = isr_mode ? irq_lock() : 0;
    28c6:	781b      	ldrb	r3, [r3, #0]
    28c8:	2b00      	cmp	r3, #0
    28ca:	d144      	bne.n	2956 <z_nrf_clock_control_lf_on+0xe2>
	__asm__ volatile(
    28cc:	f04f 0320 	mov.w	r3, #32
    28d0:	f3ef 8511 	mrs	r5, BASEPRI
    28d4:	f383 8812 	msr	BASEPRI_MAX, r3
    28d8:	f3bf 8f6f 	isb	sy
    28dc:	2401      	movs	r4, #1
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    28de:	4f25      	ldr	r7, [pc, #148]	; (2974 <z_nrf_clock_control_lf_on+0x100>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    28e0:	f8df 8094 	ldr.w	r8, [pc, #148]	; 2978 <z_nrf_clock_control_lf_on+0x104>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    28e4:	f8df 9094 	ldr.w	r9, [pc, #148]	; 297c <z_nrf_clock_control_lf_on+0x108>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    28e8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    28ec:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    28f0:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    28f4:	03d2      	lsls	r2, r2, #15
    28f6:	d50c      	bpl.n	2912 <z_nrf_clock_control_lf_on+0x9e>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    28f8:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    28fc:	2b01      	cmp	r3, #1
    28fe:	d001      	beq.n	2904 <z_nrf_clock_control_lf_on+0x90>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    2900:	2e01      	cmp	r6, #1
    2902:	d106      	bne.n	2912 <z_nrf_clock_control_lf_on+0x9e>
	if (isr_mode) {
    2904:	b30c      	cbz	r4, 294a <z_nrf_clock_control_lf_on+0xd6>
	__asm__ volatile(
    2906:	f385 8811 	msr	BASEPRI, r5
    290a:	f3bf 8f6f 	isb	sy
}
    290e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    2912:	b1ac      	cbz	r4, 2940 <z_nrf_clock_control_lf_on+0xcc>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    2914:	4628      	mov	r0, r5
    2916:	f7ff f8eb 	bl	1af0 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    291a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    291e:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    2922:	2b00      	cmp	r3, #0
    2924:	d1e0      	bne.n	28e8 <z_nrf_clock_control_lf_on+0x74>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2926:	6839      	ldr	r1, [r7, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
    2928:	2900      	cmp	r1, #0
    292a:	d0dd      	beq.n	28e8 <z_nrf_clock_control_lf_on+0x74>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    292c:	603b      	str	r3, [r7, #0]
    292e:	683b      	ldr	r3, [r7, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
    2930:	2301      	movs	r3, #1
    2932:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    2936:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    293a:	f8c9 3000 	str.w	r3, [r9]
}
    293e:	e7d3      	b.n	28e8 <z_nrf_clock_control_lf_on+0x74>
	return z_impl_k_sleep(timeout);
    2940:	2100      	movs	r1, #0
    2942:	2021      	movs	r0, #33	; 0x21
    2944:	f002 fa72 	bl	4e2c <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    2948:	e7e7      	b.n	291a <z_nrf_clock_control_lf_on+0xa6>
    p_reg->INTENSET = mask;
    294a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    294e:	2202      	movs	r2, #2
    2950:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    2954:	e7db      	b.n	290e <z_nrf_clock_control_lf_on+0x9a>
    p_reg->INTENCLR = mask;
    2956:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    295a:	2202      	movs	r2, #2
    295c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    2960:	4605      	mov	r5, r0
}
    2962:	e7bc      	b.n	28de <z_nrf_clock_control_lf_on+0x6a>
    2964:	20000b20 	.word	0x20000b20
    2968:	20000abc 	.word	0x20000abc
    296c:	20000ae8 	.word	0x20000ae8
    2970:	2000107d 	.word	0x2000107d
    2974:	40000104 	.word	0x40000104
    2978:	e000e100 	.word	0xe000e100
    297c:	40000008 	.word	0x40000008

00002980 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    2980:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    2982:	4b08      	ldr	r3, [pc, #32]	; (29a4 <uart_console_init+0x24>)
    2984:	4808      	ldr	r0, [pc, #32]	; (29a8 <uart_console_init+0x28>)
    2986:	6018      	str	r0, [r3, #0]
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
    2988:	f003 fc08 	bl	619c <z_device_ready>
    298c:	b138      	cbz	r0, 299e <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
    298e:	4807      	ldr	r0, [pc, #28]	; (29ac <uart_console_init+0x2c>)
    2990:	f7ff fc30 	bl	21f4 <__stdout_hook_install>
	__printk_hook_install(console_out);
    2994:	4805      	ldr	r0, [pc, #20]	; (29ac <uart_console_init+0x2c>)
    2996:	f7ff f86f 	bl	1a78 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    299a:	2000      	movs	r0, #0
}
    299c:	bd08      	pop	{r3, pc}
		return -ENODEV;
    299e:	f06f 0012 	mvn.w	r0, #18
    29a2:	e7fb      	b.n	299c <uart_console_init+0x1c>
    29a4:	20000b24 	.word	0x20000b24
    29a8:	000065f8 	.word	0x000065f8
    29ac:	000029b1 	.word	0x000029b1

000029b0 <console_out>:
	if ('\n' == c) {
    29b0:	280a      	cmp	r0, #10
{
    29b2:	b538      	push	{r3, r4, r5, lr}
    29b4:	4d07      	ldr	r5, [pc, #28]	; (29d4 <console_out+0x24>)
    29b6:	4604      	mov	r4, r0
	if ('\n' == c) {
    29b8:	d104      	bne.n	29c4 <console_out+0x14>
    29ba:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    29bc:	6883      	ldr	r3, [r0, #8]
    29be:	210d      	movs	r1, #13
    29c0:	685b      	ldr	r3, [r3, #4]
    29c2:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    29c4:	6828      	ldr	r0, [r5, #0]
    29c6:	6883      	ldr	r3, [r0, #8]
    29c8:	b2e1      	uxtb	r1, r4
    29ca:	685b      	ldr	r3, [r3, #4]
    29cc:	4798      	blx	r3
}
    29ce:	4620      	mov	r0, r4
    29d0:	bd38      	pop	{r3, r4, r5, pc}
    29d2:	bf00      	nop
    29d4:	20000b24 	.word	0x20000b24

000029d8 <nrfx_gpio_handler>:
			dev = DEVICE_DT_INST_GET(i); \
		}

	if (0) {
	} /* Followed by else if from FOREACH macro. Done to avoid return statement in macro.  */
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    29d8:	0942      	lsrs	r2, r0, #5
}

static void nrfx_gpio_handler(nrfx_gpiote_pin_t abs_pin,
			      nrfx_gpiote_trigger_t trigger,
			      void *context)
{
    29da:	b570      	push	{r4, r5, r6, lr}
    29dc:	4603      	mov	r3, r0
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    29de:	d002      	beq.n	29e6 <nrfx_gpio_handler+0xe>
    29e0:	2a01      	cmp	r2, #1
    29e2:	d01d      	beq.n	2a20 <nrfx_gpio_handler+0x48>

	struct gpio_nrfx_data *data = get_port_data(port);
	sys_slist_t *list = &data->callbacks;

	gpio_fire_callbacks(list, port, BIT(pin));
}
    29e4:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    29e6:	4e0f      	ldr	r6, [pc, #60]	; (2a24 <nrfx_gpio_handler+0x4c>)
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    29e8:	6932      	ldr	r2, [r6, #16]
    29ea:	6851      	ldr	r1, [r2, #4]
    29ec:	2900      	cmp	r1, #0
    29ee:	d0f9      	beq.n	29e4 <nrfx_gpio_handler+0xc>
    29f0:	680c      	ldr	r4, [r1, #0]
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    29f2:	f003 031f 	and.w	r3, r3, #31
	gpio_fire_callbacks(list, port, BIT(pin));
    29f6:	2501      	movs	r5, #1
    29f8:	2c00      	cmp	r4, #0
    29fa:	fa05 f503 	lsl.w	r5, r5, r3
	return node->next;
    29fe:	bf38      	it	cc
    2a00:	2400      	movcc	r4, #0
		if (cb->pin_mask & pins) {
    2a02:	688a      	ldr	r2, [r1, #8]
    2a04:	402a      	ands	r2, r5
    2a06:	d002      	beq.n	2a0e <nrfx_gpio_handler+0x36>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    2a08:	684b      	ldr	r3, [r1, #4]
    2a0a:	4630      	mov	r0, r6
    2a0c:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    2a0e:	2c00      	cmp	r4, #0
    2a10:	d0e8      	beq.n	29e4 <nrfx_gpio_handler+0xc>
    2a12:	6823      	ldr	r3, [r4, #0]
    2a14:	2b00      	cmp	r3, #0
    2a16:	bf38      	it	cc
    2a18:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    2a1a:	4621      	mov	r1, r4
    2a1c:	461c      	mov	r4, r3
    2a1e:	e7f0      	b.n	2a02 <nrfx_gpio_handler+0x2a>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    2a20:	4e01      	ldr	r6, [pc, #4]	; (2a28 <nrfx_gpio_handler+0x50>)
    2a22:	e7e1      	b.n	29e8 <nrfx_gpio_handler+0x10>
    2a24:	000065b0 	.word	0x000065b0
    2a28:	000065c8 	.word	0x000065c8

00002a2c <gpio_nrfx_pin_interrupt_configure>:
{
    2a2c:	b530      	push	{r4, r5, lr}
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    2a2e:	6840      	ldr	r0, [r0, #4]
    2a30:	7b04      	ldrb	r4, [r0, #12]
    2a32:	f001 051f 	and.w	r5, r1, #31
	if (mode == GPIO_INT_MODE_DISABLED) {
    2a36:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    2a3a:	ea45 1544 	orr.w	r5, r5, r4, lsl #5
{
    2a3e:	b085      	sub	sp, #20
    2a40:	f04f 0400 	mov.w	r4, #0
	if (mode == GPIO_INT_MODE_DISABLED) {
    2a44:	d104      	bne.n	2a50 <gpio_nrfx_pin_interrupt_configure+0x24>
		nrfx_gpiote_trigger_disable(abs_pin);
    2a46:	4628      	mov	r0, r5
    2a48:	f001 f964 	bl	3d14 <nrfx_gpiote_trigger_disable>
	return 0;
    2a4c:	2000      	movs	r0, #0
    2a4e:	e032      	b.n	2ab6 <gpio_nrfx_pin_interrupt_configure+0x8a>
	if (mode == GPIO_INT_MODE_LEVEL) {
    2a50:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
	nrfx_gpiote_trigger_config_t trigger_config = {
    2a54:	e9cd 4402 	strd	r4, r4, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    2a58:	d12f      	bne.n	2aba <gpio_nrfx_pin_interrupt_configure+0x8e>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    2a5a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
    2a5e:	bf0c      	ite	eq
    2a60:	2304      	moveq	r3, #4
    2a62:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
    2a64:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    2a68:	6883      	ldr	r3, [r0, #8]
    2a6a:	fa23 f101 	lsr.w	r1, r3, r1
    2a6e:	07c9      	lsls	r1, r1, #31
    2a70:	d42f      	bmi.n	2ad2 <gpio_nrfx_pin_interrupt_configure+0xa6>
    2a72:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    2a76:	d12c      	bne.n	2ad2 <gpio_nrfx_pin_interrupt_configure+0xa6>

    return pin_number >> 5;
    2a78:	096a      	lsrs	r2, r5, #5
        case 1: return NRF_P1;
    2a7a:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
    2a7c:	f005 031f 	and.w	r3, r5, #31
        case 1: return NRF_P1;
    2a80:	4a1c      	ldr	r2, [pc, #112]	; (2af4 <gpio_nrfx_pin_interrupt_configure+0xc8>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    2a82:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
        case 1: return NRF_P1;
    2a86:	bf18      	it	ne
    2a88:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    2a8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    2a90:	07db      	lsls	r3, r3, #31
    2a92:	d41e      	bmi.n	2ad2 <gpio_nrfx_pin_interrupt_configure+0xa6>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    2a94:	f10d 0407 	add.w	r4, sp, #7
    2a98:	4621      	mov	r1, r4
    2a9a:	4628      	mov	r0, r5
    2a9c:	f001 f8a6 	bl	3bec <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    2aa0:	4b15      	ldr	r3, [pc, #84]	; (2af8 <gpio_nrfx_pin_interrupt_configure+0xcc>)
    2aa2:	4298      	cmp	r0, r3
    2aa4:	d114      	bne.n	2ad0 <gpio_nrfx_pin_interrupt_configure+0xa4>
			err = nrfx_gpiote_channel_alloc(&ch);
    2aa6:	4620      	mov	r0, r4
    2aa8:	f001 f8ea 	bl	3c80 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    2aac:	4b13      	ldr	r3, [pc, #76]	; (2afc <gpio_nrfx_pin_interrupt_configure+0xd0>)
    2aae:	4298      	cmp	r0, r3
    2ab0:	d00e      	beq.n	2ad0 <gpio_nrfx_pin_interrupt_configure+0xa4>
				return -ENOMEM;
    2ab2:	f06f 000b 	mvn.w	r0, #11
}
    2ab6:	b005      	add	sp, #20
    2ab8:	bd30      	pop	{r4, r5, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    2aba:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
    2abe:	d005      	beq.n	2acc <gpio_nrfx_pin_interrupt_configure+0xa0>
    2ac0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
    2ac4:	bf0c      	ite	eq
    2ac6:	2302      	moveq	r3, #2
    2ac8:	2301      	movne	r3, #1
    2aca:	e7cb      	b.n	2a64 <gpio_nrfx_pin_interrupt_configure+0x38>
    2acc:	2303      	movs	r3, #3
    2ace:	e7c9      	b.n	2a64 <gpio_nrfx_pin_interrupt_configure+0x38>
		trigger_config.p_in_channel = &ch;
    2ad0:	9403      	str	r4, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    2ad2:	2300      	movs	r3, #0
    2ad4:	4619      	mov	r1, r3
    2ad6:	aa02      	add	r2, sp, #8
    2ad8:	4628      	mov	r0, r5
    2ada:	f000 ff65 	bl	39a8 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    2ade:	4b07      	ldr	r3, [pc, #28]	; (2afc <gpio_nrfx_pin_interrupt_configure+0xd0>)
    2ae0:	4298      	cmp	r0, r3
    2ae2:	d104      	bne.n	2aee <gpio_nrfx_pin_interrupt_configure+0xc2>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    2ae4:	2101      	movs	r1, #1
    2ae6:	4628      	mov	r0, r5
    2ae8:	f001 f8d0 	bl	3c8c <nrfx_gpiote_trigger_enable>
    2aec:	e7ae      	b.n	2a4c <gpio_nrfx_pin_interrupt_configure+0x20>
		return -EIO;
    2aee:	f06f 0004 	mvn.w	r0, #4
    2af2:	e7e0      	b.n	2ab6 <gpio_nrfx_pin_interrupt_configure+0x8a>
    2af4:	50000300 	.word	0x50000300
    2af8:	0bad0004 	.word	0x0bad0004
    2afc:	0bad0000 	.word	0x0bad0000

00002b00 <gpio_nrfx_init>:

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    2b00:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    2b02:	f001 f8ad 	bl	3c60 <nrfx_gpiote_is_init>
    2b06:	4604      	mov	r4, r0
    2b08:	b968      	cbnz	r0, 2b26 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    2b0a:	f001 f881 	bl	3c10 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    2b0e:	4b08      	ldr	r3, [pc, #32]	; (2b30 <gpio_nrfx_init+0x30>)
    2b10:	4298      	cmp	r0, r3
    2b12:	d10a      	bne.n	2b2a <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    2b14:	4807      	ldr	r0, [pc, #28]	; (2b34 <gpio_nrfx_init+0x34>)
    2b16:	4621      	mov	r1, r4
    2b18:	f001 f862 	bl	3be0 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    2b1c:	4622      	mov	r2, r4
    2b1e:	2105      	movs	r1, #5
    2b20:	2006      	movs	r0, #6
    2b22:	f7ff f86b 	bl	1bfc <z_arm_irq_priority_set>
		return 0;
    2b26:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    2b28:	bd10      	pop	{r4, pc}
		return -EIO;
    2b2a:	f06f 0004 	mvn.w	r0, #4
    2b2e:	e7fb      	b.n	2b28 <gpio_nrfx_init+0x28>
    2b30:	0bad0000 	.word	0x0bad0000
    2b34:	000029d9 	.word	0x000029d9

00002b38 <gpio_nrfx_pin_configure>:
{
    2b38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
    2b3c:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    2b3e:	7b3b      	ldrb	r3, [r7, #12]
    2b40:	f001 051f 	and.w	r5, r1, #31
{
    2b44:	b085      	sub	sp, #20
    2b46:	460e      	mov	r6, r1
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    2b48:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
    2b4c:	4614      	mov	r4, r2
    2b4e:	b9ca      	cbnz	r2, 2b84 <gpio_nrfx_pin_configure+0x4c>
	err = nrfx_gpiote_channel_get(pin, &ch);
    2b50:	a902      	add	r1, sp, #8
    2b52:	4628      	mov	r0, r5
    2b54:	f001 f84a 	bl	3bec <nrfx_gpiote_channel_get>
    2b58:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
    2b5a:	4628      	mov	r0, r5
    2b5c:	f001 f8fc 	bl	3d58 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
    2b60:	4b48      	ldr	r3, [pc, #288]	; (2c84 <gpio_nrfx_pin_configure+0x14c>)
    2b62:	4298      	cmp	r0, r3
    2b64:	d004      	beq.n	2b70 <gpio_nrfx_pin_configure+0x38>
		return -EIO;
    2b66:	f06f 0004 	mvn.w	r0, #4
}
    2b6a:	b005      	add	sp, #20
    2b6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (free_ch) {
    2b70:	4284      	cmp	r4, r0
    2b72:	d105      	bne.n	2b80 <gpio_nrfx_pin_configure+0x48>
		err = nrfx_gpiote_channel_free(ch);
    2b74:	f89d 0008 	ldrb.w	r0, [sp, #8]
    2b78:	f001 f87c 	bl	3c74 <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    2b7c:	42a0      	cmp	r0, r4
    2b7e:	d1f2      	bne.n	2b66 <gpio_nrfx_pin_configure+0x2e>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    2b80:	2000      	movs	r0, #0
    2b82:	e7f2      	b.n	2b6a <gpio_nrfx_pin_configure+0x32>
	nrfx_gpiote_trigger_config_t trigger_config = {
    2b84:	f04f 0900 	mov.w	r9, #0
	err = nrfx_gpiote_channel_get(pin, &ch);
    2b88:	f10d 0103 	add.w	r1, sp, #3
    2b8c:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
    2b8e:	e9cd 9902 	strd	r9, r9, [sp, #8]
	err = nrfx_gpiote_channel_get(pin, &ch);
    2b92:	f001 f82b 	bl	3bec <nrfx_gpiote_channel_get>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    2b96:	464b      	mov	r3, r9
	err = nrfx_gpiote_channel_get(pin, &ch);
    2b98:	4680      	mov	r8, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    2b9a:	aa02      	add	r2, sp, #8
    2b9c:	4649      	mov	r1, r9
    2b9e:	4628      	mov	r0, r5
    2ba0:	f000 ff02 	bl	39a8 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    2ba4:	4b37      	ldr	r3, [pc, #220]	; (2c84 <gpio_nrfx_pin_configure+0x14c>)
    2ba6:	4298      	cmp	r0, r3
    2ba8:	d002      	beq.n	2bb0 <gpio_nrfx_pin_configure+0x78>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    2baa:	f06f 0015 	mvn.w	r0, #21
    2bae:	e7dc      	b.n	2b6a <gpio_nrfx_pin_configure+0x32>
	if (free_ch) {
    2bb0:	4580      	cmp	r8, r0
    2bb2:	d103      	bne.n	2bbc <gpio_nrfx_pin_configure+0x84>
		err = nrfx_gpiote_channel_free(ch);
    2bb4:	f89d 0003 	ldrb.w	r0, [sp, #3]
    2bb8:	f001 f85c 	bl	3c74 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    2bbc:	05a3      	lsls	r3, r4, #22
    2bbe:	d54e      	bpl.n	2c5e <gpio_nrfx_pin_configure+0x126>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    2bc0:	4b31      	ldr	r3, [pc, #196]	; (2c88 <gpio_nrfx_pin_configure+0x150>)
    2bc2:	4a32      	ldr	r2, [pc, #200]	; (2c8c <gpio_nrfx_pin_configure+0x154>)
    2bc4:	4023      	ands	r3, r4
    2bc6:	4293      	cmp	r3, r2
    2bc8:	d03a      	beq.n	2c40 <gpio_nrfx_pin_configure+0x108>
    2bca:	d80c      	bhi.n	2be6 <gpio_nrfx_pin_configure+0xae>
    2bcc:	2b06      	cmp	r3, #6
    2bce:	d014      	beq.n	2bfa <gpio_nrfx_pin_configure+0xc2>
    2bd0:	d804      	bhi.n	2bdc <gpio_nrfx_pin_configure+0xa4>
    2bd2:	b193      	cbz	r3, 2bfa <gpio_nrfx_pin_configure+0xc2>
    2bd4:	2b02      	cmp	r3, #2
    2bd6:	d1e8      	bne.n	2baa <gpio_nrfx_pin_configure+0x72>
    2bd8:	2304      	movs	r3, #4
    2bda:	e00e      	b.n	2bfa <gpio_nrfx_pin_configure+0xc2>
    2bdc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    2be0:	d1e3      	bne.n	2baa <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_H0S1;
    2be2:	2301      	movs	r3, #1
    2be4:	e009      	b.n	2bfa <gpio_nrfx_pin_configure+0xc2>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    2be6:	4a2a      	ldr	r2, [pc, #168]	; (2c90 <gpio_nrfx_pin_configure+0x158>)
    2be8:	4293      	cmp	r3, r2
    2bea:	d02b      	beq.n	2c44 <gpio_nrfx_pin_configure+0x10c>
    2bec:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
    2bf0:	d02a      	beq.n	2c48 <gpio_nrfx_pin_configure+0x110>
    2bf2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    2bf6:	d1d8      	bne.n	2baa <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_S0H1;
    2bf8:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
    2bfa:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    2bfe:	f484 7380 	eor.w	r3, r4, #256	; 0x100
    2c02:	f3c3 2300 	ubfx	r3, r3, #8, #1
	if (flags & GPIO_PULL_UP) {
    2c06:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    2c08:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLDOWN;
    2c0c:	bf54      	ite	pl
    2c0e:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    2c12:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    2c14:	0521      	lsls	r1, r4, #20
		nrfx_gpiote_output_config_t output_config = {
    2c16:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    2c1a:	d517      	bpl.n	2c4c <gpio_nrfx_pin_configure+0x114>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    2c1c:	687b      	ldr	r3, [r7, #4]
    2c1e:	2101      	movs	r1, #1
    2c20:	fa01 f606 	lsl.w	r6, r1, r6
    p_reg->OUTSET = set_mask;
    2c24:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    2c28:	2200      	movs	r2, #0
    2c2a:	a901      	add	r1, sp, #4
    2c2c:	4628      	mov	r0, r5
    2c2e:	f000 ff67 	bl	3b00 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    2c32:	4b14      	ldr	r3, [pc, #80]	; (2c84 <gpio_nrfx_pin_configure+0x14c>)
    2c34:	4298      	cmp	r0, r3
    2c36:	bf14      	ite	ne
    2c38:	f06f 0015 	mvnne.w	r0, #21
    2c3c:	2000      	moveq	r0, #0
    2c3e:	e794      	b.n	2b6a <gpio_nrfx_pin_configure+0x32>
		*drive = NRF_GPIO_PIN_H0D1;
    2c40:	2307      	movs	r3, #7
    2c42:	e7da      	b.n	2bfa <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_D0H1;
    2c44:	2305      	movs	r3, #5
    2c46:	e7d8      	b.n	2bfa <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_H0H1;
    2c48:	2303      	movs	r3, #3
    2c4a:	e7d6      	b.n	2bfa <gpio_nrfx_pin_configure+0xc2>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    2c4c:	0562      	lsls	r2, r4, #21
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    2c4e:	bf41      	itttt	mi
    2c50:	687b      	ldrmi	r3, [r7, #4]
    2c52:	2101      	movmi	r1, #1
    2c54:	fa01 f606 	lslmi.w	r6, r1, r6
    p_reg->OUTCLR = clr_mask;
    2c58:	f8c3 650c 	strmi.w	r6, [r3, #1292]	; 0x50c
}
    2c5c:	e7e4      	b.n	2c28 <gpio_nrfx_pin_configure+0xf0>
	if (flags & GPIO_PULL_UP) {
    2c5e:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    2c60:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
    2c64:	bf54      	ite	pl
    2c66:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
    2c6a:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    2c6c:	461a      	mov	r2, r3
    2c6e:	a901      	add	r1, sp, #4
    2c70:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
    2c72:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    2c76:	f000 fe97 	bl	39a8 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    2c7a:	4b02      	ldr	r3, [pc, #8]	; (2c84 <gpio_nrfx_pin_configure+0x14c>)
    2c7c:	4298      	cmp	r0, r3
    2c7e:	f43f af7f 	beq.w	2b80 <gpio_nrfx_pin_configure+0x48>
    2c82:	e792      	b.n	2baa <gpio_nrfx_pin_configure+0x72>
    2c84:	0bad0000 	.word	0x0bad0000
    2c88:	00f00006 	.word	0x00f00006
    2c8c:	00100006 	.word	0x00100006
    2c90:	00400002 	.word	0x00400002

00002c94 <pwm_nrfx_get_cycles_per_sec>:
{
	/* TODO: Since this function might be removed, we will always return
	 * 16MHz from this function and handle the conversion with prescaler,
	 * etc, in the pin set function. See issue #6958.
	 */
	*cycles = 16ul * 1000ul * 1000ul;
    2c94:	4802      	ldr	r0, [pc, #8]	; (2ca0 <pwm_nrfx_get_cycles_per_sec+0xc>)
    2c96:	2100      	movs	r1, #0
    2c98:	e9c2 0100 	strd	r0, r1, [r2]

	return 0;
}
    2c9c:	2000      	movs	r0, #0
    2c9e:	4770      	bx	lr
    2ca0:	00f42400 	.word	0x00f42400

00002ca4 <pwm_nrfx_init>:
	.pin_set = pwm_nrfx_pin_set,
	.get_cycles_per_sec = pwm_nrfx_get_cycles_per_sec,
};

static int pwm_nrfx_init(const struct device *dev)
{
    2ca4:	4602      	mov	r2, r0
	const struct pwm_nrfx_config *config = dev->config;
    2ca6:	6840      	ldr	r0, [r0, #4]
	struct pwm_nrfx_data *data = dev->data;

	for (size_t i = 0; i < ARRAY_SIZE(data->current); i++) {
    2ca8:	6912      	ldr	r2, [r2, #16]
{
    2caa:	b538      	push	{r3, r4, r5, lr}
    2cac:	f100 0308 	add.w	r3, r0, #8
    2cb0:	3204      	adds	r2, #4
    2cb2:	f100 040c 	add.w	r4, r0, #12
    2cb6:	4619      	mov	r1, r3
		bool inverted = config->initial_config.output_pins[i] & NRFX_PWM_PIN_INVERTED;
		uint16_t value = (inverted)?(PWM_NRFX_CH_VALUE_INVERTED):(PWM_NRFX_CH_VALUE_NORMAL);
    2cb8:	f913 5b01 	ldrsb.w	r5, [r3], #1
    2cbc:	2d00      	cmp	r5, #0
    2cbe:	bfb4      	ite	lt
    2cc0:	2500      	movlt	r5, #0
    2cc2:	f44f 4500 	movge.w	r5, #32768	; 0x8000
	for (size_t i = 0; i < ARRAY_SIZE(data->current); i++) {
    2cc6:	42a3      	cmp	r3, r4

		data->current[i] = value;
    2cc8:	f822 5b02 	strh.w	r5, [r2], #2
	for (size_t i = 0; i < ARRAY_SIZE(data->current); i++) {
    2ccc:	d1f4      	bne.n	2cb8 <pwm_nrfx_init+0x14>
	};

	nrfx_err_t result = nrfx_pwm_init(&config->pwm,
    2cce:	2300      	movs	r3, #0
    2cd0:	461a      	mov	r2, r3
    2cd2:	f001 f943 	bl	3f5c <nrfx_pwm_init>
					  &config->initial_config,
					  NULL,
					  NULL);
	if (result != NRFX_SUCCESS) {
    2cd6:	4b03      	ldr	r3, [pc, #12]	; (2ce4 <pwm_nrfx_init+0x40>)
		LOG_ERR("Failed to initialize device: %s", dev->name);
		return -EBUSY;
    2cd8:	4298      	cmp	r0, r3
	}

	return 0;
}
    2cda:	bf14      	ite	ne
    2cdc:	f06f 000f 	mvnne.w	r0, #15
    2ce0:	2000      	moveq	r0, #0
    2ce2:	bd38      	pop	{r3, r4, r5, pc}
    2ce4:	0bad0000 	.word	0x0bad0000

00002ce8 <pwm_nrfx_pin_set>:
{
    2ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2cec:	f89d 4020 	ldrb.w	r4, [sp, #32]
	const struct pwm_nrfx_config *config = dev->config;
    2cf0:	6846      	ldr	r6, [r0, #4]
{
    2cf2:	460f      	mov	r7, r1
    2cf4:	4615      	mov	r5, r2
	struct pwm_nrfx_data *data = dev->data;
    2cf6:	6901      	ldr	r1, [r0, #16]
{
    2cf8:	4698      	mov	r8, r3
	if (flags) {
    2cfa:	2c00      	cmp	r4, #0
    2cfc:	d13f      	bne.n	2d7e <pwm_nrfx_pin_set+0x96>
	for (i = 0U; i < NRF_PWM_CHANNEL_COUNT; i++) {
    2cfe:	1df2      	adds	r2, r6, #7
		if (output_pins[i] != NRFX_PWM_PIN_NOT_USED
    2d00:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    2d04:	2bff      	cmp	r3, #255	; 0xff
    2d06:	d003      	beq.n	2d10 <pwm_nrfx_pin_set+0x28>
		    && (pwm == (output_pins[i] & PWM_NRFX_CH_PIN_MASK))) {
    2d08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    2d0c:	429f      	cmp	r7, r3
    2d0e:	d039      	beq.n	2d84 <pwm_nrfx_pin_set+0x9c>
	for (i = 0U; i < NRF_PWM_CHANNEL_COUNT; i++) {
    2d10:	3401      	adds	r4, #1
    2d12:	b2e4      	uxtb	r4, r4
    2d14:	2c04      	cmp	r4, #4
    2d16:	d1f3      	bne.n	2d00 <pwm_nrfx_pin_set+0x18>
		return -EINVAL;
    2d18:	f06f 0015 	mvn.w	r0, #21
    2d1c:	e009      	b.n	2d32 <pwm_nrfx_pin_set+0x4a>
	was_stopped = !pwm_channel_is_active(channel, data) &&
    2d1e:	2000      	movs	r0, #0
    2d20:	e040      	b.n	2da4 <pwm_nrfx_pin_set+0xbc>
		countertop >>= 1;
    2d22:	3301      	adds	r3, #1
	} while (prescaler <= PWM_PRESCALER_PRESCALER_Msk);
    2d24:	2b08      	cmp	r3, #8
		countertop >>= 1;
    2d26:	ea4f 0252 	mov.w	r2, r2, lsr #1
	} while (prescaler <= PWM_PRESCALER_PRESCALER_Msk);
    2d2a:	d158      	bne.n	2dde <pwm_nrfx_pin_set+0xf6>
    2d2c:	e7f4      	b.n	2d18 <pwm_nrfx_pin_set+0x30>
		if (was_stopped) {
    2d2e:	b9c8      	cbnz	r0, 2d64 <pwm_nrfx_pin_set+0x7c>
	return 0;
    2d30:	2000      	movs	r0, #0
}
    2d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			&& channel_inverted_state;
    2d36:	4545      	cmp	r5, r8
    2d38:	f200 8086 	bhi.w	2e48 <pwm_nrfx_pin_set+0x160>
        case 1: return NRF_P1;
    2d3c:	2f01      	cmp	r7, #1
    2d3e:	4b49      	ldr	r3, [pc, #292]	; (2e64 <pwm_nrfx_pin_set+0x17c>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    2d40:	f04f 0201 	mov.w	r2, #1
        case 1: return NRF_P1;
    2d44:	bf18      	it	ne
    2d46:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    2d4a:	4082      	lsls	r2, r0
    p_reg->OUTCLR = clr_mask;
    2d4c:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
		if (!any_other_channel_is_active(channel, data)) {
    2d50:	4620      	mov	r0, r4
    2d52:	f003 f8d0 	bl	5ef6 <any_other_channel_is_active>
    2d56:	2800      	cmp	r0, #0
    2d58:	d1ea      	bne.n	2d30 <pwm_nrfx_pin_set+0x48>
			nrfx_pwm_stop(&config->pwm, false);
    2d5a:	4601      	mov	r1, r0
    2d5c:	4630      	mov	r0, r6
    2d5e:	f003 f9ff 	bl	6160 <nrfx_pwm_stop>
    2d62:	e7e5      	b.n	2d30 <pwm_nrfx_pin_set+0x48>
			while (!nrfx_pwm_is_stopped(&config->pwm)) {
    2d64:	4630      	mov	r0, r6
    2d66:	f001 f9e5 	bl	4134 <nrfx_pwm_is_stopped>
    2d6a:	2800      	cmp	r0, #0
    2d6c:	d0fa      	beq.n	2d64 <pwm_nrfx_pin_set+0x7c>
			nrfx_pwm_simple_playback(&config->pwm,
    2d6e:	2302      	movs	r3, #2
    2d70:	2201      	movs	r2, #1
    2d72:	f106 0118 	add.w	r1, r6, #24
    2d76:	4630      	mov	r0, r6
    2d78:	f001 f99e 	bl	40b8 <nrfx_pwm_simple_playback>
    2d7c:	e7d8      	b.n	2d30 <pwm_nrfx_pin_set+0x48>
		return -ENOTSUP;
    2d7e:	f06f 0085 	mvn.w	r0, #133	; 0x85
    2d82:	e7d6      	b.n	2d32 <pwm_nrfx_pin_set+0x4a>
	uint16_t pulse_cycle =
    2d84:	eb01 0944 	add.w	r9, r1, r4, lsl #1
		data->current[channel] & PWM_NRFX_CH_PULSE_CYCLES_MASK;
    2d88:	f8b9 a004 	ldrh.w	sl, [r9, #4]
	uint16_t pulse_cycle =
    2d8c:	f3ca 030e 	ubfx	r3, sl, #0, #15
	return (pulse_cycle > 0 && pulse_cycle < data->countertop);
    2d90:	b113      	cbz	r3, 2d98 <pwm_nrfx_pin_set+0xb0>
    2d92:	898a      	ldrh	r2, [r1, #12]
    2d94:	429a      	cmp	r2, r3
    2d96:	d8c2      	bhi.n	2d1e <pwm_nrfx_pin_set+0x36>
		      !any_other_channel_is_active(channel, data);
    2d98:	4620      	mov	r0, r4
    2d9a:	f003 f8ac 	bl	5ef6 <any_other_channel_is_active>
	was_stopped = !pwm_channel_is_active(channel, data) &&
    2d9e:	f080 0001 	eor.w	r0, r0, #1
    2da2:	b2c0      	uxtb	r0, r0
	if (config->initial_config.count_mode == NRF_PWM_MODE_UP_AND_DOWN) {
    2da4:	f896 c00e 	ldrb.w	ip, [r6, #14]
    2da8:	f1bc 0f01 	cmp.w	ip, #1
		period_cycles /= 2;
    2dac:	bf04      	itt	eq
    2dae:	086d      	lsreq	r5, r5, #1
		pulse_cycles /= 2;
    2db0:	ea4f 0858 	moveq.w	r8, r8, lsr #1
	if (period_cycles != 0 && period_cycles != data->period_cycles) {
    2db4:	b325      	cbz	r5, 2e00 <pwm_nrfx_pin_set+0x118>
    2db6:	680b      	ldr	r3, [r1, #0]
    2db8:	42ab      	cmp	r3, r5
    2dba:	d021      	beq.n	2e00 <pwm_nrfx_pin_set+0x118>
    2dbc:	2300      	movs	r3, #0
				data->current[i]
    2dbe:	f101 0e04 	add.w	lr, r1, #4
		if (i != channel) {
    2dc2:	b2da      	uxtb	r2, r3
    2dc4:	42a2      	cmp	r2, r4
    2dc6:	d005      	beq.n	2dd4 <pwm_nrfx_pin_set+0xec>
			uint16_t channel_pulse_cycle =
    2dc8:	f83e 2013 	ldrh.w	r2, [lr, r3, lsl #1]
			if (channel_pulse_cycle > 0) {
    2dcc:	f3c2 020e 	ubfx	r2, r2, #0, #15
    2dd0:	2a00      	cmp	r2, #0
    2dd2:	d1a1      	bne.n	2d18 <pwm_nrfx_pin_set+0x30>
	for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i) {
    2dd4:	3301      	adds	r3, #1
    2dd6:	2b04      	cmp	r3, #4
    2dd8:	d1f3      	bne.n	2dc2 <pwm_nrfx_pin_set+0xda>
    2dda:	462a      	mov	r2, r5
    2ddc:	2300      	movs	r3, #0
		if (countertop <= PWM_COUNTERTOP_COUNTERTOP_Msk) {
    2dde:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    2de2:	fa5f fe83 	uxtb.w	lr, r3
    2de6:	d29c      	bcs.n	2d22 <pwm_nrfx_pin_set+0x3a>
			data->prescaler     = prescaler;
    2de8:	f881 e00e 	strb.w	lr, [r1, #14]
			nrf_pwm_configure(config->pwm.p_registers,
    2dec:	f8d6 e000 	ldr.w	lr, [r6]
			data->period_cycles = period_cycles;
    2df0:	600d      	str	r5, [r1, #0]
			data->countertop    = (uint16_t)countertop;
    2df2:	818a      	strh	r2, [r1, #12]
                                         nrf_pwm_mode_t mode,
                                         uint16_t       top_value)
{
    NRFX_ASSERT(top_value <= PWM_COUNTERTOP_COUNTERTOP_Msk);

    p_reg->PRESCALER  = base_clock;
    2df4:	f8ce 350c 	str.w	r3, [lr, #1292]	; 0x50c
    p_reg->MODE       = mode;
    2df8:	f8ce c504 	str.w	ip, [lr, #1284]	; 0x504
    p_reg->COUNTERTOP = top_value;
    2dfc:	f8ce 2508 	str.w	r2, [lr, #1288]	; 0x508
		| (pulse_cycles >> data->prescaler));
    2e00:	7b8a      	ldrb	r2, [r1, #14]
	pulse_cycles = MIN(pulse_cycles, period_cycles);
    2e02:	4545      	cmp	r5, r8
    2e04:	462b      	mov	r3, r5
    2e06:	bf28      	it	cs
    2e08:	4643      	movcs	r3, r8
		| (pulse_cycles >> data->prescaler));
    2e0a:	fa23 f202 	lsr.w	r2, r3, r2
		(data->current[channel] & PWM_NRFX_CH_POLARITY_MASK)
    2e0e:	f40a 4a00 	and.w	sl, sl, #32768	; 0x8000
		| (pulse_cycles >> data->prescaler));
    2e12:	ea42 020a 	orr.w	r2, r2, sl
    2e16:	b292      	uxth	r2, r2
	data->current[channel] = (
    2e18:	f8a9 2004 	strh.w	r2, [r9, #4]
	uint16_t pulse_cycle =
    2e1c:	f3c2 020e 	ubfx	r2, r2, #0, #15
	return (pulse_cycle > 0 && pulse_cycle < data->countertop);
    2e20:	b11a      	cbz	r2, 2e2a <pwm_nrfx_pin_set+0x142>
    2e22:	f8b1 c00c 	ldrh.w	ip, [r1, #12]
    2e26:	4594      	cmp	ip, r2
    2e28:	d881      	bhi.n	2d2e <pwm_nrfx_pin_set+0x46>
			config->initial_config.output_pins[channel]
    2e2a:	1932      	adds	r2, r6, r4
    2e2c:	f007 001f 	and.w	r0, r7, #31
    2e30:	f992 2008 	ldrsb.w	r2, [r2, #8]
		bool pulse_0_and_not_inverted =
    2e34:	097f      	lsrs	r7, r7, #5
			&& !channel_inverted_state;
    2e36:	2b00      	cmp	r3, #0
    2e38:	f43f af7d 	beq.w	2d36 <pwm_nrfx_pin_set+0x4e>
			&& channel_inverted_state;
    2e3c:	4545      	cmp	r5, r8
    2e3e:	d806      	bhi.n	2e4e <pwm_nrfx_pin_set+0x166>
    2e40:	2a00      	cmp	r2, #0
    2e42:	f6ff af7b 	blt.w	2d3c <pwm_nrfx_pin_set+0x54>
    2e46:	e002      	b.n	2e4e <pwm_nrfx_pin_set+0x166>
		if (pulse_0_and_not_inverted || pulse_100_and_inverted) {
    2e48:	2a00      	cmp	r2, #0
    2e4a:	f6bf af77 	bge.w	2d3c <pwm_nrfx_pin_set+0x54>
        case 0: return NRF_P0;
    2e4e:	2f01      	cmp	r7, #1
    2e50:	4b04      	ldr	r3, [pc, #16]	; (2e64 <pwm_nrfx_pin_set+0x17c>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    2e52:	f04f 0201 	mov.w	r2, #1
        case 0: return NRF_P0;
    2e56:	bf18      	it	ne
    2e58:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    2e5c:	4082      	lsls	r2, r0
    p_reg->OUTSET = set_mask;
    2e5e:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    2e62:	e775      	b.n	2d50 <pwm_nrfx_pin_set+0x68>
    2e64:	50000300 	.word	0x50000300

00002e68 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    2e68:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    2e6a:	794b      	ldrb	r3, [r1, #5]
    2e6c:	2b01      	cmp	r3, #1
    2e6e:	d026      	beq.n	2ebe <uarte_nrfx_configure+0x56>
    2e70:	2b03      	cmp	r3, #3
    2e72:	d121      	bne.n	2eb8 <uarte_nrfx_configure+0x50>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    2e74:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    2e76:	798b      	ldrb	r3, [r1, #6]
    2e78:	2b03      	cmp	r3, #3
    2e7a:	d11d      	bne.n	2eb8 <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    2e7c:	79cc      	ldrb	r4, [r1, #7]
    2e7e:	b10c      	cbz	r4, 2e84 <uarte_nrfx_configure+0x1c>
    2e80:	2c01      	cmp	r4, #1
    2e82:	d119      	bne.n	2eb8 <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    2e84:	790a      	ldrb	r2, [r1, #4]
    2e86:	b112      	cbz	r2, 2e8e <uarte_nrfx_configure+0x26>
    2e88:	2a02      	cmp	r2, #2
    2e8a:	d115      	bne.n	2eb8 <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    2e8c:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    2e8e:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    2e90:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    2e92:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    2e96:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
    2e98:	d065      	beq.n	2f66 <uarte_nrfx_configure+0xfe>
    2e9a:	d82d      	bhi.n	2ef8 <uarte_nrfx_configure+0x90>
    2e9c:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    2ea0:	d064      	beq.n	2f6c <uarte_nrfx_configure+0x104>
    2ea2:	d816      	bhi.n	2ed2 <uarte_nrfx_configure+0x6a>
    2ea4:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    2ea8:	d062      	beq.n	2f70 <uarte_nrfx_configure+0x108>
    2eaa:	d80a      	bhi.n	2ec2 <uarte_nrfx_configure+0x5a>
    2eac:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    2eb0:	d061      	beq.n	2f76 <uarte_nrfx_configure+0x10e>
    2eb2:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    2eb6:	d061      	beq.n	2f7c <uarte_nrfx_configure+0x114>
    2eb8:	f06f 0085 	mvn.w	r0, #133	; 0x85
    2ebc:	e052      	b.n	2f64 <uarte_nrfx_configure+0xfc>
	switch (cfg->stop_bits) {
    2ebe:	2600      	movs	r6, #0
    2ec0:	e7d9      	b.n	2e76 <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    2ec2:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    2ec6:	d05c      	beq.n	2f82 <uarte_nrfx_configure+0x11a>
    2ec8:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    2ecc:	d1f4      	bne.n	2eb8 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    2ece:	4b37      	ldr	r3, [pc, #220]	; (2fac <uarte_nrfx_configure+0x144>)
    2ed0:	e03c      	b.n	2f4c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    2ed2:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    2ed6:	d057      	beq.n	2f88 <uarte_nrfx_configure+0x120>
    2ed8:	d807      	bhi.n	2eea <uarte_nrfx_configure+0x82>
    2eda:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    2ede:	d055      	beq.n	2f8c <uarte_nrfx_configure+0x124>
    2ee0:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    2ee4:	d1e8      	bne.n	2eb8 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    2ee6:	4b32      	ldr	r3, [pc, #200]	; (2fb0 <uarte_nrfx_configure+0x148>)
    2ee8:	e030      	b.n	2f4c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    2eea:	f647 2712 	movw	r7, #31250	; 0x7a12
    2eee:	42bb      	cmp	r3, r7
    2ef0:	d1e2      	bne.n	2eb8 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    2ef2:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    2ef6:	e029      	b.n	2f4c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    2ef8:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    2efc:	d048      	beq.n	2f90 <uarte_nrfx_configure+0x128>
    2efe:	d813      	bhi.n	2f28 <uarte_nrfx_configure+0xc0>
    2f00:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    2f04:	d047      	beq.n	2f96 <uarte_nrfx_configure+0x12e>
    2f06:	d809      	bhi.n	2f1c <uarte_nrfx_configure+0xb4>
    2f08:	f64d 27c0 	movw	r7, #56000	; 0xdac0
    2f0c:	42bb      	cmp	r3, r7
    2f0e:	d044      	beq.n	2f9a <uarte_nrfx_configure+0x132>
    2f10:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    2f14:	d1d0      	bne.n	2eb8 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    2f16:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    2f1a:	e017      	b.n	2f4c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    2f1c:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    2f20:	d1ca      	bne.n	2eb8 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    2f22:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    2f26:	e011      	b.n	2f4c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    2f28:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    2f2c:	d038      	beq.n	2fa0 <uarte_nrfx_configure+0x138>
    2f2e:	d808      	bhi.n	2f42 <uarte_nrfx_configure+0xda>
    2f30:	4f20      	ldr	r7, [pc, #128]	; (2fb4 <uarte_nrfx_configure+0x14c>)
    2f32:	42bb      	cmp	r3, r7
    2f34:	d037      	beq.n	2fa6 <uarte_nrfx_configure+0x13e>
    2f36:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    2f3a:	d1bd      	bne.n	2eb8 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    2f3c:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    2f40:	e004      	b.n	2f4c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    2f42:	4f1d      	ldr	r7, [pc, #116]	; (2fb8 <uarte_nrfx_configure+0x150>)
    2f44:	42bb      	cmp	r3, r7
    2f46:	d1b7      	bne.n	2eb8 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    2f48:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    2f4c:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
    2f50:	6903      	ldr	r3, [r0, #16]
    2f52:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
    2f54:	4334      	orrs	r4, r6
    2f56:	4322      	orrs	r2, r4
    2f58:	3304      	adds	r3, #4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    2f5a:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    2f5e:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    2f62:	2000      	movs	r0, #0
}
    2f64:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    2f66:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    2f6a:	e7ef      	b.n	2f4c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    2f6c:	4b13      	ldr	r3, [pc, #76]	; (2fbc <uarte_nrfx_configure+0x154>)
    2f6e:	e7ed      	b.n	2f4c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    2f70:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    2f74:	e7ea      	b.n	2f4c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
    2f76:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    2f7a:	e7e7      	b.n	2f4c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    2f7c:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    2f80:	e7e4      	b.n	2f4c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    2f82:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    2f86:	e7e1      	b.n	2f4c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    2f88:	4b0d      	ldr	r3, [pc, #52]	; (2fc0 <uarte_nrfx_configure+0x158>)
    2f8a:	e7df      	b.n	2f4c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    2f8c:	4b0d      	ldr	r3, [pc, #52]	; (2fc4 <uarte_nrfx_configure+0x15c>)
    2f8e:	e7dd      	b.n	2f4c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    2f90:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    2f94:	e7da      	b.n	2f4c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    2f96:	4b0c      	ldr	r3, [pc, #48]	; (2fc8 <uarte_nrfx_configure+0x160>)
    2f98:	e7d8      	b.n	2f4c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    2f9a:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    2f9e:	e7d5      	b.n	2f4c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    2fa0:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    2fa4:	e7d2      	b.n	2f4c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    2fa6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    2faa:	e7cf      	b.n	2f4c <uarte_nrfx_configure+0xe4>
    2fac:	0013b000 	.word	0x0013b000
    2fb0:	004ea000 	.word	0x004ea000
    2fb4:	0003d090 	.word	0x0003d090
    2fb8:	000f4240 	.word	0x000f4240
    2fbc:	00275000 	.word	0x00275000
    2fc0:	0075c000 	.word	0x0075c000
    2fc4:	003af000 	.word	0x003af000
    2fc8:	013a9000 	.word	0x013a9000

00002fcc <nrf_gpio_cfg_input>:
    *p_pin = pin_number & 0x1F;
    2fcc:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
    2fd0:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    2fd2:	2801      	cmp	r0, #1
        case 1: return NRF_P1;
    2fd4:	4b04      	ldr	r3, [pc, #16]	; (2fe8 <nrf_gpio_cfg_input+0x1c>)
    reg->PIN_CNF[pin_number] = cnf;
    2fd6:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
        case 1: return NRF_P1;
    2fda:	bf18      	it	ne
    2fdc:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    2fe0:	0089      	lsls	r1, r1, #2
    reg->PIN_CNF[pin_number] = cnf;
    2fe2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    2fe6:	4770      	bx	lr
    2fe8:	50000300 	.word	0x50000300

00002fec <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    2fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = get_dev_data(dev);
    2fee:	6906      	ldr	r6, [r0, #16]
{
    2ff0:	4605      	mov	r5, r0
    2ff2:	460f      	mov	r7, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    2ff4:	f003 fa23 	bl	643e <k_is_in_isr>
    2ff8:	b910      	cbnz	r0, 3000 <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
    2ffa:	4b2c      	ldr	r3, [pc, #176]	; (30ac <uarte_nrfx_poll_out+0xc0>)
	int key;

	if (isr_mode) {
    2ffc:	781b      	ldrb	r3, [r3, #0]
    2ffe:	b983      	cbnz	r3, 3022 <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    3000:	f04f 0320 	mov.w	r3, #32
    3004:	f3ef 8411 	mrs	r4, BASEPRI
    3008:	f383 8812 	msr	BASEPRI_MAX, r3
    300c:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
    3010:	4628      	mov	r0, r5
    3012:	f002 ffce 	bl	5fb2 <is_tx_ready>
    3016:	bb28      	cbnz	r0, 3064 <uarte_nrfx_poll_out+0x78>
	__asm__ volatile(
    3018:	f384 8811 	msr	BASEPRI, r4
    301c:	f3bf 8f6f 	isb	sy
}
    3020:	e7ee      	b.n	3000 <uarte_nrfx_poll_out+0x14>
{
    3022:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    3024:	4628      	mov	r0, r5
    3026:	f002 ffc4 	bl	5fb2 <is_tx_ready>
    302a:	b970      	cbnz	r0, 304a <uarte_nrfx_poll_out+0x5e>
    302c:	2001      	movs	r0, #1
    302e:	f003 f81c 	bl	606a <nrfx_busy_wait>
    3032:	3c01      	subs	r4, #1
    3034:	d1f6      	bne.n	3024 <uarte_nrfx_poll_out+0x38>
    3036:	2100      	movs	r1, #0
    3038:	2021      	movs	r0, #33	; 0x21
    303a:	f001 fef7 	bl	4e2c <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    303e:	e7f0      	b.n	3022 <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    3040:	f384 8811 	msr	BASEPRI, r4
    3044:	f3bf 8f6f 	isb	sy
}
    3048:	e7f5      	b.n	3036 <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
    304a:	f04f 0320 	mov.w	r3, #32
    304e:	f3ef 8411 	mrs	r4, BASEPRI
    3052:	f383 8812 	msr	BASEPRI_MAX, r3
    3056:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    305a:	4628      	mov	r0, r5
    305c:	f002 ffa9 	bl	5fb2 <is_tx_ready>
    3060:	2800      	cmp	r0, #0
    3062:	d0ed      	beq.n	3040 <uarte_nrfx_poll_out+0x54>
		}
	} else {
		key = wait_tx_ready(dev);
	}

	data->char_out = c;
    3064:	f806 7f10 	strb.w	r7, [r6, #16]!
	const struct uarte_nrfx_config *config = get_dev_config(dev);
    3068:	6869      	ldr	r1, [r5, #4]
	return config->uarte_regs;
    306a:	680b      	ldr	r3, [r1, #0]
NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    p_reg->TXD.MAXCNT = length;
    306c:	2201      	movs	r2, #1
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    306e:	f8c3 6544 	str.w	r6, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    3072:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3076:	2200      	movs	r2, #0
    3078:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    307c:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    3080:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    3084:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    3088:	684a      	ldr	r2, [r1, #4]
    308a:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    308c:	bf41      	itttt	mi
    308e:	2208      	movmi	r2, #8
    3090:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
    3094:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
    3098:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    309c:	2201      	movs	r2, #1
    309e:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
    30a0:	f384 8811 	msr	BASEPRI, r4
    30a4:	f3bf 8f6f 	isb	sy
	tx_start(dev, &data->char_out, 1);

	irq_unlock(key);
}
    30a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    30aa:	bf00      	nop
    30ac:	2000107d 	.word	0x2000107d

000030b0 <nrf_gpio_cfg_output>:
    *p_pin = pin_number & 0x1F;
    30b0:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
    30b4:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    30b6:	2801      	cmp	r0, #1
        case 1: return NRF_P1;
    30b8:	4b04      	ldr	r3, [pc, #16]	; (30cc <nrf_gpio_cfg_output+0x1c>)
    reg->PIN_CNF[pin_number] = cnf;
    30ba:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
        case 1: return NRF_P1;
    30be:	bf18      	it	ne
    30c0:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    30c4:	2103      	movs	r1, #3
    30c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    30ca:	4770      	bx	lr
    30cc:	50000300 	.word	0x50000300

000030d0 <nrf_gpio_pin_set>:
    *p_pin = pin_number & 0x1F;
    30d0:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
    30d4:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    30d6:	2801      	cmp	r0, #1
        case 1: return NRF_P1;
    30d8:	4b04      	ldr	r3, [pc, #16]	; (30ec <nrf_gpio_pin_set+0x1c>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    30da:	f04f 0201 	mov.w	r2, #1
        case 1: return NRF_P1;
    30de:	bf18      	it	ne
    30e0:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    30e4:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
    30e6:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
}
    30ea:	4770      	bx	lr
    30ec:	50000300 	.word	0x50000300

000030f0 <uarte_instance_init.isra.0>:
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
    30f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct uarte_nrfx_config *config = get_dev_config(dev);
    30f4:	f8d0 8004 	ldr.w	r8, [r0, #4]
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = get_dev_data(dev);
    30f8:	6907      	ldr	r7, [r0, #16]
	return config->uarte_regs;
    30fa:	f8d8 4000 	ldr.w	r4, [r8]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    30fe:	2300      	movs	r3, #0
    3100:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);

	nrf_uarte_disable(uarte);

	data->dev = dev;
    3104:	6038      	str	r0, [r7, #0]
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);
    3106:	6845      	ldr	r5, [r0, #4]
static int uarte_instance_init(const struct device *dev,
    3108:	4606      	mov	r6, r0
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    310a:	68e8      	ldr	r0, [r5, #12]
    310c:	1c42      	adds	r2, r0, #1
    310e:	d004      	beq.n	311a <uarte_instance_init.isra.0+0x2a>
        nrf_gpio_pin_set(pin_number);
    3110:	f7ff ffde 	bl	30d0 <nrf_gpio_pin_set>
			nrf_gpio_cfg_output(cfg->tx_pin);
    3114:	68e8      	ldr	r0, [r5, #12]
    3116:	f7ff ffcb 	bl	30b0 <nrf_gpio_cfg_output>
		if (cfg->rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    311a:	6928      	ldr	r0, [r5, #16]
    311c:	1c43      	adds	r3, r0, #1
    311e:	d006      	beq.n	312e <uarte_instance_init.isra.0+0x3e>
			nrf_gpio_cfg_input(cfg->rx_pin,
    3120:	7f2b      	ldrb	r3, [r5, #28]
    3122:	2b00      	cmp	r3, #0
    3124:	bf14      	ite	ne
    3126:	2103      	movne	r1, #3
    3128:	2100      	moveq	r1, #0
    312a:	f7ff ff4f 	bl	2fcc <nrf_gpio_cfg_input>
		if (cfg->rts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    312e:	6968      	ldr	r0, [r5, #20]
    3130:	1c42      	adds	r2, r0, #1
    3132:	d004      	beq.n	313e <uarte_instance_init.isra.0+0x4e>
    3134:	f7ff ffcc 	bl	30d0 <nrf_gpio_pin_set>
			nrf_gpio_cfg_output(cfg->rts_pin);
    3138:	6968      	ldr	r0, [r5, #20]
    313a:	f7ff ffb9 	bl	30b0 <nrf_gpio_cfg_output>
		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    313e:	69a8      	ldr	r0, [r5, #24]
    3140:	1c43      	adds	r3, r0, #1
    3142:	d006      	beq.n	3152 <uarte_instance_init.isra.0+0x62>
			nrf_gpio_cfg_input(cfg->cts_pin,
    3144:	7f6b      	ldrb	r3, [r5, #29]
    3146:	2b00      	cmp	r3, #0
    3148:	bf14      	ite	ne
    314a:	2103      	movne	r1, #3
    314c:	2100      	moveq	r1, #0
    314e:	f7ff ff3d 	bl	2fcc <nrf_gpio_cfg_input>
	nrf_uarte_txrx_pins_set(cfg->uarte_regs, cfg->tx_pin, cfg->rx_pin);
    3152:	e9d5 1203 	ldrd	r1, r2, [r5, #12]
    3156:	682b      	ldr	r3, [r5, #0]
    p_reg->PSEL.TXD = pseltxd;
    3158:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
    315c:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	nrf_uarte_hwfc_pins_set(cfg->uarte_regs, cfg->rts_pin, cfg->cts_pin);
    3160:	e9d5 1205 	ldrd	r1, r2, [r5, #20]
    p_reg->PSEL.RTS = pselrts;
    3164:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    3168:	6931      	ldr	r1, [r6, #16]
    p_reg->PSEL.CTS = pselcts;
    316a:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    316e:	3104      	adds	r1, #4
    3170:	4630      	mov	r0, r6
    3172:	f7ff fe79 	bl	2e68 <uarte_nrfx_configure>
	if (err) {
    3176:	4605      	mov	r5, r0
    3178:	2800      	cmp	r0, #0
    317a:	d146      	bne.n	320a <uarte_instance_init.isra.0+0x11a>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    317c:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    3180:	0799      	lsls	r1, r3, #30
    3182:	d519      	bpl.n	31b8 <uarte_instance_init.isra.0+0xc8>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    3184:	f107 0012 	add.w	r0, r7, #18
    3188:	f000 fee2 	bl	3f50 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    318c:	4b22      	ldr	r3, [pc, #136]	; (3218 <uarte_instance_init.isra.0+0x128>)
    318e:	4298      	cmp	r0, r3
    3190:	d13e      	bne.n	3210 <uarte_instance_init.isra.0+0x120>
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    3192:	7cb8      	ldrb	r0, [r7, #18]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    3194:	00c3      	lsls	r3, r0, #3
    3196:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    319a:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
    319e:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    31a2:	f504 7190 	add.w	r1, r4, #288	; 0x120
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    31a6:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    31aa:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
    31ae:	4a1b      	ldr	r2, [pc, #108]	; (321c <uarte_instance_init.isra.0+0x12c>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    31b0:	2301      	movs	r3, #1
    31b2:	4083      	lsls	r3, r0
    31b4:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    31b8:	2308      	movs	r3, #8
    31ba:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (!cfg->disable_rx) {
    31be:	f898 3008 	ldrb.w	r3, [r8, #8]
    31c2:	b95b      	cbnz	r3, 31dc <uarte_instance_init.isra.0+0xec>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    31c4:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    31c8:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    31cc:	f107 0311 	add.w	r3, r7, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    31d0:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    31d4:	2301      	movs	r3, #1
    31d6:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    31da:	6023      	str	r3, [r4, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    31dc:	f8d8 3004 	ldr.w	r3, [r8, #4]
    31e0:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
    31e2:	bf5c      	itt	pl
    31e4:	f44f 7280 	movpl.w	r2, #256	; 0x100
    31e8:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    31ec:	06db      	lsls	r3, r3, #27
    31ee:	bf44      	itt	mi
    31f0:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    31f4:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    31f8:	3710      	adds	r7, #16
    p_reg->TXD.MAXCNT = length;
    31fa:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    31fc:	f8c4 7544 	str.w	r7, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    3200:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3204:	2301      	movs	r3, #1
    3206:	60a3      	str	r3, [r4, #8]
    3208:	60e3      	str	r3, [r4, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    320a:	4628      	mov	r0, r5
    320c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EIO;
    3210:	f06f 0504 	mvn.w	r5, #4
    3214:	e7f9      	b.n	320a <uarte_instance_init.isra.0+0x11a>
    3216:	bf00      	nop
    3218:	0bad0000 	.word	0x0bad0000
    321c:	4001f000 	.word	0x4001f000

00003220 <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    3220:	4919      	ldr	r1, [pc, #100]	; (3288 <sys_clock_timeout_handler+0x68>)
{
    3222:	b570      	push	{r4, r5, r6, lr}
    3224:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
    3226:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    322a:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
    322c:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    3230:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    3234:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
    3236:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    323a:	f04f 0500 	mov.w	r5, #0
    323e:	d20a      	bcs.n	3256 <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    3240:	4b12      	ldr	r3, [pc, #72]	; (328c <sys_clock_timeout_handler+0x6c>)
    3242:	6819      	ldr	r1, [r3, #0]
    3244:	060a      	lsls	r2, r1, #24
    3246:	0a0b      	lsrs	r3, r1, #8
    3248:	1992      	adds	r2, r2, r6
    324a:	4911      	ldr	r1, [pc, #68]	; (3290 <sys_clock_timeout_handler+0x70>)
    324c:	f143 0300 	adc.w	r3, r3, #0
    3250:	e9c1 2300 	strd	r2, r3, [r1]
		return true;
    3254:	2501      	movs	r5, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    3256:	f002 f839 	bl	52cc <sys_clock_announce>
    p_reg->CC[ch] = cc_val;
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
    325a:	00a3      	lsls	r3, r4, #2
    325c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    3260:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    3264:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
    3268:	42b2      	cmp	r2, r6
    326a:	d10b      	bne.n	3284 <sys_clock_timeout_handler+0x64>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
    326c:	b91d      	cbnz	r5, 3276 <sys_clock_timeout_handler+0x56>
    p_reg->CC[ch] = cc_val;
    326e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    3272:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    3276:	4b07      	ldr	r3, [pc, #28]	; (3294 <sys_clock_timeout_handler+0x74>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3278:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    327c:	fa00 f404 	lsl.w	r4, r0, r4
    3280:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
    3284:	bd70      	pop	{r4, r5, r6, pc}
    3286:	bf00      	nop
    3288:	200003e0 	.word	0x200003e0
    328c:	20000b58 	.word	0x20000b58
    3290:	200003c8 	.word	0x200003c8
    3294:	40011000 	.word	0x40011000

00003298 <compare_int_lock>:
{
    3298:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    329a:	2301      	movs	r3, #1
    329c:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    329e:	4a11      	ldr	r2, [pc, #68]	; (32e4 <compare_int_lock+0x4c>)
    32a0:	f3bf 8f5b 	dmb	ish
    32a4:	43dc      	mvns	r4, r3
    32a6:	e852 1f00 	ldrex	r1, [r2]
    32aa:	ea01 0c04 	and.w	ip, r1, r4
    32ae:	e842 ce00 	strex	lr, ip, [r2]
    32b2:	f1be 0f00 	cmp.w	lr, #0
    32b6:	d1f6      	bne.n	32a6 <compare_int_lock+0xe>
    32b8:	f3bf 8f5b 	dmb	ish
	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    32bc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    32c0:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
    32c4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    32c8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    32cc:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    32d0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    32d4:	f3bf 8f6f 	isb	sy
	return prev & BIT(chan);
    32d8:	420b      	tst	r3, r1
}
    32da:	bf14      	ite	ne
    32dc:	2001      	movne	r0, #1
    32de:	2000      	moveq	r0, #0
    32e0:	bd10      	pop	{r4, pc}
    32e2:	bf00      	nop
    32e4:	20000b54 	.word	0x20000b54

000032e8 <compare_int_unlock.part.0>:
		atomic_or(&int_mask, BIT(chan));
    32e8:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    32ea:	4a12      	ldr	r2, [pc, #72]	; (3334 <compare_int_unlock.part.0+0x4c>)
    32ec:	f3bf 8f5b 	dmb	ish
    32f0:	4083      	lsls	r3, r0
    32f2:	e852 1f00 	ldrex	r1, [r2]
    32f6:	4319      	orrs	r1, r3
    32f8:	e842 1c00 	strex	ip, r1, [r2]
    32fc:	f1bc 0f00 	cmp.w	ip, #0
    3300:	d1f7      	bne.n	32f2 <compare_int_unlock.part.0+0xa>
    3302:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
    3306:	4a0c      	ldr	r2, [pc, #48]	; (3338 <compare_int_unlock.part.0+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3308:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    330c:	4083      	lsls	r3, r0
    330e:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    3312:	4b0a      	ldr	r3, [pc, #40]	; (333c <compare_int_unlock.part.0+0x54>)
    3314:	f3bf 8f5b 	dmb	ish
    3318:	681b      	ldr	r3, [r3, #0]
    331a:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    331e:	fa23 f000 	lsr.w	r0, r3, r0
    3322:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3324:	bf42      	ittt	mi
    3326:	4b06      	ldrmi	r3, [pc, #24]	; (3340 <compare_int_unlock.part.0+0x58>)
    3328:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
    332c:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    3330:	4770      	bx	lr
    3332:	bf00      	nop
    3334:	20000b54 	.word	0x20000b54
    3338:	40011000 	.word	0x40011000
    333c:	20000b50 	.word	0x20000b50
    3340:	e000e100 	.word	0xe000e100

00003344 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    3344:	4b0d      	ldr	r3, [pc, #52]	; (337c <z_nrf_rtc_timer_read+0x38>)
    3346:	681b      	ldr	r3, [r3, #0]
    3348:	0a19      	lsrs	r1, r3, #8
    334a:	0618      	lsls	r0, r3, #24
  __ASM volatile ("dmb 0xF":::"memory");
    334c:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
    3350:	4b0b      	ldr	r3, [pc, #44]	; (3380 <z_nrf_rtc_timer_read+0x3c>)
    3352:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    3356:	18c0      	adds	r0, r0, r3
    3358:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    335c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    3360:	d20a      	bcs.n	3378 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    3362:	4b08      	ldr	r3, [pc, #32]	; (3384 <z_nrf_rtc_timer_read+0x40>)
    3364:	e9d3 2300 	ldrd	r2, r3, [r3]
    3368:	4299      	cmp	r1, r3
    336a:	bf08      	it	eq
    336c:	4290      	cmpeq	r0, r2
    336e:	d203      	bcs.n	3378 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    3370:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    3374:	f141 0100 	adc.w	r1, r1, #0
}
    3378:	4770      	bx	lr
    337a:	bf00      	nop
    337c:	20000b58 	.word	0x20000b58
    3380:	40011000 	.word	0x40011000
    3384:	200003c8 	.word	0x200003c8

00003388 <compare_set>:
{
    3388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    338c:	b085      	sub	sp, #20
    338e:	4616      	mov	r6, r2
    3390:	461f      	mov	r7, r3
    3392:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
    3394:	f7ff ff80 	bl	3298 <compare_int_lock>
    3398:	9001      	str	r0, [sp, #4]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    339a:	f7ff ffd3 	bl	3344 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    339e:	42b9      	cmp	r1, r7
    33a0:	bf08      	it	eq
    33a2:	42b0      	cmpeq	r0, r6
    33a4:	d27f      	bcs.n	34a6 <compare_set+0x11e>
		if (target_time - curr_time > COUNTER_SPAN) {
    33a6:	ebb6 0800 	subs.w	r8, r6, r0
    33aa:	eb67 0901 	sbc.w	r9, r7, r1
    33ae:	2300      	movs	r3, #0
    33b0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    33b4:	454b      	cmp	r3, r9
    33b6:	bf08      	it	eq
    33b8:	4542      	cmpeq	r2, r8
    33ba:	f0c0 8085 	bcc.w	34c8 <compare_set+0x140>
		if (target_time != cc_data[chan].target_time) {
    33be:	4b44      	ldr	r3, [pc, #272]	; (34d0 <compare_set+0x148>)
    33c0:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    33c4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    33c8:	429f      	cmp	r7, r3
    33ca:	bf08      	it	eq
    33cc:	4296      	cmpeq	r6, r2
    33ce:	d054      	beq.n	347a <compare_set+0xf2>
    33d0:	ea4f 0985 	mov.w	r9, r5, lsl #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    33d4:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
    33d8:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    33dc:	f105 0850 	add.w	r8, r5, #80	; 0x50
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    33e0:	fa0b f205 	lsl.w	r2, fp, r5
    33e4:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    33e8:	ea4f 0888 	mov.w	r8, r8, lsl #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    33ec:	fa1f f888 	uxth.w	r8, r8
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    33f0:	9202      	str	r2, [sp, #8]
     return p_reg->COUNTER;
    33f2:	4a38      	ldr	r2, [pc, #224]	; (34d4 <compare_set+0x14c>)
    return p_reg->CC[ch];
    33f4:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
	return absolute_time & COUNTER_MAX;
    33f8:	f026 437f 	bic.w	r3, r6, #4278190080	; 0xff000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    33fc:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
    3400:	f508 3888 	add.w	r8, r8, #69632	; 0x11000
	uint32_t cc_val = abs_val & COUNTER_MAX;
    3404:	461c      	mov	r4, r3
    3406:	4693      	mov	fp, r2
     return p_reg->COUNTER;
    3408:	f8d2 a504 	ldr.w	sl, [r2, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    340c:	eba0 000a 	sub.w	r0, r0, sl
    3410:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    3414:	f02a 417f 	bic.w	r1, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    3418:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
    341a:	f8c9 1540 	str.w	r1, [r9, #1344]	; 0x540
    341e:	d105      	bne.n	342c <compare_set+0xa4>
    3420:	9303      	str	r3, [sp, #12]
	z_impl_k_busy_wait(usec_to_wait);
    3422:	2013      	movs	r0, #19
    3424:	f003 f857 	bl	64d6 <z_impl_k_busy_wait>
    3428:	4a2a      	ldr	r2, [pc, #168]	; (34d4 <compare_set+0x14c>)
    342a:	9b03      	ldr	r3, [sp, #12]
    p_reg->EVTENSET = mask;
    342c:	9902      	ldr	r1, [sp, #8]
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    342e:	f10a 0c02 	add.w	ip, sl, #2
	return (a - b) & COUNTER_MAX;
    3432:	eba4 000c 	sub.w	r0, r4, ip
    3436:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
    343a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    343e:	bf88      	it	hi
    3440:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3442:	2000      	movs	r0, #0
    3444:	f8c8 0000 	str.w	r0, [r8]
    3448:	f8d8 0000 	ldr.w	r0, [r8]
    p_reg->EVTENSET = mask;
    344c:	f8cb 1344 	str.w	r1, [fp, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    3450:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    3454:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    3458:	f8db 0504 	ldr.w	r0, [fp, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    345c:	4582      	cmp	sl, r0
    345e:	d006      	beq.n	346e <compare_set+0xe6>
	return (a - b) & COUNTER_MAX;
    3460:	1a20      	subs	r0, r4, r0
    3462:	3802      	subs	r0, #2
    3464:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    3468:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    346c:	d819      	bhi.n	34a2 <compare_set+0x11a>
	return (a - b) & COUNTER_MAX;
    346e:	1ae4      	subs	r4, r4, r3
    3470:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
    3474:	1932      	adds	r2, r6, r4
    3476:	f147 0300 	adc.w	r3, r7, #0
	cc_data[chan].target_time = target_time;
    347a:	4c15      	ldr	r4, [pc, #84]	; (34d0 <compare_set+0x148>)
    347c:	0129      	lsls	r1, r5, #4
    347e:	eb04 1005 	add.w	r0, r4, r5, lsl #4
    3482:	e9c0 2302 	strd	r2, r3, [r0, #8]
	cc_data[chan].callback = handler;
    3486:	9a0e      	ldr	r2, [sp, #56]	; 0x38
	cc_data[chan].user_context = user_data;
    3488:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
	cc_data[chan].callback = handler;
    348a:	5062      	str	r2, [r4, r1]
	cc_data[chan].user_context = user_data;
    348c:	6043      	str	r3, [r0, #4]
	return ret;
    348e:	2400      	movs	r4, #0
	if (key) {
    3490:	9b01      	ldr	r3, [sp, #4]
    3492:	b113      	cbz	r3, 349a <compare_set+0x112>
    3494:	4628      	mov	r0, r5
    3496:	f7ff ff27 	bl	32e8 <compare_int_unlock.part.0>
}
    349a:	4620      	mov	r0, r4
    349c:	b005      	add	sp, #20
    349e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    34a2:	4620      	mov	r0, r4
    34a4:	e7b0      	b.n	3408 <compare_set+0x80>
		atomic_or(&force_isr_mask, BIT(chan));
    34a6:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    34a8:	4a0b      	ldr	r2, [pc, #44]	; (34d8 <compare_set+0x150>)
    34aa:	f3bf 8f5b 	dmb	ish
    34ae:	40ab      	lsls	r3, r5
    34b0:	e852 1f00 	ldrex	r1, [r2]
    34b4:	4319      	orrs	r1, r3
    34b6:	e842 1000 	strex	r0, r1, [r2]
    34ba:	2800      	cmp	r0, #0
    34bc:	d1f8      	bne.n	34b0 <compare_set+0x128>
    34be:	f3bf 8f5b 	dmb	ish
    34c2:	4632      	mov	r2, r6
    34c4:	463b      	mov	r3, r7
    34c6:	e7d8      	b.n	347a <compare_set+0xf2>
			return -EINVAL;
    34c8:	f06f 0415 	mvn.w	r4, #21
    34cc:	e7e0      	b.n	3490 <compare_set+0x108>
    34ce:	bf00      	nop
    34d0:	200003d0 	.word	0x200003d0
    34d4:	40011000 	.word	0x40011000
    34d8:	20000b50 	.word	0x20000b50

000034dc <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    34dc:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    34de:	4b19      	ldr	r3, [pc, #100]	; (3544 <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
    34e0:	4d19      	ldr	r5, [pc, #100]	; (3548 <sys_clock_driver_init+0x6c>)
    34e2:	2400      	movs	r4, #0
    34e4:	f04f 30ff 	mov.w	r0, #4294967295
    34e8:	f04f 31ff 	mov.w	r1, #4294967295
    34ec:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    34f0:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    34f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    34f8:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    34fc:	4b13      	ldr	r3, [pc, #76]	; (354c <sys_clock_driver_init+0x70>)
    34fe:	2602      	movs	r6, #2
    3500:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    3504:	2101      	movs	r1, #1
    3506:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
    350a:	2011      	movs	r0, #17
    350c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    3510:	4622      	mov	r2, r4
    3512:	f7fe fb73 	bl	1bfc <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    3516:	2011      	movs	r0, #17
    3518:	f7fe fb52 	bl	1bc0 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    351c:	4a0c      	ldr	r2, [pc, #48]	; (3550 <sys_clock_driver_init+0x74>)
    351e:	2301      	movs	r3, #1
    3520:	6013      	str	r3, [r2, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    3522:	4a0c      	ldr	r2, [pc, #48]	; (3554 <sys_clock_driver_init+0x78>)
    3524:	602b      	str	r3, [r5, #0]
    3526:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    3528:	4b0b      	ldr	r3, [pc, #44]	; (3558 <sys_clock_driver_init+0x7c>)
    352a:	4a0c      	ldr	r2, [pc, #48]	; (355c <sys_clock_driver_init+0x80>)
    352c:	9300      	str	r3, [sp, #0]
    352e:	9401      	str	r4, [sp, #4]
    3530:	2300      	movs	r3, #0
    3532:	4620      	mov	r0, r4
    3534:	f7ff ff28 	bl	3388 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    3538:	4630      	mov	r0, r6
    353a:	f7ff f99b 	bl	2874 <z_nrf_clock_control_lf_on>

	return 0;
}
    353e:	4620      	mov	r0, r4
    3540:	b002      	add	sp, #8
    3542:	bd70      	pop	{r4, r5, r6, pc}
    3544:	200003d0 	.word	0x200003d0
    3548:	40011000 	.word	0x40011000
    354c:	e000e100 	.word	0xe000e100
    3550:	40011008 	.word	0x40011008
    3554:	20000b54 	.word	0x20000b54
    3558:	00003221 	.word	0x00003221
    355c:	007fffff 	.word	0x007fffff

00003560 <rtc_nrf_isr>:
{
    3560:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    3564:	4c34      	ldr	r4, [pc, #208]	; (3638 <rtc_nrf_isr+0xd8>)
    3566:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    356a:	079a      	lsls	r2, r3, #30
    356c:	d509      	bpl.n	3582 <rtc_nrf_isr+0x22>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    356e:	4b33      	ldr	r3, [pc, #204]	; (363c <rtc_nrf_isr+0xdc>)
    3570:	681a      	ldr	r2, [r3, #0]
    3572:	b132      	cbz	r2, 3582 <rtc_nrf_isr+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3574:	2200      	movs	r2, #0
    3576:	601a      	str	r2, [r3, #0]
		overflow_cnt++;
    3578:	4a31      	ldr	r2, [pc, #196]	; (3640 <rtc_nrf_isr+0xe0>)
    357a:	681b      	ldr	r3, [r3, #0]
    357c:	6813      	ldr	r3, [r2, #0]
    357e:	3301      	adds	r3, #1
    3580:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    3582:	f04f 0320 	mov.w	r3, #32
    3586:	f3ef 8211 	mrs	r2, BASEPRI
    358a:	f383 8812 	msr	BASEPRI_MAX, r3
    358e:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
    3592:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    3596:	03db      	lsls	r3, r3, #15
    3598:	d512      	bpl.n	35c0 <rtc_nrf_isr+0x60>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    359a:	f3bf 8f5b 	dmb	ish
    359e:	4b29      	ldr	r3, [pc, #164]	; (3644 <rtc_nrf_isr+0xe4>)
    35a0:	e853 1f00 	ldrex	r1, [r3]
    35a4:	f021 0001 	bic.w	r0, r1, #1
    35a8:	e843 0600 	strex	r6, r0, [r3]
    35ac:	2e00      	cmp	r6, #0
    35ae:	d1f7      	bne.n	35a0 <rtc_nrf_isr+0x40>
    35b0:	f3bf 8f5b 	dmb	ish
    35b4:	4b24      	ldr	r3, [pc, #144]	; (3648 <rtc_nrf_isr+0xe8>)
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    35b6:	2900      	cmp	r1, #0
    35b8:	d136      	bne.n	3628 <rtc_nrf_isr+0xc8>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    35ba:	6819      	ldr	r1, [r3, #0]
		if (result) {
    35bc:	2900      	cmp	r1, #0
    35be:	d133      	bne.n	3628 <rtc_nrf_isr+0xc8>
{
    35c0:	2300      	movs	r3, #0
	__asm__ volatile(
    35c2:	f382 8811 	msr	BASEPRI, r2
    35c6:	f3bf 8f6f 	isb	sy
	if (channel_processing_check_and_clear(chan)) {
    35ca:	b353      	cbz	r3, 3622 <rtc_nrf_isr+0xc2>
		curr_time = z_nrf_rtc_timer_read();
    35cc:	f7ff feba 	bl	3344 <z_nrf_rtc_timer_read>
    35d0:	4606      	mov	r6, r0
	__asm__ volatile(
    35d2:	f04f 0320 	mov.w	r3, #32
    35d6:	f3ef 8011 	mrs	r0, BASEPRI
    35da:	f383 8812 	msr	BASEPRI_MAX, r3
    35de:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    35e2:	4b1a      	ldr	r3, [pc, #104]	; (364c <rtc_nrf_isr+0xec>)
    35e4:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
    35e8:	4549      	cmp	r1, r9
    35ea:	bf08      	it	eq
    35ec:	4546      	cmpeq	r6, r8
    35ee:	f04f 0200 	mov.w	r2, #0
    35f2:	d31e      	bcc.n	3632 <rtc_nrf_isr+0xd2>
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    35f4:	f04f 36ff 	mov.w	r6, #4294967295
    35f8:	f04f 37ff 	mov.w	r7, #4294967295
			user_context = cc_data[chan].user_context;
    35fc:	e9d3 1500 	ldrd	r1, r5, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    3600:	e9c3 6702 	strd	r6, r7, [r3, #8]
			cc_data[chan].callback = NULL;
    3604:	601a      	str	r2, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    3606:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    360a:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
	__asm__ volatile(
    360e:	f380 8811 	msr	BASEPRI, r0
    3612:	f3bf 8f6f 	isb	sy
		if (handler) {
    3616:	b121      	cbz	r1, 3622 <rtc_nrf_isr+0xc2>
			handler(chan, expire_time, user_context);
    3618:	9500      	str	r5, [sp, #0]
    361a:	4642      	mov	r2, r8
    361c:	464b      	mov	r3, r9
    361e:	2000      	movs	r0, #0
    3620:	4788      	blx	r1
}
    3622:	b003      	add	sp, #12
    3624:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3628:	2100      	movs	r1, #0
    362a:	6019      	str	r1, [r3, #0]
    362c:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    362e:	2301      	movs	r3, #1
}
    3630:	e7c7      	b.n	35c2 <rtc_nrf_isr+0x62>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    3632:	4611      	mov	r1, r2
    3634:	e7eb      	b.n	360e <rtc_nrf_isr+0xae>
    3636:	bf00      	nop
    3638:	40011000 	.word	0x40011000
    363c:	40011104 	.word	0x40011104
    3640:	20000b58 	.word	0x20000b58
    3644:	20000b50 	.word	0x20000b50
    3648:	40011140 	.word	0x40011140
    364c:	200003d0 	.word	0x200003d0

00003650 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    3650:	4b14      	ldr	r3, [pc, #80]	; (36a4 <sys_clock_set_timeout+0x54>)
{
    3652:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    3654:	f1b0 3fff 	cmp.w	r0, #4294967295
    3658:	bf08      	it	eq
    365a:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    365c:	1e44      	subs	r4, r0, #1
    365e:	2c00      	cmp	r4, #0
    3660:	dd1e      	ble.n	36a0 <sys_clock_set_timeout+0x50>
    3662:	429c      	cmp	r4, r3
    3664:	bfa8      	it	ge
    3666:	461c      	movge	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    3668:	f7ff fe6c 	bl	3344 <z_nrf_rtc_timer_read>
    366c:	4b0e      	ldr	r3, [pc, #56]	; (36a8 <sys_clock_set_timeout+0x58>)
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    366e:	490f      	ldr	r1, [pc, #60]	; (36ac <sys_clock_set_timeout+0x5c>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    3670:	e9d3 2300 	ldrd	r2, r3, [r3]
    3674:	1a80      	subs	r0, r0, r2
		ticks = 0;
    3676:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    367a:	bf28      	it	cs
    367c:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    367e:	3001      	adds	r0, #1
    3680:	4404      	add	r4, r0
	uint64_t target_time = cyc + last_count;
    3682:	4808      	ldr	r0, [pc, #32]	; (36a4 <sys_clock_set_timeout+0x54>)
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    3684:	9100      	str	r1, [sp, #0]
	uint64_t target_time = cyc + last_count;
    3686:	4284      	cmp	r4, r0
    3688:	bf28      	it	cs
    368a:	4604      	movcs	r4, r0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    368c:	1912      	adds	r2, r2, r4
    368e:	f04f 0000 	mov.w	r0, #0
    3692:	9001      	str	r0, [sp, #4]
    3694:	f143 0300 	adc.w	r3, r3, #0
    3698:	f7ff fe76 	bl	3388 <compare_set>
}
    369c:	b002      	add	sp, #8
    369e:	bd10      	pop	{r4, pc}
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    36a0:	2400      	movs	r4, #0
    36a2:	e7e1      	b.n	3668 <sys_clock_set_timeout+0x18>
    36a4:	007fffff 	.word	0x007fffff
    36a8:	200003e0 	.word	0x200003e0
    36ac:	00003221 	.word	0x00003221

000036b0 <sys_clock_elapsed>:
{
    36b0:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    36b2:	f7ff fe47 	bl	3344 <z_nrf_rtc_timer_read>
    36b6:	4b02      	ldr	r3, [pc, #8]	; (36c0 <sys_clock_elapsed+0x10>)
    36b8:	681b      	ldr	r3, [r3, #0]
}
    36ba:	1ac0      	subs	r0, r0, r3
    36bc:	bd08      	pop	{r3, pc}
    36be:	bf00      	nop
    36c0:	200003e0 	.word	0x200003e0

000036c4 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    36c4:	4b04      	ldr	r3, [pc, #16]	; (36d8 <nrfx_clock_init+0x14>)
    36c6:	791a      	ldrb	r2, [r3, #4]
    36c8:	b922      	cbnz	r2, 36d4 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    36ca:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    36cc:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    36ce:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    36d0:	4802      	ldr	r0, [pc, #8]	; (36dc <nrfx_clock_init+0x18>)
    36d2:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    36d4:	4802      	ldr	r0, [pc, #8]	; (36e0 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    36d6:	4770      	bx	lr
    36d8:	20000b5c 	.word	0x20000b5c
    36dc:	0bad0000 	.word	0x0bad0000
    36e0:	0bad000c 	.word	0x0bad000c

000036e4 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    36e4:	b110      	cbz	r0, 36ec <nrfx_clock_start+0x8>
    36e6:	2801      	cmp	r0, #1
    36e8:	d020      	beq.n	372c <nrfx_clock_start+0x48>
    36ea:	4770      	bx	lr
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    36ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    36f0:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    36f4:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
    36f8:	f411 3f80 	tst.w	r1, #65536	; 0x10000
    36fc:	4619      	mov	r1, r3
    36fe:	d011      	beq.n	3724 <nrfx_clock_start+0x40>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    3700:	f002 0203 	and.w	r2, r2, #3
    {
        case NRF_CLOCK_DOMAIN_LFCLK:
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
            {
                nrf_clock_lfclk_t lfclksrc;
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
    3704:	2a01      	cmp	r2, #1
    3706:	d10d      	bne.n	3724 <nrfx_clock_start+0x40>
    p_reg->LFCLKSRC = (uint32_t)(source);
    3708:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    370c:	4b0c      	ldr	r3, [pc, #48]	; (3740 <nrfx_clock_start+0x5c>)
    370e:	2200      	movs	r2, #0
    3710:	601a      	str	r2, [r3, #0]
    3712:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    3714:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3718:	2202      	movs	r2, #2
    371a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    371e:	2201      	movs	r2, #1
    3720:	609a      	str	r2, [r3, #8]
}
    3722:	4770      	bx	lr
    p_reg->LFCLKSRC = (uint32_t)(source);
    3724:	2300      	movs	r3, #0
    3726:	f8c1 3518 	str.w	r3, [r1, #1304]	; 0x518
}
    372a:	e7ef      	b.n	370c <nrfx_clock_start+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    372c:	4b05      	ldr	r3, [pc, #20]	; (3744 <nrfx_clock_start+0x60>)
    372e:	2200      	movs	r2, #0
    3730:	601a      	str	r2, [r3, #0]
    3732:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    3734:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3738:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    373c:	6018      	str	r0, [r3, #0]
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
    373e:	4770      	bx	lr
    3740:	40000104 	.word	0x40000104
    3744:	40000100 	.word	0x40000100

00003748 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    3748:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    374a:	b110      	cbz	r0, 3752 <nrfx_clock_stop+0xa>
    374c:	2801      	cmp	r0, #1
    374e:	d018      	beq.n	3782 <nrfx_clock_stop+0x3a>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    3750:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->INTENCLR = mask;
    3752:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3756:	2202      	movs	r2, #2
    3758:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    375c:	4a18      	ldr	r2, [pc, #96]	; (37c0 <nrfx_clock_stop+0x78>)
    375e:	6010      	str	r0, [r2, #0]
    3760:	6812      	ldr	r2, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3762:	4a18      	ldr	r2, [pc, #96]	; (37c4 <nrfx_clock_stop+0x7c>)
    3764:	2101      	movs	r1, #1
    3766:	6011      	str	r1, [r2, #0]
    3768:	f242 7510 	movw	r5, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    376c:	461c      	mov	r4, r3
    376e:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
    3772:	03db      	lsls	r3, r3, #15
    3774:	d5ec      	bpl.n	3750 <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    3776:	2001      	movs	r0, #1
    3778:	f002 fc77 	bl	606a <nrfx_busy_wait>
    377c:	3d01      	subs	r5, #1
    377e:	d1f6      	bne.n	376e <nrfx_clock_stop+0x26>
    3780:	e7e6      	b.n	3750 <nrfx_clock_stop+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3782:	4b11      	ldr	r3, [pc, #68]	; (37c8 <nrfx_clock_stop+0x80>)
    p_reg->INTENCLR = mask;
    3784:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3788:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    378a:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    378e:	601a      	str	r2, [r3, #0]
    3790:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3792:	4b0e      	ldr	r3, [pc, #56]	; (37cc <nrfx_clock_stop+0x84>)
    3794:	f242 7510 	movw	r5, #10000	; 0x2710
    3798:	6018      	str	r0, [r3, #0]
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    379a:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    379e:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
    37a2:	03d2      	lsls	r2, r2, #15
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    37a4:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    37a8:	d505      	bpl.n	37b6 <nrfx_clock_stop+0x6e>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    37aa:	b123      	cbz	r3, 37b6 <nrfx_clock_stop+0x6e>
    37ac:	2001      	movs	r0, #1
    37ae:	f002 fc5c 	bl	606a <nrfx_busy_wait>
    37b2:	3d01      	subs	r5, #1
    37b4:	d1f1      	bne.n	379a <nrfx_clock_stop+0x52>
            m_clock_cb.hfclk_started = false;
    37b6:	4b06      	ldr	r3, [pc, #24]	; (37d0 <nrfx_clock_stop+0x88>)
    37b8:	2200      	movs	r2, #0
    37ba:	715a      	strb	r2, [r3, #5]
    37bc:	e7c8      	b.n	3750 <nrfx_clock_stop+0x8>
    37be:	bf00      	nop
    37c0:	40000104 	.word	0x40000104
    37c4:	4000000c 	.word	0x4000000c
    37c8:	40000100 	.word	0x40000100
    37cc:	40000004 	.word	0x40000004
    37d0:	20000b5c 	.word	0x20000b5c

000037d4 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    37d4:	4b16      	ldr	r3, [pc, #88]	; (3830 <nrfx_power_clock_irq_handler+0x5c>)
    37d6:	681a      	ldr	r2, [r3, #0]
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    37d8:	b510      	push	{r4, lr}
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    37da:	b16a      	cbz	r2, 37f8 <nrfx_power_clock_irq_handler+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    37dc:	2200      	movs	r2, #0
    37de:	601a      	str	r2, [r3, #0]
    37e0:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    37e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    37e6:	2201      	movs	r2, #1
    37e8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    37ec:	4b11      	ldr	r3, [pc, #68]	; (3834 <nrfx_power_clock_irq_handler+0x60>)
    37ee:	7958      	ldrb	r0, [r3, #5]
    37f0:	b910      	cbnz	r0, 37f8 <nrfx_power_clock_irq_handler+0x24>
        {
            m_clock_cb.hfclk_started = true;
    37f2:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    37f4:	681b      	ldr	r3, [r3, #0]
    37f6:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    37f8:	4b0f      	ldr	r3, [pc, #60]	; (3838 <nrfx_power_clock_irq_handler+0x64>)
    37fa:	681a      	ldr	r2, [r3, #0]
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    37fc:	b172      	cbz	r2, 381c <nrfx_power_clock_irq_handler+0x48>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    37fe:	2200      	movs	r2, #0
    3800:	601a      	str	r2, [r3, #0]
    3802:	681b      	ldr	r3, [r3, #0]
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    3804:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3808:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    380c:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    3810:	0792      	lsls	r2, r2, #30
    3812:	d104      	bne.n	381e <nrfx_power_clock_irq_handler+0x4a>
    p_reg->LFCLKSRC = (uint32_t)(source);
    3814:	2201      	movs	r2, #1
    3816:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    381a:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    381c:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    381e:	2202      	movs	r2, #2
    3820:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    3824:	4b03      	ldr	r3, [pc, #12]	; (3834 <nrfx_power_clock_irq_handler+0x60>)
}
    3826:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    382a:	681b      	ldr	r3, [r3, #0]
    382c:	2001      	movs	r0, #1
    382e:	4718      	bx	r3
    3830:	40000100 	.word	0x40000100
    3834:	20000b5c 	.word	0x20000b5c
    3838:	40000104 	.word	0x40000104

0000383c <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    383c:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    383e:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    3840:	6803      	ldr	r3, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    3842:	fab3 f283 	clz	r2, r3
        if (idx < 0) {
    3846:	2a20      	cmp	r2, #32
        idx = 31 - NRF_CLZ(prev_mask);
    3848:	f1c2 041f 	rsb	r4, r2, #31
        if (idx < 0) {
    384c:	d014      	beq.n	3878 <nrfx_flag32_alloc+0x3c>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    384e:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask & ~NRFX_BIT(idx);
    3852:	fa05 f204 	lsl.w	r2, r5, r4
    3856:	ea23 0202 	bic.w	r2, r3, r2
    385a:	e850 6f00 	ldrex	r6, [r0]
    385e:	429e      	cmp	r6, r3
    3860:	d104      	bne.n	386c <nrfx_flag32_alloc+0x30>
    3862:	e840 2c00 	strex	ip, r2, [r0]
    3866:	f1bc 0f00 	cmp.w	ip, #0
    386a:	d1f6      	bne.n	385a <nrfx_flag32_alloc+0x1e>
    386c:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    3870:	d1e6      	bne.n	3840 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
    3872:	4802      	ldr	r0, [pc, #8]	; (387c <nrfx_flag32_alloc+0x40>)
    *p_flag = idx;
    3874:	700c      	strb	r4, [r1, #0]
}
    3876:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
    3878:	4801      	ldr	r0, [pc, #4]	; (3880 <nrfx_flag32_alloc+0x44>)
    387a:	e7fc      	b.n	3876 <nrfx_flag32_alloc+0x3a>
    387c:	0bad0000 	.word	0x0bad0000
    3880:	0bad0002 	.word	0x0bad0002

00003884 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    3884:	6803      	ldr	r3, [r0, #0]
    3886:	40cb      	lsrs	r3, r1
    3888:	07db      	lsls	r3, r3, #31
{
    388a:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
    388c:	d415      	bmi.n	38ba <nrfx_flag32_free+0x36>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    388e:	2301      	movs	r3, #1
    3890:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
    3894:	6803      	ldr	r3, [r0, #0]
    3896:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
    389a:	ea41 0203 	orr.w	r2, r1, r3
    389e:	e850 4f00 	ldrex	r4, [r0]
    38a2:	429c      	cmp	r4, r3
    38a4:	d104      	bne.n	38b0 <nrfx_flag32_free+0x2c>
    38a6:	e840 2c00 	strex	ip, r2, [r0]
    38aa:	f1bc 0f00 	cmp.w	ip, #0
    38ae:	d1f6      	bne.n	389e <nrfx_flag32_free+0x1a>
    38b0:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    38b4:	d1ee      	bne.n	3894 <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
    38b6:	4802      	ldr	r0, [pc, #8]	; (38c0 <nrfx_flag32_free+0x3c>)
}
    38b8:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    38ba:	4802      	ldr	r0, [pc, #8]	; (38c4 <nrfx_flag32_free+0x40>)
    38bc:	e7fc      	b.n	38b8 <nrfx_flag32_free+0x34>
    38be:	bf00      	nop
    38c0:	0bad0000 	.word	0x0bad0000
    38c4:	0bad0004 	.word	0x0bad0004

000038c8 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
    38c8:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
    38ca:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    38ce:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    38d0:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
    38d2:	6002      	str	r2, [r0, #0]
}
    38d4:	4802      	ldr	r0, [pc, #8]	; (38e0 <nrf_gpio_pin_port_decode+0x18>)
    38d6:	bf18      	it	ne
    38d8:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
    38dc:	4770      	bx	lr
    38de:	bf00      	nop
    38e0:	50000300 	.word	0x50000300

000038e4 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    38e4:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    38e6:	f100 0308 	add.w	r3, r0, #8
    38ea:	4c0c      	ldr	r4, [pc, #48]	; (391c <call_handler+0x38>)
    38ec:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
    38f0:	05da      	lsls	r2, r3, #23
{
    38f2:	4605      	mov	r5, r0
    38f4:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    38f6:	d507      	bpl.n	3908 <call_handler+0x24>
    38f8:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    38fc:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    3900:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    3904:	6852      	ldr	r2, [r2, #4]
    3906:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    3908:	68a3      	ldr	r3, [r4, #8]
    390a:	b12b      	cbz	r3, 3918 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    390c:	68e2      	ldr	r2, [r4, #12]
    390e:	4631      	mov	r1, r6
    3910:	4628      	mov	r0, r5
    }
}
    3912:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    3916:	4718      	bx	r3
}
    3918:	bd70      	pop	{r4, r5, r6, pc}
    391a:	bf00      	nop
    391c:	200000f0 	.word	0x200000f0

00003920 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    3920:	4b12      	ldr	r3, [pc, #72]	; (396c <release_handler+0x4c>)
    3922:	3008      	adds	r0, #8
{
    3924:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    3926:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
    392a:	05d1      	lsls	r1, r2, #23
    392c:	d51b      	bpl.n	3966 <release_handler+0x46>
    392e:	f3c2 2143 	ubfx	r1, r2, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    3932:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
    3936:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    393a:	f103 0410 	add.w	r4, r3, #16
    393e:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    3940:	f834 2b02 	ldrh.w	r2, [r4], #2
    3944:	f412 7f80 	tst.w	r2, #256	; 0x100
    3948:	d003      	beq.n	3952 <release_handler+0x32>
    394a:	f3c2 2243 	ubfx	r2, r2, #9, #4
    394e:	4291      	cmp	r1, r2
    3950:	d009      	beq.n	3966 <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    3952:	3001      	adds	r0, #1
    3954:	2830      	cmp	r0, #48	; 0x30
    3956:	d1f3      	bne.n	3940 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    3958:	2200      	movs	r2, #0
    395a:	f843 2031 	str.w	r2, [r3, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    395e:	4804      	ldr	r0, [pc, #16]	; (3970 <release_handler+0x50>)
}
    3960:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    3962:	f7ff bf8f 	b.w	3884 <nrfx_flag32_free>
}
    3966:	bc10      	pop	{r4}
    3968:	4770      	bx	lr
    396a:	bf00      	nop
    396c:	200000f0 	.word	0x200000f0
    3970:	20000164 	.word	0x20000164

00003974 <pin_handler_trigger_uninit>:
{
    3974:	b538      	push	{r3, r4, r5, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    3976:	4c0a      	ldr	r4, [pc, #40]	; (39a0 <pin_handler_trigger_uninit+0x2c>)
    3978:	f100 0508 	add.w	r5, r0, #8
    397c:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
    if (pin_in_use_by_te(pin))
    3980:	069a      	lsls	r2, r3, #26
    3982:	d506      	bpl.n	3992 <pin_handler_trigger_uninit+0x1e>
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    3984:	0b5b      	lsrs	r3, r3, #13
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    3986:	4a07      	ldr	r2, [pc, #28]	; (39a4 <pin_handler_trigger_uninit+0x30>)
    3988:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    398c:	2100      	movs	r1, #0
    398e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    release_handler(pin);
    3992:	f7ff ffc5 	bl	3920 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    3996:	2300      	movs	r3, #0
    3998:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    399c:	bd38      	pop	{r3, r4, r5, pc}
    399e:	bf00      	nop
    39a0:	200000f0 	.word	0x200000f0
    39a4:	40006000 	.word	0x40006000

000039a8 <nrfx_gpiote_input_configure>:
{
    39a8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    39ac:	461d      	mov	r5, r3
    39ae:	4604      	mov	r4, r0
    39b0:	4617      	mov	r7, r2
    if (p_input_config)
    39b2:	460b      	mov	r3, r1
    39b4:	b309      	cbz	r1, 39fa <nrfx_gpiote_input_configure+0x52>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    39b6:	4e4d      	ldr	r6, [pc, #308]	; (3aec <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x54>)
    39b8:	f100 0808 	add.w	r8, r0, #8
        if (pin_is_task_output(pin))
    39bc:	f836 2018 	ldrh.w	r2, [r6, r8, lsl #1]
    39c0:	f002 0222 	and.w	r2, r2, #34	; 0x22
    39c4:	2a22      	cmp	r2, #34	; 0x22
    39c6:	d103      	bne.n	39d0 <nrfx_gpiote_input_configure+0x28>
                return NRFX_ERROR_INVALID_PARAM;
    39c8:	4849      	ldr	r0, [pc, #292]	; (3af0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x58>)
}
    39ca:	b004      	add	sp, #16
    39cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    39d0:	2200      	movs	r2, #0
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    39d2:	e9cd 2200 	strd	r2, r2, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    39d6:	f88d 200e 	strb.w	r2, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
    39da:	f88d 200f 	strb.w	r2, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    39de:	f10d 010e 	add.w	r1, sp, #14
    39e2:	f10d 020f 	add.w	r2, sp, #15
    39e6:	f002 fb42 	bl	606e <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    39ea:	f836 3018 	ldrh.w	r3, [r6, r8, lsl #1]
    39ee:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    39f2:	f043 0301 	orr.w	r3, r3, #1
    39f6:	f826 3018 	strh.w	r3, [r6, r8, lsl #1]
    if (p_trigger_config)
    39fa:	b197      	cbz	r7, 3a22 <nrfx_gpiote_input_configure+0x7a>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    39fc:	483b      	ldr	r0, [pc, #236]	; (3aec <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x54>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    39fe:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    3a00:	687a      	ldr	r2, [r7, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    3a02:	f104 0308 	add.w	r3, r4, #8
    3a06:	f830 1013 	ldrh.w	r1, [r0, r3, lsl #1]
        if (pin_is_output(pin))
    3a0a:	078f      	lsls	r7, r1, #30
    3a0c:	d50c      	bpl.n	3a28 <nrfx_gpiote_input_configure+0x80>
            if (use_evt)
    3a0e:	2a00      	cmp	r2, #0
    3a10:	d1da      	bne.n	39c8 <nrfx_gpiote_input_configure+0x20>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    3a12:	f830 2013 	ldrh.w	r2, [r0, r3, lsl #1]
    3a16:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    3a1a:	ea42 0286 	orr.w	r2, r2, r6, lsl #2
    3a1e:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
    if (p_handler_config)
    3a22:	bbcd      	cbnz	r5, 3a98 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT>
    return NRFX_SUCCESS;
    3a24:	4833      	ldr	r0, [pc, #204]	; (3af4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x5c>)
    3a26:	e7d0      	b.n	39ca <nrfx_gpiote_input_configure+0x22>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    3a28:	f021 0120 	bic.w	r1, r1, #32
    3a2c:	04c9      	lsls	r1, r1, #19
    3a2e:	0cc9      	lsrs	r1, r1, #19
    3a30:	f820 1013 	strh.w	r1, [r0, r3, lsl #1]
            if (use_evt)
    3a34:	2a00      	cmp	r2, #0
    3a36:	d0ec      	beq.n	3a12 <nrfx_gpiote_input_configure+0x6a>
                if (!edge)
    3a38:	2e03      	cmp	r6, #3
    3a3a:	d8c5      	bhi.n	39c8 <nrfx_gpiote_input_configure+0x20>
                uint8_t ch = *p_trigger_config->p_in_channel;
    3a3c:	7817      	ldrb	r7, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    3a3e:	b92e      	cbnz	r6, 3a4c <nrfx_gpiote_input_configure+0xa4>
    3a40:	4a2d      	ldr	r2, [pc, #180]	; (3af8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x60>)
    3a42:	f507 71a2 	add.w	r1, r7, #324	; 0x144
    3a46:	f842 6021 	str.w	r6, [r2, r1, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
    3a4a:	e7e2      	b.n	3a12 <nrfx_gpiote_input_configure+0x6a>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    3a4c:	00ba      	lsls	r2, r7, #2
    3a4e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    3a52:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3a56:	ea4f 2e04 	mov.w	lr, r4, lsl #8
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    3a5a:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
    3a5e:	f02c 0c03 	bic.w	ip, ip, #3
    3a62:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    3a66:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
    3a6a:	f42c 3c4f 	bic.w	ip, ip, #211968	; 0x33c00
    3a6e:	f42c 7c40 	bic.w	ip, ip, #768	; 0x300
    3a72:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3a76:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
    3a7a:	f40e 5e7c 	and.w	lr, lr, #16128	; 0x3f00
    3a7e:	ea4c 4c06 	orr.w	ip, ip, r6, lsl #16
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    3a82:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
    3a86:	ea4c 0c0e 	orr.w	ip, ip, lr
    3a8a:	f041 0120 	orr.w	r1, r1, #32
    3a8e:	f820 1013 	strh.w	r1, [r0, r3, lsl #1]
    3a92:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
    3a96:	e7bc      	b.n	3a12 <nrfx_gpiote_input_configure+0x6a>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    3a98:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    3a9c:	4620      	mov	r0, r4
    3a9e:	f7ff ff3f 	bl	3920 <release_handler>
    if (!handler)
    3aa2:	2e00      	cmp	r6, #0
    3aa4:	d0be      	beq.n	3a24 <nrfx_gpiote_input_configure+0x7c>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    3aa6:	4d11      	ldr	r5, [pc, #68]	; (3aec <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x54>)
    3aa8:	682b      	ldr	r3, [r5, #0]
    3aaa:	429e      	cmp	r6, r3
    3aac:	d104      	bne.n	3ab8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x20>
    3aae:	686b      	ldr	r3, [r5, #4]
    3ab0:	429f      	cmp	r7, r3
    3ab2:	d101      	bne.n	3ab8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x20>
    3ab4:	2200      	movs	r2, #0
    3ab6:	e009      	b.n	3acc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x34>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    3ab8:	4810      	ldr	r0, [pc, #64]	; (3afc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x64>)
    3aba:	f10d 010f 	add.w	r1, sp, #15
    3abe:	f7ff febd 	bl	383c <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    3ac2:	4b0c      	ldr	r3, [pc, #48]	; (3af4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x5c>)
    3ac4:	4298      	cmp	r0, r3
    3ac6:	d180      	bne.n	39ca <nrfx_gpiote_input_configure+0x22>
        handler_id = (int32_t)id;
    3ac8:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
    3acc:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    3ad0:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    3ad4:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    3ad6:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    3ad8:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    3adc:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    3ae0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    3ae4:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    3ae8:	e79c      	b.n	3a24 <nrfx_gpiote_input_configure+0x7c>
    3aea:	bf00      	nop
    3aec:	200000f0 	.word	0x200000f0
    3af0:	0bad0004 	.word	0x0bad0004
    3af4:	0bad0000 	.word	0x0bad0000
    3af8:	40006000 	.word	0x40006000
    3afc:	20000164 	.word	0x20000164

00003b00 <nrfx_gpiote_output_configure>:
{
    3b00:	b5f0      	push	{r4, r5, r6, r7, lr}
    3b02:	4604      	mov	r4, r0
    3b04:	b085      	sub	sp, #20
    3b06:	4615      	mov	r5, r2
    if (p_config)
    3b08:	b309      	cbz	r1, 3b4e <nrfx_gpiote_output_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    3b0a:	f100 0708 	add.w	r7, r0, #8
    3b0e:	4e31      	ldr	r6, [pc, #196]	; (3bd4 <nrfx_gpiote_output_configure+0xd4>)
    3b10:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    3b14:	0798      	lsls	r0, r3, #30
    3b16:	d401      	bmi.n	3b1c <nrfx_gpiote_output_configure+0x1c>
    3b18:	069a      	lsls	r2, r3, #26
    3b1a:	d458      	bmi.n	3bce <nrfx_gpiote_output_configure+0xce>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    3b1c:	f013 0f1c 	tst.w	r3, #28
    3b20:	d002      	beq.n	3b28 <nrfx_gpiote_output_configure+0x28>
    3b22:	784b      	ldrb	r3, [r1, #1]
    3b24:	2b01      	cmp	r3, #1
    3b26:	d052      	beq.n	3bce <nrfx_gpiote_output_configure+0xce>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
    3b28:	2301      	movs	r3, #1
    3b2a:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    3b2e:	2300      	movs	r3, #0
    3b30:	e9cd 1300 	strd	r1, r3, [sp]
    3b34:	1c4a      	adds	r2, r1, #1
    3b36:	1c8b      	adds	r3, r1, #2
    3b38:	4620      	mov	r0, r4
    3b3a:	f10d 010f 	add.w	r1, sp, #15
    3b3e:	f002 fa96 	bl	606e <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    3b42:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    3b46:	f043 0303 	orr.w	r3, r3, #3
    3b4a:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
    3b4e:	b915      	cbnz	r5, 3b56 <nrfx_gpiote_output_configure+0x56>
    return NRFX_SUCCESS;
    3b50:	4821      	ldr	r0, [pc, #132]	; (3bd8 <nrfx_gpiote_output_configure+0xd8>)
}
    3b52:	b005      	add	sp, #20
    3b54:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    3b56:	4e1f      	ldr	r6, [pc, #124]	; (3bd4 <nrfx_gpiote_output_configure+0xd4>)
    3b58:	f104 0708 	add.w	r7, r4, #8
    3b5c:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    3b60:	0783      	lsls	r3, r0, #30
    3b62:	d534      	bpl.n	3bce <nrfx_gpiote_output_configure+0xce>
        uint32_t ch = p_task_config->task_ch;
    3b64:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
    3b68:	4661      	mov	r1, ip
    3b6a:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    3b6c:	f020 0020 	bic.w	r0, r0, #32
    3b70:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    3b74:	04c0      	lsls	r0, r0, #19
    3b76:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
    3b7a:	0cc0      	lsrs	r0, r0, #19
    3b7c:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    3b80:	2300      	movs	r3, #0
    3b82:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    3b86:	786a      	ldrb	r2, [r5, #1]
    3b88:	2a00      	cmp	r2, #0
    3b8a:	d0e1      	beq.n	3b50 <nrfx_gpiote_output_configure+0x50>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    3b8c:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    3b90:	78ad      	ldrb	r5, [r5, #2]
    3b92:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
    3b96:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    3b9a:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3b9e:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    3ba2:	0223      	lsls	r3, r4, #8
    3ba4:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    3ba8:	0412      	lsls	r2, r2, #16
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3baa:	ea43 030e 	orr.w	r3, r3, lr
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    3bae:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    3bb2:	052d      	lsls	r5, r5, #20
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3bb4:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    3bb6:	f405 1580 	and.w	r5, r5, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    3bba:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3bbe:	432b      	orrs	r3, r5
    3bc0:	f040 0020 	orr.w	r0, r0, #32
    3bc4:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    3bc8:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    3bcc:	e7c0      	b.n	3b50 <nrfx_gpiote_output_configure+0x50>
            return NRFX_ERROR_INVALID_PARAM;
    3bce:	4803      	ldr	r0, [pc, #12]	; (3bdc <nrfx_gpiote_output_configure+0xdc>)
    3bd0:	e7bf      	b.n	3b52 <nrfx_gpiote_output_configure+0x52>
    3bd2:	bf00      	nop
    3bd4:	200000f0 	.word	0x200000f0
    3bd8:	0bad0000 	.word	0x0bad0000
    3bdc:	0bad0004 	.word	0x0bad0004

00003be0 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    3be0:	4b01      	ldr	r3, [pc, #4]	; (3be8 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    3be2:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    3be6:	4770      	bx	lr
    3be8:	200000f0 	.word	0x200000f0

00003bec <nrfx_gpiote_channel_get>:
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    3bec:	3008      	adds	r0, #8
    3bee:	4b05      	ldr	r3, [pc, #20]	; (3c04 <nrfx_gpiote_channel_get+0x18>)
    3bf0:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
    if (pin_in_use_by_te(pin))
    3bf4:	069a      	lsls	r2, r3, #26
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    3bf6:	bf43      	ittte	mi
    3bf8:	0b5b      	lsrmi	r3, r3, #13
        return NRFX_SUCCESS;
    3bfa:	4803      	ldrmi	r0, [pc, #12]	; (3c08 <nrfx_gpiote_channel_get+0x1c>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    3bfc:	700b      	strbmi	r3, [r1, #0]
        return NRFX_ERROR_INVALID_PARAM;
    3bfe:	4803      	ldrpl	r0, [pc, #12]	; (3c0c <nrfx_gpiote_channel_get+0x20>)
}
    3c00:	4770      	bx	lr
    3c02:	bf00      	nop
    3c04:	200000f0 	.word	0x200000f0
    3c08:	0bad0000 	.word	0x0bad0000
    3c0c:	0bad0004 	.word	0x0bad0004

00003c10 <nrfx_gpiote_init>:
{
    3c10:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    3c12:	4c0e      	ldr	r4, [pc, #56]	; (3c4c <nrfx_gpiote_init+0x3c>)
    3c14:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
    3c18:	b9b5      	cbnz	r5, 3c48 <nrfx_gpiote_init+0x38>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    3c1a:	2260      	movs	r2, #96	; 0x60
    3c1c:	4629      	mov	r1, r5
    3c1e:	f104 0010 	add.w	r0, r4, #16
    3c22:	f002 f844 	bl	5cae <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    3c26:	2006      	movs	r0, #6
    3c28:	f7fd ffca 	bl	1bc0 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3c2c:	4b08      	ldr	r3, [pc, #32]	; (3c50 <nrfx_gpiote_init+0x40>)
    return err_code;
    3c2e:	4809      	ldr	r0, [pc, #36]	; (3c54 <nrfx_gpiote_init+0x44>)
    3c30:	601d      	str	r5, [r3, #0]
    3c32:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    3c34:	4b08      	ldr	r3, [pc, #32]	; (3c58 <nrfx_gpiote_init+0x48>)
    3c36:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    3c3a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    3c3e:	2301      	movs	r3, #1
    3c40:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    3c44:	6763      	str	r3, [r4, #116]	; 0x74
}
    3c46:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    3c48:	4804      	ldr	r0, [pc, #16]	; (3c5c <nrfx_gpiote_init+0x4c>)
    3c4a:	e7fc      	b.n	3c46 <nrfx_gpiote_init+0x36>
    3c4c:	200000f0 	.word	0x200000f0
    3c50:	4000617c 	.word	0x4000617c
    3c54:	0bad0000 	.word	0x0bad0000
    3c58:	40006000 	.word	0x40006000
    3c5c:	0bad0005 	.word	0x0bad0005

00003c60 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    3c60:	4b03      	ldr	r3, [pc, #12]	; (3c70 <nrfx_gpiote_is_init+0x10>)
    3c62:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    3c66:	3800      	subs	r0, #0
    3c68:	bf18      	it	ne
    3c6a:	2001      	movne	r0, #1
    3c6c:	4770      	bx	lr
    3c6e:	bf00      	nop
    3c70:	200000f0 	.word	0x200000f0

00003c74 <nrfx_gpiote_channel_free>:
{
    3c74:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    3c76:	4801      	ldr	r0, [pc, #4]	; (3c7c <nrfx_gpiote_channel_free+0x8>)
    3c78:	f7ff be04 	b.w	3884 <nrfx_flag32_free>
    3c7c:	20000160 	.word	0x20000160

00003c80 <nrfx_gpiote_channel_alloc>:
{
    3c80:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    3c82:	4801      	ldr	r0, [pc, #4]	; (3c88 <nrfx_gpiote_channel_alloc+0x8>)
    3c84:	f7ff bdda 	b.w	383c <nrfx_flag32_alloc>
    3c88:	20000160 	.word	0x20000160

00003c8c <nrfx_gpiote_trigger_enable>:
{
    3c8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    3c8e:	4b1f      	ldr	r3, [pc, #124]	; (3d0c <nrfx_gpiote_trigger_enable+0x80>)
    3c90:	f100 0208 	add.w	r2, r0, #8
{
    3c94:	4604      	mov	r4, r0
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    3c96:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    3c9a:	069a      	lsls	r2, r3, #26
    3c9c:	d51d      	bpl.n	3cda <nrfx_gpiote_trigger_enable+0x4e>
    3c9e:	f013 0502 	ands.w	r5, r3, #2
    3ca2:	d11a      	bne.n	3cda <nrfx_gpiote_trigger_enable+0x4e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    3ca4:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    3ca6:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
    3ca8:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
    3cac:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
    3cb0:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    3cb4:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3cb8:	6005      	str	r5, [r0, #0]
    3cba:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    3cbc:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    3cc0:	f040 0001 	orr.w	r0, r0, #1
    3cc4:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
    3cc8:	b129      	cbz	r1, 3cd6 <nrfx_gpiote_trigger_enable+0x4a>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    3cca:	2201      	movs	r2, #1
    3ccc:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
    3cd0:	4a0f      	ldr	r2, [pc, #60]	; (3d10 <nrfx_gpiote_trigger_enable+0x84>)
    3cd2:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    3cd6:	b003      	add	sp, #12
    3cd8:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    3cda:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    3cde:	2b04      	cmp	r3, #4
    3ce0:	d010      	beq.n	3d04 <nrfx_gpiote_trigger_enable+0x78>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    3ce2:	2b05      	cmp	r3, #5
    3ce4:	d010      	beq.n	3d08 <nrfx_gpiote_trigger_enable+0x7c>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    3ce6:	a801      	add	r0, sp, #4
    3ce8:	9401      	str	r4, [sp, #4]
    3cea:	f7ff fded 	bl	38c8 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    3cee:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
    3cf0:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    3cf4:	40d9      	lsrs	r1, r3
    3cf6:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    3cfa:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    3cfc:	4620      	mov	r0, r4
    3cfe:	f002 f9fd 	bl	60fc <nrf_gpio_cfg_sense_set>
}
    3d02:	e7e8      	b.n	3cd6 <nrfx_gpiote_trigger_enable+0x4a>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    3d04:	2103      	movs	r1, #3
    3d06:	e7f9      	b.n	3cfc <nrfx_gpiote_trigger_enable+0x70>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    3d08:	2102      	movs	r1, #2
    3d0a:	e7f7      	b.n	3cfc <nrfx_gpiote_trigger_enable+0x70>
    3d0c:	200000f0 	.word	0x200000f0
    3d10:	40006000 	.word	0x40006000

00003d14 <nrfx_gpiote_trigger_disable>:
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    3d14:	4b0e      	ldr	r3, [pc, #56]	; (3d50 <nrfx_gpiote_trigger_disable+0x3c>)
    3d16:	f100 0208 	add.w	r2, r0, #8
    3d1a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    3d1e:	0699      	lsls	r1, r3, #26
    3d20:	d513      	bpl.n	3d4a <nrfx_gpiote_trigger_disable+0x36>
    3d22:	079a      	lsls	r2, r3, #30
    3d24:	d411      	bmi.n	3d4a <nrfx_gpiote_trigger_disable+0x36>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    3d26:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    3d28:	2201      	movs	r2, #1
    3d2a:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    3d2c:	009b      	lsls	r3, r3, #2
    3d2e:	4909      	ldr	r1, [pc, #36]	; (3d54 <nrfx_gpiote_trigger_disable+0x40>)
    3d30:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    3d34:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    3d38:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    3d3c:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    3d40:	f022 0203 	bic.w	r2, r2, #3
    3d44:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    3d48:	4770      	bx	lr
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    3d4a:	2100      	movs	r1, #0
    3d4c:	f002 b9d6 	b.w	60fc <nrf_gpio_cfg_sense_set>
    3d50:	200000f0 	.word	0x200000f0
    3d54:	40006000 	.word	0x40006000

00003d58 <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    3d58:	4b0e      	ldr	r3, [pc, #56]	; (3d94 <nrfx_gpiote_pin_uninit+0x3c>)
    3d5a:	f100 0208 	add.w	r2, r0, #8
{
    3d5e:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    3d60:	f813 3012 	ldrb.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
    3d64:	07db      	lsls	r3, r3, #31
{
    3d66:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    3d68:	d511      	bpl.n	3d8e <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
    3d6a:	f7ff ffd3 	bl	3d14 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    3d6e:	4620      	mov	r0, r4
    3d70:	f7ff fe00 	bl	3974 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    3d74:	a801      	add	r0, sp, #4
    3d76:	9401      	str	r4, [sp, #4]
    3d78:	f7ff fda6 	bl	38c8 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    3d7c:	9b01      	ldr	r3, [sp, #4]
    3d7e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    3d82:	2202      	movs	r2, #2
    3d84:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
    3d88:	4803      	ldr	r0, [pc, #12]	; (3d98 <nrfx_gpiote_pin_uninit+0x40>)
}
    3d8a:	b002      	add	sp, #8
    3d8c:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    3d8e:	4803      	ldr	r0, [pc, #12]	; (3d9c <nrfx_gpiote_pin_uninit+0x44>)
    3d90:	e7fb      	b.n	3d8a <nrfx_gpiote_pin_uninit+0x32>
    3d92:	bf00      	nop
    3d94:	200000f0 	.word	0x200000f0
    3d98:	0bad0000 	.word	0x0bad0000
    3d9c:	0bad0004 	.word	0x0bad0004

00003da0 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    3da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3da4:	4b64      	ldr	r3, [pc, #400]	; (3f38 <nrfx_gpiote_irq_handler+0x198>)
    return p_reg->INTENSET & mask;
    3da6:	4865      	ldr	r0, [pc, #404]	; (3f3c <nrfx_gpiote_irq_handler+0x19c>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    3da8:	4965      	ldr	r1, [pc, #404]	; (3f40 <nrfx_gpiote_irq_handler+0x1a0>)
    uint32_t status = 0;
    3daa:	2500      	movs	r5, #0
{
    3dac:	b087      	sub	sp, #28
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    3dae:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3db0:	462c      	mov	r4, r5
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3db2:	681e      	ldr	r6, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    3db4:	b136      	cbz	r6, 3dc4 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
    3db6:	f8d0 6304 	ldr.w	r6, [r0, #772]	; 0x304
    3dba:	4216      	tst	r6, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3dbc:	bf1e      	ittt	ne
    3dbe:	601c      	strne	r4, [r3, #0]
    3dc0:	681e      	ldrne	r6, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    3dc2:	4315      	orrne	r5, r2
        }
        mask <<= 1;
    3dc4:	3304      	adds	r3, #4
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    3dc6:	428b      	cmp	r3, r1
        mask <<= 1;
    3dc8:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    3dcc:	d1f1      	bne.n	3db2 <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3dce:	4f5d      	ldr	r7, [pc, #372]	; (3f44 <nrfx_gpiote_irq_handler+0x1a4>)
    3dd0:	683b      	ldr	r3, [r7, #0]
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    3dd2:	b37b      	cbz	r3, 3e34 <nrfx_gpiote_irq_handler+0x94>
        *p_masks = gpio_regs[i]->LATCH;
    3dd4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    3dd8:	4e5b      	ldr	r6, [pc, #364]	; (3f48 <nrfx_gpiote_irq_handler+0x1a8>)
    3dda:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    3dde:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    3de0:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    3de4:	f8d6 3520 	ldr.w	r3, [r6, #1312]	; 0x520
    3de8:	9305      	str	r3, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    3dea:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    3dee:	9600      	str	r6, [sp, #0]
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    3df0:	f10d 0910 	add.w	r9, sp, #16
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    3df4:	f04f 0800 	mov.w	r8, #0
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    3df8:	f04f 0b01 	mov.w	fp, #1
            while (latch[i])
    3dfc:	f8d9 3000 	ldr.w	r3, [r9]
    3e00:	b9f3      	cbnz	r3, 3e40 <nrfx_gpiote_irq_handler+0xa0>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    3e02:	f108 0820 	add.w	r8, r8, #32
    3e06:	f1b8 0f40 	cmp.w	r8, #64	; 0x40
    3e0a:	f109 0904 	add.w	r9, r9, #4
    3e0e:	d1f5      	bne.n	3dfc <nrfx_gpiote_irq_handler+0x5c>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3e10:	603b      	str	r3, [r7, #0]
    3e12:	683b      	ldr	r3, [r7, #0]
        gpio_regs[i]->LATCH = *p_masks;
    3e14:	9900      	ldr	r1, [sp, #0]
        *p_masks = gpio_regs[i]->LATCH;
    3e16:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    3e1a:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    3e1e:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    3e20:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    3e24:	9b00      	ldr	r3, [sp, #0]
    3e26:	f8d3 3520 	ldr.w	r3, [r3, #1312]	; 0x520
    3e2a:	9305      	str	r3, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    3e2c:	f8c1 3520 	str.w	r3, [r1, #1312]	; 0x520
        if (latch[port_idx])
    3e30:	4313      	orrs	r3, r2
    3e32:	d1dd      	bne.n	3df0 <nrfx_gpiote_irq_handler+0x50>
        mask &= ~NRFX_BIT(ch);
    3e34:	2401      	movs	r4, #1
    while (mask)
    3e36:	2d00      	cmp	r5, #0
    3e38:	d166      	bne.n	3f08 <nrfx_gpiote_irq_handler+0x168>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    3e3a:	b007      	add	sp, #28
    3e3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                uint32_t pin = NRF_CTZ(latch[i]);
    3e40:	fa93 f3a3 	rbit	r3, r3
    3e44:	fab3 f383 	clz	r3, r3
                pin += 32 * i;
    3e48:	eb08 0603 	add.w	r6, r8, r3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    3e4c:	f106 0208 	add.w	r2, r6, #8
    3e50:	4b3e      	ldr	r3, [pc, #248]	; (3f4c <nrfx_gpiote_irq_handler+0x1ac>)
    3e52:	9603      	str	r6, [sp, #12]
    3e54:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
    3e58:	f3c2 0382 	ubfx	r3, r2, #2, #3
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    3e5c:	08f4      	lsrs	r4, r6, #3
    3e5e:	9301      	str	r3, [sp, #4]
    3e60:	469a      	mov	sl, r3
    p_mask8[byte_idx] &= ~(1 << bit);
    3e62:	ab04      	add	r3, sp, #16
    bit = BITMASK_RELBIT_GET(bit);
    3e64:	f006 0007 	and.w	r0, r6, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    3e68:	fa0b fc00 	lsl.w	ip, fp, r0
    3e6c:	5d18      	ldrb	r0, [r3, r4]
    3e6e:	ea20 000c 	bic.w	r0, r0, ip
    3e72:	5518      	strb	r0, [r3, r4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    3e74:	a803      	add	r0, sp, #12
    3e76:	0891      	lsrs	r1, r2, #2
    3e78:	f7ff fd26 	bl	38c8 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    3e7c:	9c03      	ldr	r4, [sp, #12]
    3e7e:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
    if (is_level(trigger))
    3e82:	074b      	lsls	r3, r1, #29
    3e84:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    3e88:	f3c4 4401 	ubfx	r4, r4, #16, #2
    3e8c:	d523      	bpl.n	3ed6 <nrfx_gpiote_irq_handler+0x136>
        call_handler(pin, trigger);
    3e8e:	4651      	mov	r1, sl
    3e90:	4630      	mov	r0, r6
    3e92:	f7ff fd27 	bl	38e4 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    3e96:	a803      	add	r0, sp, #12
    3e98:	9603      	str	r6, [sp, #12]
    3e9a:	f7ff fd15 	bl	38c8 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    3e9e:	9a03      	ldr	r2, [sp, #12]
    3ea0:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    3ea4:	b2e4      	uxtb	r4, r4
    3ea6:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
    3eaa:	f3c2 4201 	ubfx	r2, r2, #16, #2
    3eae:	4294      	cmp	r4, r2
    3eb0:	d107      	bne.n	3ec2 <nrfx_gpiote_irq_handler+0x122>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    3eb2:	2100      	movs	r1, #0
    3eb4:	4630      	mov	r0, r6
    3eb6:	f002 f921 	bl	60fc <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    3eba:	4621      	mov	r1, r4
    3ebc:	4630      	mov	r0, r6
    3ebe:	f002 f91d 	bl	60fc <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    3ec2:	a803      	add	r0, sp, #12
    3ec4:	9603      	str	r6, [sp, #12]
    3ec6:	f7ff fcff 	bl	38c8 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
    3eca:	9b03      	ldr	r3, [sp, #12]
    3ecc:	fa0b f303 	lsl.w	r3, fp, r3
    3ed0:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
    3ed4:	e792      	b.n	3dfc <nrfx_gpiote_irq_handler+0x5c>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    3ed6:	2c02      	cmp	r4, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
    3ed8:	bf0c      	ite	eq
    3eda:	2103      	moveq	r1, #3
    3edc:	2102      	movne	r1, #2
    3ede:	4630      	mov	r0, r6
    3ee0:	f002 f90c 	bl	60fc <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    3ee4:	9b01      	ldr	r3, [sp, #4]
    3ee6:	2b03      	cmp	r3, #3
    3ee8:	d004      	beq.n	3ef4 <nrfx_gpiote_irq_handler+0x154>
    3eea:	2c02      	cmp	r4, #2
    3eec:	d107      	bne.n	3efe <nrfx_gpiote_irq_handler+0x15e>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    3eee:	f1ba 0f01 	cmp.w	sl, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    3ef2:	d1e6      	bne.n	3ec2 <nrfx_gpiote_irq_handler+0x122>
            call_handler(pin, trigger);
    3ef4:	4651      	mov	r1, sl
    3ef6:	4630      	mov	r0, r6
    3ef8:	f7ff fcf4 	bl	38e4 <call_handler>
    3efc:	e7e1      	b.n	3ec2 <nrfx_gpiote_irq_handler+0x122>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    3efe:	2c03      	cmp	r4, #3
    3f00:	d1df      	bne.n	3ec2 <nrfx_gpiote_irq_handler+0x122>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    3f02:	f1ba 0f02 	cmp.w	sl, #2
    3f06:	e7f4      	b.n	3ef2 <nrfx_gpiote_irq_handler+0x152>
        uint32_t ch = NRF_CTZ(mask);
    3f08:	fa95 f3a5 	rbit	r3, r5
    3f0c:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    3f10:	fa04 f203 	lsl.w	r2, r4, r3
    3f14:	009b      	lsls	r3, r3, #2
    3f16:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    3f1a:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    3f1e:	ea25 0502 	bic.w	r5, r5, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    3f22:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    3f26:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    3f2a:	f3c0 2005 	ubfx	r0, r0, #8, #6
    3f2e:	f3c1 4101 	ubfx	r1, r1, #16, #2
    3f32:	f7ff fcd7 	bl	38e4 <call_handler>
    3f36:	e77e      	b.n	3e36 <nrfx_gpiote_irq_handler+0x96>
    3f38:	40006100 	.word	0x40006100
    3f3c:	40006000 	.word	0x40006000
    3f40:	40006120 	.word	0x40006120
    3f44:	4000617c 	.word	0x4000617c
    3f48:	50000300 	.word	0x50000300
    3f4c:	200000f0 	.word	0x200000f0

00003f50 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    3f50:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
    3f52:	4801      	ldr	r0, [pc, #4]	; (3f58 <nrfx_ppi_channel_alloc+0x8>)
    3f54:	f7ff bc72 	b.w	383c <nrfx_flag32_alloc>
    3f58:	2000016c 	.word	0x2000016c

00003f5c <nrfx_pwm_init>:

nrfx_err_t nrfx_pwm_init(nrfx_pwm_t const *        p_instance,
                         nrfx_pwm_config_t const * p_config,
                         nrfx_pwm_handler_t        handler,
                         void *                    p_context)
{
    3f5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    NRFX_ASSERT(p_config);

    nrfx_err_t err_code;

    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    3f60:	7905      	ldrb	r5, [r0, #4]

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    3f62:	4f51      	ldr	r7, [pc, #324]	; (40a8 <nrfx_pwm_init+0x14c>)
    3f64:	240c      	movs	r4, #12
    3f66:	436c      	muls	r4, r5
    3f68:	193e      	adds	r6, r7, r4
{
    3f6a:	b089      	sub	sp, #36	; 0x24
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    3f6c:	f896 c008 	ldrb.w	ip, [r6, #8]
{
    3f70:	9202      	str	r2, [sp, #8]
    3f72:	46b8      	mov	r8, r7
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    3f74:	f1bc 0f00 	cmp.w	ip, #0
    3f78:	f040 8093 	bne.w	40a2 <nrfx_pwm_init+0x146>
        return err_code;
    }

    p_cb->handler = handler;
    p_cb->p_context = p_context;
    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
    3f7c:	f891 c00c 	ldrb.w	ip, [r1, #12]
    p_cb->p_context = p_context;
    3f80:	6073      	str	r3, [r6, #4]
    3f82:	7b4b      	ldrb	r3, [r1, #13]
    p_cb->handler = handler;
    3f84:	513a      	str	r2, [r7, r4]
    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
    3f86:	f886 c00a 	strb.w	ip, [r6, #10]
    if (p_config->skip_gpio_cfg && p_config->skip_psel_cfg)
    3f8a:	9301      	str	r3, [sp, #4]
    3f8c:	f1bc 0f00 	cmp.w	ip, #0
    3f90:	d031      	beq.n	3ff6 <nrfx_pwm_init+0x9a>
    3f92:	b383      	cbz	r3, 3ff6 <nrfx_pwm_init+0x9a>

    configure_pins(p_instance, p_config);

    nrf_pwm_enable(p_instance->p_registers);
    3f94:	6800      	ldr	r0, [r0, #0]
    p_reg->ENABLE = (PWM_ENABLE_ENABLE_Enabled << PWM_ENABLE_ENABLE_Pos);
    3f96:	2301      	movs	r3, #1
    3f98:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
    nrf_pwm_configure(p_instance->p_registers,
    3f9c:	798c      	ldrb	r4, [r1, #6]
    3f9e:	890b      	ldrh	r3, [r1, #8]
    p_reg->PRESCALER  = base_clock;
    3fa0:	794e      	ldrb	r6, [r1, #5]
    3fa2:	f8c0 650c 	str.w	r6, [r0, #1292]	; 0x50c
    p_reg->MODE       = mode;
    3fa6:	f8c0 4504 	str.w	r4, [r0, #1284]	; 0x504
    p_reg->COUNTERTOP = top_value;
    3faa:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508

NRF_STATIC_INLINE void nrf_pwm_decoder_set(NRF_PWM_Type *     p_reg,
                                           nrf_pwm_dec_load_t dec_load,
                                           nrf_pwm_dec_step_t dec_step)
{
    p_reg->DECODER = ((uint32_t)dec_load << PWM_DECODER_LOAD_Pos) |
    3fae:	894b      	ldrh	r3, [r1, #10]
    3fb0:	f8c0 3510 	str.w	r3, [r0, #1296]	; 0x510
    p_reg->SHORTS = mask;
    3fb4:	2300      	movs	r3, #0
    3fb6:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    p_reg->INTEN = mask;
    3fba:	f8c0 3300 	str.w	r3, [r0, #768]	; 0x300
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3fbe:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
    3fc2:	f8d0 111c 	ldr.w	r1, [r0, #284]	; 0x11c
    3fc6:	f8c0 3110 	str.w	r3, [r0, #272]	; 0x110
    3fca:	f8d0 1110 	ldr.w	r1, [r0, #272]	; 0x110
    3fce:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
    3fd2:	f8d0 1114 	ldr.w	r1, [r0, #276]	; 0x114
    3fd6:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
    3fda:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    // handler is not used.
#if defined(USE_DMA_ISSUE_WORKAROUND)
    NRFX_IRQ_PRIORITY_SET(DMA_ISSUE_EGU_IRQn, p_config->irq_priority);
    NRFX_IRQ_ENABLE(DMA_ISSUE_EGU_IRQn);
#else
    if (p_cb->handler)
    3fde:	9b02      	ldr	r3, [sp, #8]
    3fe0:	2b00      	cmp	r3, #0
    3fe2:	d159      	bne.n	4098 <nrfx_pwm_init+0x13c>
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_registers),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_registers));
    }

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    3fe4:	230c      	movs	r3, #12
    3fe6:	fb03 8505 	mla	r5, r3, r5, r8

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
    3fea:	4830      	ldr	r0, [pc, #192]	; (40ac <nrfx_pwm_init+0x150>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    3fec:	2301      	movs	r3, #1
    3fee:	722b      	strb	r3, [r5, #8]
}
    3ff0:	b009      	add	sp, #36	; 0x24
    3ff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3ff6:	1ccb      	adds	r3, r1, #3
        case 1: return NRF_P1;
    3ff8:	f8df e0b8 	ldr.w	lr, [pc, #184]	; 40b4 <nrfx_pwm_init+0x158>
    3ffc:	9303      	str	r3, [sp, #12]
    3ffe:	1e4f      	subs	r7, r1, #1
    4000:	ae04      	add	r6, sp, #16
    4002:	f04f 0901 	mov.w	r9, #1
        uint8_t output_pin = p_config->output_pins[i];
    4006:	f817 af01 	ldrb.w	sl, [r7, #1]!
        if (output_pin != NRFX_PWM_PIN_NOT_USED)
    400a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
    400e:	d03f      	beq.n	4090 <nrfx_pwm_init+0x134>
            out_pins[i]   = output_pin & ~NRFX_PWM_PIN_INVERTED;
    4010:	f02a 0380 	bic.w	r3, sl, #128	; 0x80
    4014:	6033      	str	r3, [r6, #0]
            if (!p_config->skip_gpio_cfg)
    4016:	f1bc 0f00 	cmp.w	ip, #0
    401a:	d119      	bne.n	4050 <nrfx_pwm_init+0xf4>
    if (value == 0)
    401c:	f01a 0f80 	tst.w	sl, #128	; 0x80
    4020:	f00a 041f 	and.w	r4, sl, #31
    4024:	ea4f 1353 	mov.w	r3, r3, lsr #5
    4028:	d128      	bne.n	407c <nrfx_pwm_init+0x120>
        case 1: return NRF_P1;
    402a:	2b01      	cmp	r3, #1
    402c:	bf14      	ite	ne
    402e:	f04f 4aa0 	movne.w	sl, #1342177280	; 0x50000000
    4032:	46f2      	moveq	sl, lr
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    4034:	fa09 fb04 	lsl.w	fp, r9, r4
    p_reg->OUTCLR = clr_mask;
    4038:	f8ca b50c 	str.w	fp, [sl, #1292]	; 0x50c
        case 1: return NRF_P1;
    403c:	2b01      	cmp	r3, #1
    403e:	bf14      	ite	ne
    4040:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    4044:	4673      	moveq	r3, lr
    reg->PIN_CNF[pin_number] = cnf;
    4046:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
    404a:	2203      	movs	r2, #3
    404c:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i)
    4050:	9b03      	ldr	r3, [sp, #12]
    4052:	429f      	cmp	r7, r3
    4054:	f106 0604 	add.w	r6, r6, #4
    4058:	d1d5      	bne.n	4006 <nrfx_pwm_init+0xaa>
    if (!p_config->skip_psel_cfg)
    405a:	9b01      	ldr	r3, [sp, #4]
    405c:	2b00      	cmp	r3, #0
    405e:	d199      	bne.n	3f94 <nrfx_pwm_init+0x38>
    4060:	6803      	ldr	r3, [r0, #0]
        p_reg->PSEL.OUT[i] = out_pins[i];
    4062:	9c04      	ldr	r4, [sp, #16]
    4064:	f8c3 4560 	str.w	r4, [r3, #1376]	; 0x560
    4068:	9c05      	ldr	r4, [sp, #20]
    406a:	f8c3 4564 	str.w	r4, [r3, #1380]	; 0x564
    406e:	9c06      	ldr	r4, [sp, #24]
    4070:	f8c3 4568 	str.w	r4, [r3, #1384]	; 0x568
    4074:	9c07      	ldr	r4, [sp, #28]
    4076:	f8c3 456c 	str.w	r4, [r3, #1388]	; 0x56c
    for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i)
    407a:	e78b      	b.n	3f94 <nrfx_pwm_init+0x38>
        case 1: return NRF_P1;
    407c:	2b01      	cmp	r3, #1
    407e:	bf14      	ite	ne
    4080:	f04f 4aa0 	movne.w	sl, #1342177280	; 0x50000000
    4084:	46f2      	moveq	sl, lr
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    4086:	fa09 fb04 	lsl.w	fp, r9, r4
    p_reg->OUTSET = set_mask;
    408a:	f8ca b508 	str.w	fp, [sl, #1288]	; 0x508
    408e:	e7d5      	b.n	403c <nrfx_pwm_init+0xe0>
            out_pins[i] = NRF_PWM_PIN_NOT_CONNECTED;
    4090:	f04f 33ff 	mov.w	r3, #4294967295
    4094:	6033      	str	r3, [r6, #0]
    4096:	e7db      	b.n	4050 <nrfx_pwm_init+0xf4>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_registers));
    4098:	f340 3007 	sbfx	r0, r0, #12, #8
    409c:	f7fd fd90 	bl	1bc0 <arch_irq_enable>
    40a0:	e7a0      	b.n	3fe4 <nrfx_pwm_init+0x88>
        return err_code;
    40a2:	4803      	ldr	r0, [pc, #12]	; (40b0 <nrfx_pwm_init+0x154>)
    40a4:	e7a4      	b.n	3ff0 <nrfx_pwm_init+0x94>
    40a6:	bf00      	nop
    40a8:	20000b64 	.word	0x20000b64
    40ac:	0bad0000 	.word	0x0bad0000
    40b0:	0bad0005 	.word	0x0bad0005
    40b4:	50000300 	.word	0x50000300

000040b8 <nrfx_pwm_simple_playback>:

uint32_t nrfx_pwm_simple_playback(nrfx_pwm_t const *         p_instance,
                                  nrf_pwm_sequence_t const * p_sequence,
                                  uint16_t                   playback_count,
                                  uint32_t                   flags)
{
    40b8:	b4f0      	push	{r4, r5, r6, r7}
    40ba:	460d      	mov	r5, r1
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    40bc:	7901      	ldrb	r1, [r0, #4]
    NRFX_ASSERT(playback_count > 0);
    NRFX_ASSERT(nrfx_is_in_ram(p_sequence->values.p_raw));

    // To take advantage of the looping mechanism, we need to use both sequences
    // (single sequence can be played back only once).
    nrf_pwm_sequence_set(p_instance->p_registers, 0, p_sequence);
    40be:	6800      	ldr	r0, [r0, #0]
    p_reg->SEQ[seq_id].PTR = (uint32_t)p_values;
    40c0:	f8d5 c000 	ldr.w	ip, [r5]
    p_reg->SEQ[seq_id].CNT = length;
    40c4:	88af      	ldrh	r7, [r5, #4]
    nrf_pwm_seq_refresh_set(  p_reg, seq_id, p_seq->repeats);
    40c6:	68ae      	ldr	r6, [r5, #8]
    p_reg->SEQ[seq_id].PTR = (uint32_t)p_values;
    40c8:	f8c0 c520 	str.w	ip, [r0, #1312]	; 0x520
{
    40cc:	461c      	mov	r4, r3
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    40ce:	4b18      	ldr	r3, [pc, #96]	; (4130 <nrfx_pwm_simple_playback+0x78>)
    p_reg->SEQ[seq_id].CNT = length;
    40d0:	f8c0 7524 	str.w	r7, [r0, #1316]	; 0x524
    40d4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    40d8:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    nrf_pwm_seq_end_delay_set(p_reg, seq_id, p_seq->end_delay);
    40dc:	68eb      	ldr	r3, [r5, #12]
    p_reg->SEQ[seq_id].REFRESH  = refresh;
    40de:	f8c0 6528 	str.w	r6, [r0, #1320]	; 0x528
    p_reg->SEQ[seq_id].ENDDELAY = end_delay;
    40e2:	f8c0 352c 	str.w	r3, [r0, #1324]	; 0x52c
    p_reg->SEQ[seq_id].PTR = (uint32_t)p_values;
    40e6:	f8c0 c540 	str.w	ip, [r0, #1344]	; 0x540
    p_reg->SEQ[seq_id].CNT = length;
    40ea:	f8c0 7544 	str.w	r7, [r0, #1348]	; 0x544
    p_reg->SEQ[seq_id].REFRESH  = refresh;
    40ee:	f8c0 6548 	str.w	r6, [r0, #1352]	; 0x548
    p_reg->SEQ[seq_id].ENDDELAY = end_delay;
    40f2:	f8c0 354c 	str.w	r3, [r0, #1356]	; 0x54c
    nrf_pwm_sequence_set(p_instance->p_registers, 1, p_sequence);
    bool odd = (playback_count & 1);
    40f6:	f002 0301 	and.w	r3, r2, #1
}

NRF_STATIC_INLINE void nrf_pwm_loop_set(NRF_PWM_Type * p_reg,
                                        uint16_t       loop_count)
{
    p_reg->LOOP = loop_count;
    40fa:	eb03 0252 	add.w	r2, r3, r2, lsr #1
    40fe:	f8c0 2514 	str.w	r2, [r0, #1300]	; 0x514
    nrf_pwm_loop_set(p_instance->p_registers,
        (playback_count / 2) + (odd ? 1 : 0));

    uint32_t shorts_mask;
    if (flags & NRFX_PWM_FLAG_STOP)
    4102:	07e2      	lsls	r2, r4, #31
    4104:	d411      	bmi.n	412a <nrfx_pwm_simple_playback+0x72>
    {
        shorts_mask = NRF_PWM_SHORT_LOOPSDONE_STOP_MASK;
    }
    else if (flags & NRFX_PWM_FLAG_LOOP)
    4106:	f014 0202 	ands.w	r2, r4, #2
    410a:	d003      	beq.n	4114 <nrfx_pwm_simple_playback+0x5c>
    {
        shorts_mask = odd ? NRF_PWM_SHORT_LOOPSDONE_SEQSTART1_MASK
                          : NRF_PWM_SHORT_LOOPSDONE_SEQSTART0_MASK;
    410c:	2b00      	cmp	r3, #0
    410e:	bf14      	ite	ne
    4110:	2208      	movne	r2, #8
    4112:	2204      	moveq	r2, #4
                  __func__,
                  p_sequence->length);
    NRFX_LOG_DEBUG("Sequence data:");
    NRFX_LOG_HEXDUMP_DEBUG((uint8_t *)p_sequence->values.p_raw,
                           p_sequence->length * sizeof(uint16_t));
    return start_playback(p_instance, p_cb, flags,
    4114:	2b00      	cmp	r3, #0
    p_reg->SHORTS = mask;
    4116:	f8c0 2200 	str.w	r2, [r0, #512]	; 0x200
    411a:	bf18      	it	ne
    411c:	230c      	movne	r3, #12
    411e:	b2e2      	uxtb	r2, r4
    4120:	bf08      	it	eq
    4122:	2308      	moveq	r3, #8
        odd ? NRF_PWM_TASK_SEQSTART1 : NRF_PWM_TASK_SEQSTART0);
}
    4124:	bcf0      	pop	{r4, r5, r6, r7}
    return start_playback(p_instance, p_cb, flags,
    4126:	f001 bff8 	b.w	611a <start_playback.isra.0>
        shorts_mask = NRF_PWM_SHORT_LOOPSDONE_STOP_MASK;
    412a:	2210      	movs	r2, #16
    412c:	e7f2      	b.n	4114 <nrfx_pwm_simple_playback+0x5c>
    412e:	bf00      	nop
    4130:	20000b64 	.word	0x20000b64

00004134 <nrfx_pwm_is_stopped>:

    bool ret_val = false;

    // If the event handler is used (interrupts are enabled), the state will
    // be changed in interrupt handler when the STOPPED event occurs.
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
    4134:	4b08      	ldr	r3, [pc, #32]	; (4158 <nrfx_pwm_is_stopped+0x24>)
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    4136:	7902      	ldrb	r2, [r0, #4]
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
    4138:	210c      	movs	r1, #12
    413a:	fb01 3202 	mla	r2, r1, r2, r3
    {
        ret_val = true;
    }
    // If interrupts are disabled, we must check the STOPPED event here.
    if (nrf_pwm_event_check(p_instance->p_registers, NRF_PWM_EVENT_STOPPED))
    413e:	6801      	ldr	r1, [r0, #0]
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
    4140:	7a13      	ldrb	r3, [r2, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4142:	f8d1 1104 	ldr.w	r1, [r1, #260]	; 0x104
    4146:	b2db      	uxtb	r3, r3
    if (nrf_pwm_event_check(p_instance->p_registers, NRF_PWM_EVENT_STOPPED))
    4148:	b919      	cbnz	r1, 4152 <nrfx_pwm_is_stopped+0x1e>
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
    414a:	1e98      	subs	r0, r3, #2
    414c:	bf18      	it	ne
    414e:	2001      	movne	r0, #1
    4150:	4770      	bx	lr
    {
        p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    4152:	2001      	movs	r0, #1
    4154:	7210      	strb	r0, [r2, #8]
        ret_val = true;
    }

    NRFX_LOG_INFO("%s returned %d.", __func__, ret_val);
    return ret_val;
}
    4156:	4770      	bx	lr
    4158:	20000b64 	.word	0x20000b64

0000415c <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    415c:	4b03      	ldr	r3, [pc, #12]	; (416c <nrf52_errata_136+0x10>)
            if (var1 == 0x08)
    415e:	6818      	ldr	r0, [r3, #0]
}
    4160:	f1a0 0308 	sub.w	r3, r0, #8
    4164:	4258      	negs	r0, r3
    4166:	4158      	adcs	r0, r3
    4168:	4770      	bx	lr
    416a:	bf00      	nop
    416c:	10000130 	.word	0x10000130

00004170 <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    4170:	4b06      	ldr	r3, [pc, #24]	; (418c <nrf52_errata_103+0x1c>)
            if (var1 == 0x08)
    4172:	681b      	ldr	r3, [r3, #0]
    4174:	2b08      	cmp	r3, #8
    4176:	d106      	bne.n	4186 <nrf52_errata_103+0x16>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    4178:	4b05      	ldr	r3, [pc, #20]	; (4190 <nrf52_errata_103+0x20>)
    417a:	681b      	ldr	r3, [r3, #0]
                switch(var2)
    417c:	2b05      	cmp	r3, #5
    417e:	d802      	bhi.n	4186 <nrf52_errata_103+0x16>
    4180:	4a04      	ldr	r2, [pc, #16]	; (4194 <nrf52_errata_103+0x24>)
    4182:	5cd0      	ldrb	r0, [r2, r3]
    4184:	4770      	bx	lr
        return false;
    4186:	2000      	movs	r0, #0
}
    4188:	4770      	bx	lr
    418a:	bf00      	nop
    418c:	10000130 	.word	0x10000130
    4190:	10000134 	.word	0x10000134
    4194:	00006cfe 	.word	0x00006cfe

00004198 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    4198:	4a02      	ldr	r2, [pc, #8]	; (41a4 <nvmc_wait+0xc>)
    419a:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    419e:	2b00      	cmp	r3, #0
    41a0:	d0fb      	beq.n	419a <nvmc_wait+0x2>
}
    41a2:	4770      	bx	lr
    41a4:	4001e000 	.word	0x4001e000

000041a8 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
    41a8:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    41aa:	f7ff ffd7 	bl	415c <nrf52_errata_136>
    41ae:	b140      	cbz	r0, 41c2 <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
    41b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    41b4:	2200      	movs	r2, #0
    41b6:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    41ba:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    41be:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    41c2:	f7ff ffcb 	bl	415c <nrf52_errata_136>
    41c6:	2800      	cmp	r0, #0
    41c8:	d046      	beq.n	4258 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    41ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    41ce:	4b5b      	ldr	r3, [pc, #364]	; (433c <SystemInit+0x194>)
    41d0:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    41d4:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    41d8:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    41dc:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    41e0:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    41e4:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    41e8:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    41ec:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    41f0:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    41f4:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    41f8:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    41fc:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    4200:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    4204:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    4208:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    420c:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    4210:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    4214:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    4218:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    421c:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    4220:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    4224:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    4228:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    422c:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    4230:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    4234:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    4238:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    423c:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    4240:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    4244:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    4248:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    424c:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    4250:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    4254:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    4258:	f7ff ff8a 	bl	4170 <nrf52_errata_103>
    425c:	b110      	cbz	r0, 4264 <SystemInit+0xbc>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    425e:	4b38      	ldr	r3, [pc, #224]	; (4340 <SystemInit+0x198>)
    4260:	4a38      	ldr	r2, [pc, #224]	; (4344 <SystemInit+0x19c>)
    4262:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    4264:	f7ff ff84 	bl	4170 <nrf52_errata_103>
    4268:	b118      	cbz	r0, 4272 <SystemInit+0xca>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    426a:	4b37      	ldr	r3, [pc, #220]	; (4348 <SystemInit+0x1a0>)
    426c:	22fb      	movs	r2, #251	; 0xfb
    426e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    4272:	f7ff ff7d 	bl	4170 <nrf52_errata_103>
    4276:	b148      	cbz	r0, 428c <SystemInit+0xe4>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    4278:	4934      	ldr	r1, [pc, #208]	; (434c <SystemInit+0x1a4>)
    427a:	4b35      	ldr	r3, [pc, #212]	; (4350 <SystemInit+0x1a8>)
    427c:	680a      	ldr	r2, [r1, #0]
    427e:	681b      	ldr	r3, [r3, #0]
    4280:	f022 020f 	bic.w	r2, r2, #15
    4284:	f003 030f 	and.w	r3, r3, #15
    4288:	4313      	orrs	r3, r2
    428a:	600b      	str	r3, [r1, #0]
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    428c:	f7ff ff70 	bl	4170 <nrf52_errata_103>
    4290:	b118      	cbz	r0, 429a <SystemInit+0xf2>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    4292:	4b30      	ldr	r3, [pc, #192]	; (4354 <SystemInit+0x1ac>)
    4294:	f44f 7200 	mov.w	r2, #512	; 0x200
    4298:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    429a:	f7ff ff5f 	bl	415c <nrf52_errata_136>
    429e:	b148      	cbz	r0, 42b4 <SystemInit+0x10c>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    42a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    42a4:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    42a8:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    42aa:	bf44      	itt	mi
    42ac:	f06f 0201 	mvnmi.w	r2, #1
    42b0:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    42b4:	4b28      	ldr	r3, [pc, #160]	; (4358 <SystemInit+0x1b0>)
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    42b6:	681b      	ldr	r3, [r3, #0]
    42b8:	2b08      	cmp	r3, #8
    42ba:	d10e      	bne.n	42da <SystemInit+0x132>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    42bc:	4b27      	ldr	r3, [pc, #156]	; (435c <SystemInit+0x1b4>)
    42be:	681b      	ldr	r3, [r3, #0]
            {
                switch(var2)
    42c0:	2b05      	cmp	r3, #5
    42c2:	d802      	bhi.n	42ca <SystemInit+0x122>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    42c4:	4a26      	ldr	r2, [pc, #152]	; (4360 <SystemInit+0x1b8>)
    42c6:	5cd3      	ldrb	r3, [r2, r3]
    42c8:	b13b      	cbz	r3, 42da <SystemInit+0x132>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    42ca:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    42ce:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    42d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    42d6:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    42da:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    42de:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    42e2:	2a00      	cmp	r2, #0
    42e4:	db03      	blt.n	42ee <SystemInit+0x146>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    42e6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    42ea:	2b00      	cmp	r3, #0
    42ec:	da22      	bge.n	4334 <SystemInit+0x18c>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    42ee:	491d      	ldr	r1, [pc, #116]	; (4364 <SystemInit+0x1bc>)
    42f0:	2301      	movs	r3, #1
    42f2:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    42f6:	f7ff ff4f 	bl	4198 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    42fa:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    42fe:	2412      	movs	r4, #18
    4300:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    4304:	f7ff ff48 	bl	4198 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    4308:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    430c:	f7ff ff44 	bl	4198 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    4310:	2300      	movs	r3, #0
    4312:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    4316:	f7ff ff3f 	bl	4198 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
    431a:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    431e:	4912      	ldr	r1, [pc, #72]	; (4368 <SystemInit+0x1c0>)
    4320:	4b12      	ldr	r3, [pc, #72]	; (436c <SystemInit+0x1c4>)
    4322:	68ca      	ldr	r2, [r1, #12]
    4324:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    4328:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    432a:	60cb      	str	r3, [r1, #12]
    432c:	f3bf 8f4f 	dsb	sy
    __NOP();
    4330:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    4332:	e7fd      	b.n	4330 <SystemInit+0x188>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    4334:	4b0e      	ldr	r3, [pc, #56]	; (4370 <SystemInit+0x1c8>)
    4336:	4a0f      	ldr	r2, [pc, #60]	; (4374 <SystemInit+0x1cc>)
    4338:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
    433a:	bd10      	pop	{r4, pc}
    433c:	4000c000 	.word	0x4000c000
    4340:	4000568c 	.word	0x4000568c
    4344:	00038148 	.word	0x00038148
    4348:	4000f000 	.word	0x4000f000
    434c:	40000ee4 	.word	0x40000ee4
    4350:	10000258 	.word	0x10000258
    4354:	40029640 	.word	0x40029640
    4358:	10000130 	.word	0x10000130
    435c:	10000134 	.word	0x10000134
    4360:	00006cf8 	.word	0x00006cf8
    4364:	4001e000 	.word	0x4001e000
    4368:	e000ed00 	.word	0xe000ed00
    436c:	05fa0004 	.word	0x05fa0004
    4370:	20000170 	.word	0x20000170
    4374:	03d09000 	.word	0x03d09000

00004378 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
    4378:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    437a:	4c14      	ldr	r4, [pc, #80]	; (43cc <_DoInit+0x54>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    437c:	4a14      	ldr	r2, [pc, #80]	; (43d0 <_DoInit+0x58>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    437e:	4915      	ldr	r1, [pc, #84]	; (43d4 <_DoInit+0x5c>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    4380:	2303      	movs	r3, #3
    4382:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    4384:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
    4386:	4b14      	ldr	r3, [pc, #80]	; (43d8 <_DoInit+0x60>)
  p->aUp[0].sName         = "Terminal";
    4388:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    438a:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    438c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    4390:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
    4392:	2300      	movs	r3, #0
    4394:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    4396:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    4398:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
    439a:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    439c:	4a0f      	ldr	r2, [pc, #60]	; (43dc <_DoInit+0x64>)
    439e:	6662      	str	r2, [r4, #100]	; 0x64
  STRCPY((char*)&p->acID[7], "RTT");
    43a0:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    43a2:	2210      	movs	r2, #16
    43a4:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    43a6:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    43a8:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    43aa:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
    43ac:	f001 fc4e 	bl	5c4c <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    43b0:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
    43b4:	490a      	ldr	r1, [pc, #40]	; (43e0 <_DoInit+0x68>)
    43b6:	4620      	mov	r0, r4
    43b8:	f001 fc48 	bl	5c4c <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    43bc:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
    43c0:	2320      	movs	r3, #32
    43c2:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    43c4:	f3bf 8f5f 	dmb	sy
}
    43c8:	bd10      	pop	{r4, pc}
    43ca:	bf00      	nop
    43cc:	20000b70 	.word	0x20000b70
    43d0:	00006d04 	.word	0x00006d04
    43d4:	00006d0d 	.word	0x00006d0d
    43d8:	20000c7d 	.word	0x20000c7d
    43dc:	20000c6d 	.word	0x20000c6d
    43e0:	00006d11 	.word	0x00006d11

000043e4 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    43e4:	4b0e      	ldr	r3, [pc, #56]	; (4420 <z_sys_init_run_level+0x3c>)
{
    43e6:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    43e8:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    43ec:	3001      	adds	r0, #1
    43ee:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    43f2:	42a6      	cmp	r6, r4
    43f4:	d800      	bhi.n	43f8 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    43f6:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    43f8:	e9d4 3500 	ldrd	r3, r5, [r4]
    43fc:	4628      	mov	r0, r5
    43fe:	4798      	blx	r3
		if (dev != NULL) {
    4400:	b165      	cbz	r5, 441c <z_sys_init_run_level+0x38>
			if (rc != 0) {
    4402:	68eb      	ldr	r3, [r5, #12]
    4404:	b130      	cbz	r0, 4414 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    4406:	2800      	cmp	r0, #0
    4408:	bfb8      	it	lt
    440a:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    440c:	28ff      	cmp	r0, #255	; 0xff
    440e:	bfa8      	it	ge
    4410:	20ff      	movge	r0, #255	; 0xff
    4412:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    4414:	785a      	ldrb	r2, [r3, #1]
    4416:	f042 0201 	orr.w	r2, r2, #1
    441a:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    441c:	3408      	adds	r4, #8
    441e:	e7e8      	b.n	43f2 <z_sys_init_run_level+0xe>
    4420:	00006958 	.word	0x00006958

00004424 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
    4424:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
    4426:	4605      	mov	r5, r0
    4428:	b910      	cbnz	r0, 4430 <z_impl_device_get_binding+0xc>
		return NULL;
    442a:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
    442c:	4620      	mov	r0, r4
    442e:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
    4430:	7803      	ldrb	r3, [r0, #0]
    4432:	2b00      	cmp	r3, #0
    4434:	d0f9      	beq.n	442a <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
    4436:	4a0f      	ldr	r2, [pc, #60]	; (4474 <z_impl_device_get_binding+0x50>)
    4438:	4c0f      	ldr	r4, [pc, #60]	; (4478 <z_impl_device_get_binding+0x54>)
    443a:	4616      	mov	r6, r2
    443c:	4294      	cmp	r4, r2
    443e:	d108      	bne.n	4452 <z_impl_device_get_binding+0x2e>
	for (dev = __device_start; dev != __device_end; dev++) {
    4440:	4c0d      	ldr	r4, [pc, #52]	; (4478 <z_impl_device_get_binding+0x54>)
    4442:	42b4      	cmp	r4, r6
    4444:	d0f1      	beq.n	442a <z_impl_device_get_binding+0x6>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    4446:	4620      	mov	r0, r4
    4448:	f001 fea8 	bl	619c <z_device_ready>
    444c:	b950      	cbnz	r0, 4464 <z_impl_device_get_binding+0x40>
	for (dev = __device_start; dev != __device_end; dev++) {
    444e:	3418      	adds	r4, #24
    4450:	e7f7      	b.n	4442 <z_impl_device_get_binding+0x1e>
		if (z_device_ready(dev) && (dev->name == name)) {
    4452:	4620      	mov	r0, r4
    4454:	f001 fea2 	bl	619c <z_device_ready>
    4458:	b110      	cbz	r0, 4460 <z_impl_device_get_binding+0x3c>
    445a:	6823      	ldr	r3, [r4, #0]
    445c:	42ab      	cmp	r3, r5
    445e:	d0e5      	beq.n	442c <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
    4460:	3418      	adds	r4, #24
    4462:	e7eb      	b.n	443c <z_impl_device_get_binding+0x18>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    4464:	6821      	ldr	r1, [r4, #0]
    4466:	4628      	mov	r0, r5
    4468:	f001 fc0a 	bl	5c80 <strcmp>
    446c:	2800      	cmp	r0, #0
    446e:	d1ee      	bne.n	444e <z_impl_device_get_binding+0x2a>
    4470:	e7dc      	b.n	442c <z_impl_device_get_binding+0x8>
    4472:	bf00      	nop
    4474:	00006640 	.word	0x00006640
    4478:	00006598 	.word	0x00006598

0000447c <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    447c:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    447e:	4c09      	ldr	r4, [pc, #36]	; (44a4 <idle+0x28>)
	__asm__ volatile(
    4480:	f04f 0220 	mov.w	r2, #32
    4484:	f3ef 8311 	mrs	r3, BASEPRI
    4488:	f382 8812 	msr	BASEPRI_MAX, r2
    448c:	f3bf 8f6f 	isb	sy
    4490:	f001 fff1 	bl	6476 <z_get_next_timeout_expiry>
    4494:	61a0      	str	r0, [r4, #24]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (pm_system_suspend(_kernel.idle) == false) {
    4496:	f7fd fa67 	bl	1968 <pm_system_suspend>
    449a:	2800      	cmp	r0, #0
    449c:	d1f0      	bne.n	4480 <idle+0x4>
	arch_cpu_idle();
    449e:	f7fd fb19 	bl	1ad4 <arch_cpu_idle>
}
    44a2:	e7ed      	b.n	4480 <idle+0x4>
    44a4:	20000c18 	.word	0x20000c18

000044a8 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
    44a8:	b530      	push	{r4, r5, lr}
	snprintk(tname, 8, "idle %02d", i);
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
    44aa:	2300      	movs	r3, #0
{
    44ac:	b087      	sub	sp, #28
	z_setup_new_thread(thread, stack,
    44ae:	2201      	movs	r2, #1
    44b0:	e9cd 2304 	strd	r2, r3, [sp, #16]
    44b4:	220f      	movs	r2, #15
    44b6:	e9cd 3202 	strd	r3, r2, [sp, #8]
	struct k_thread *thread = &z_idle_threads[i];
    44ba:	4c0d      	ldr	r4, [pc, #52]	; (44f0 <init_idle_thread+0x48>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    44bc:	4a0d      	ldr	r2, [pc, #52]	; (44f4 <init_idle_thread+0x4c>)
	z_setup_new_thread(thread, stack,
    44be:	9301      	str	r3, [sp, #4]
    44c0:	490d      	ldr	r1, [pc, #52]	; (44f8 <init_idle_thread+0x50>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    44c2:	2318      	movs	r3, #24
	struct k_thread *thread = &z_idle_threads[i];
    44c4:	eb04 14c0 	add.w	r4, r4, r0, lsl #7
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    44c8:	fb03 2300 	mla	r3, r3, r0, r2
	z_setup_new_thread(thread, stack,
    44cc:	f44f 75b0 	mov.w	r5, #352	; 0x160
    44d0:	9300      	str	r3, [sp, #0]
    44d2:	fb05 1100 	mla	r1, r5, r0, r1
    44d6:	4b09      	ldr	r3, [pc, #36]	; (44fc <init_idle_thread+0x54>)
    44d8:	f44f 72a0 	mov.w	r2, #320	; 0x140
    44dc:	4620      	mov	r0, r4
    44de:	f000 fd61 	bl	4fa4 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    44e2:	7b63      	ldrb	r3, [r4, #13]
    44e4:	f023 0304 	bic.w	r3, r3, #4
    44e8:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
    44ea:	b007      	add	sp, #28
    44ec:	bd30      	pop	{r4, r5, pc}
    44ee:	bf00      	nop
    44f0:	200003e8 	.word	0x200003e8
    44f4:	20000c18 	.word	0x20000c18
    44f8:	200022c0 	.word	0x200022c0
    44fc:	0000447d 	.word	0x0000447d

00004500 <bg_thread_main>:
{
    4500:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    4502:	4b0a      	ldr	r3, [pc, #40]	; (452c <bg_thread_main+0x2c>)
    4504:	2201      	movs	r2, #1
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    4506:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    4508:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    450a:	f7ff ff6b 	bl	43e4 <z_sys_init_run_level>
	boot_banner();
    450e:	f001 f821 	bl	5554 <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    4512:	2003      	movs	r0, #3
    4514:	f7ff ff66 	bl	43e4 <z_sys_init_run_level>
	z_init_static_threads();
    4518:	f000 fda2 	bl	5060 <z_init_static_threads>
	main();
    451c:	f7fc fbb4 	bl	c88 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    4520:	4a03      	ldr	r2, [pc, #12]	; (4530 <bg_thread_main+0x30>)
    4522:	7b13      	ldrb	r3, [r2, #12]
    4524:	f023 0301 	bic.w	r3, r3, #1
    4528:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    452a:	bd08      	pop	{r3, pc}
    452c:	2000107d 	.word	0x2000107d
    4530:	20000468 	.word	0x20000468

00004534 <z_bss_zero>:
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    4534:	4802      	ldr	r0, [pc, #8]	; (4540 <z_bss_zero+0xc>)
    4536:	4a03      	ldr	r2, [pc, #12]	; (4544 <z_bss_zero+0x10>)
    4538:	2100      	movs	r1, #0
    453a:	1a12      	subs	r2, r2, r0
    453c:	f001 bbb7 	b.w	5cae <memset>
    4540:	20000248 	.word	0x20000248
    4544:	2000123c 	.word	0x2000123c

00004548 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    4548:	b580      	push	{r7, lr}
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    454a:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 4624 <z_cstart+0xdc>
    454e:	b0a6      	sub	sp, #152	; 0x98
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    4550:	f388 8808 	msr	MSP, r8
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    4554:	4d2d      	ldr	r5, [pc, #180]	; (460c <z_cstart+0xc4>)
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
    4556:	4e2e      	ldr	r6, [pc, #184]	; (4610 <z_cstart+0xc8>)
    4558:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    455a:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 4628 <z_cstart+0xe0>
    455e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4562:	2400      	movs	r4, #0
    4564:	616b      	str	r3, [r5, #20]
    4566:	23e0      	movs	r3, #224	; 0xe0
    4568:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    456c:	77ec      	strb	r4, [r5, #31]
    456e:	762c      	strb	r4, [r5, #24]
    4570:	766c      	strb	r4, [r5, #25]
    4572:	76ac      	strb	r4, [r5, #26]
    4574:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    4578:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    457a:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    457e:	626b      	str	r3, [r5, #36]	; 0x24
    4580:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    4584:	f7fd fd00 	bl	1f88 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    4588:	f7fd fa9e 	bl	1ac8 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    458c:	f04f 33ff 	mov.w	r3, #4294967295
    4590:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    4592:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    4594:	f7fd fdee 	bl	2174 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    4598:	f7fd fd5e 	bl	2058 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
    459c:	f240 1301 	movw	r3, #257	; 0x101
    45a0:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    45a4:	ab06      	add	r3, sp, #24
    45a6:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
    45a8:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    45ac:	f001 fdf5 	bl	619a <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    45b0:	4620      	mov	r0, r4
    45b2:	f7ff ff17 	bl	43e4 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    45b6:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
    45b8:	4d16      	ldr	r5, [pc, #88]	; (4614 <z_cstart+0xcc>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    45ba:	f7ff ff13 	bl	43e4 <z_sys_init_run_level>
	z_sched_init();
    45be:	f000 fb9b 	bl	4cf8 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    45c2:	4b15      	ldr	r3, [pc, #84]	; (4618 <z_cstart+0xd0>)
    45c4:	9305      	str	r3, [sp, #20]
    45c6:	2301      	movs	r3, #1
    45c8:	4914      	ldr	r1, [pc, #80]	; (461c <z_cstart+0xd4>)
    45ca:	9400      	str	r4, [sp, #0]
    45cc:	e9cd 4303 	strd	r4, r3, [sp, #12]
    45d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
    45d4:	464b      	mov	r3, r9
    45d6:	e9cd 4401 	strd	r4, r4, [sp, #4]
    45da:	4628      	mov	r0, r5
	_kernel.ready_q.cache = &z_main_thread;
    45dc:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    45de:	f000 fce1 	bl	4fa4 <z_setup_new_thread>
    45e2:	7b6a      	ldrb	r2, [r5, #13]
    45e4:	f022 0204 	bic.w	r2, r2, #4
    45e8:	736a      	strb	r2, [r5, #13]
    45ea:	4607      	mov	r7, r0
	z_ready_thread(&z_main_thread);
    45ec:	4628      	mov	r0, r5
    45ee:	f001 fe8e 	bl	630e <z_ready_thread>
		init_idle_thread(i);
    45f2:	4620      	mov	r0, r4
    45f4:	f7ff ff58 	bl	44a8 <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    45f8:	4b09      	ldr	r3, [pc, #36]	; (4620 <z_cstart+0xd8>)
    45fa:	60f3      	str	r3, [r6, #12]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    45fc:	464a      	mov	r2, r9
    45fe:	4639      	mov	r1, r7
    4600:	4628      	mov	r0, r5
		_kernel.cpus[i].id = i;
    4602:	7534      	strb	r4, [r6, #20]
		_kernel.cpus[i].irq_stack =
    4604:	f8c6 8004 	str.w	r8, [r6, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    4608:	f7fd fb7c 	bl	1d04 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    460c:	e000ed00 	.word	0xe000ed00
    4610:	20000c18 	.word	0x20000c18
    4614:	20000468 	.word	0x20000468
    4618:	00006d18 	.word	0x00006d18
    461c:	20001ea0 	.word	0x20001ea0
    4620:	200003e8 	.word	0x200003e8
    4624:	20002c40 	.word	0x20002c40
    4628:	00004501 	.word	0x00004501

0000462c <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
    462c:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    462e:	4b0e      	ldr	r3, [pc, #56]	; (4668 <init_mem_slab_module+0x3c>)
    4630:	4c0e      	ldr	r4, [pc, #56]	; (466c <init_mem_slab_module+0x40>)
    4632:	42a3      	cmp	r3, r4
    4634:	d301      	bcc.n	463a <init_mem_slab_module+0xe>
			goto out;
		}
		z_object_init(slab);
	}

out:
    4636:	2000      	movs	r0, #0
	return rc;
}
    4638:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    463a:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
    463e:	ea41 0200 	orr.w	r2, r1, r0
    4642:	f012 0203 	ands.w	r2, r2, #3
    4646:	d10b      	bne.n	4660 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
    4648:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
    464a:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    464c:	42aa      	cmp	r2, r5
    464e:	d101      	bne.n	4654 <init_mem_slab_module+0x28>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    4650:	331c      	adds	r3, #28
    4652:	e7ee      	b.n	4632 <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
    4654:	695e      	ldr	r6, [r3, #20]
    4656:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    4658:	3201      	adds	r2, #1
		slab->free_list = p;
    465a:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
    465c:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
    465e:	e7f5      	b.n	464c <init_mem_slab_module+0x20>
		return -EINVAL;
    4660:	f06f 0015 	mvn.w	r0, #21
	return rc;
    4664:	e7e8      	b.n	4638 <init_mem_slab_module+0xc>
    4666:	bf00      	nop
    4668:	200001f8 	.word	0x200001f8
    466c:	200001f8 	.word	0x200001f8

00004670 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    4670:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
    4672:	460c      	mov	r4, r1
    4674:	4616      	mov	r6, r2
    4676:	461f      	mov	r7, r3
    4678:	f04f 0320 	mov.w	r3, #32
    467c:	f3ef 8111 	mrs	r1, BASEPRI
    4680:	f383 8812 	msr	BASEPRI_MAX, r3
    4684:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    4688:	6943      	ldr	r3, [r0, #20]
    468a:	b15b      	cbz	r3, 46a4 <k_mem_slab_alloc+0x34>
		/* take a free block */
		*mem = slab->free_list;
    468c:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    468e:	681b      	ldr	r3, [r3, #0]
    4690:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    4692:	6983      	ldr	r3, [r0, #24]
    4694:	3301      	adds	r3, #1
    4696:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    4698:	2000      	movs	r0, #0
	__asm__ volatile(
    469a:	f381 8811 	msr	BASEPRI, r1
    469e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
    46a2:	e011      	b.n	46c8 <k_mem_slab_alloc+0x58>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    46a4:	ea56 0207 	orrs.w	r2, r6, r7
    46a8:	d103      	bne.n	46b2 <k_mem_slab_alloc+0x42>
		*mem = NULL;
    46aa:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
    46ac:	f06f 000b 	mvn.w	r0, #11
    46b0:	e7f3      	b.n	469a <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    46b2:	4602      	mov	r2, r0
    46b4:	e9cd 6700 	strd	r6, r7, [sp]
    46b8:	3008      	adds	r0, #8
    46ba:	f000 fa6f 	bl	4b9c <z_pend_curr>
		if (result == 0) {
    46be:	b918      	cbnz	r0, 46c8 <k_mem_slab_alloc+0x58>
			*mem = _current->base.swap_data;
    46c0:	4b02      	ldr	r3, [pc, #8]	; (46cc <k_mem_slab_alloc+0x5c>)
    46c2:	689b      	ldr	r3, [r3, #8]
    46c4:	695b      	ldr	r3, [r3, #20]
    46c6:	6023      	str	r3, [r4, #0]
}
    46c8:	b002      	add	sp, #8
    46ca:	bdd0      	pop	{r4, r6, r7, pc}
    46cc:	20000c18 	.word	0x20000c18

000046d0 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    46d0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    46d4:	4604      	mov	r4, r0
    46d6:	4616      	mov	r6, r2
    46d8:	461f      	mov	r7, r3
	__asm__ volatile(
    46da:	f04f 0320 	mov.w	r3, #32
    46de:	f3ef 8811 	mrs	r8, BASEPRI
    46e2:	f383 8812 	msr	BASEPRI_MAX, r3
    46e6:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    46ea:	68c3      	ldr	r3, [r0, #12]
    46ec:	4a35      	ldr	r2, [pc, #212]	; (47c4 <z_impl_k_mutex_lock+0xf4>)
    46ee:	b16b      	cbz	r3, 470c <z_impl_k_mutex_lock+0x3c>
    46f0:	6880      	ldr	r0, [r0, #8]
    46f2:	6891      	ldr	r1, [r2, #8]
    46f4:	4288      	cmp	r0, r1
    46f6:	d019      	beq.n	472c <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    46f8:	ea56 0307 	orrs.w	r3, r6, r7
    46fc:	d118      	bne.n	4730 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
    46fe:	f388 8811 	msr	BASEPRI, r8
    4702:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    4706:	f06f 000f 	mvn.w	r0, #15
    470a:	e00c      	b.n	4726 <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
    470c:	6891      	ldr	r1, [r2, #8]
    470e:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    4712:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
    4714:	3301      	adds	r3, #1
    4716:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    4718:	6893      	ldr	r3, [r2, #8]
    471a:	60a3      	str	r3, [r4, #8]
    471c:	f388 8811 	msr	BASEPRI, r8
    4720:	f3bf 8f6f 	isb	sy
		return 0;
    4724:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    4726:	b002      	add	sp, #8
    4728:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    472c:	6921      	ldr	r1, [r4, #16]
    472e:	e7f0      	b.n	4712 <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    4730:	f991 100e 	ldrsb.w	r1, [r1, #14]
    4734:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
    4738:	4299      	cmp	r1, r3
    473a:	bfa8      	it	ge
    473c:	4619      	movge	r1, r3
    473e:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    4742:	4291      	cmp	r1, r2
    4744:	bfb8      	it	lt
    4746:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    4748:	428b      	cmp	r3, r1
    474a:	dd2f      	ble.n	47ac <z_impl_k_mutex_lock+0xdc>
		return z_set_prio(mutex->owner, new_prio);
    474c:	f000 fa3a 	bl	4bc4 <z_set_prio>
    4750:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    4752:	e9cd 6700 	strd	r6, r7, [sp]
    4756:	481c      	ldr	r0, [pc, #112]	; (47c8 <z_impl_k_mutex_lock+0xf8>)
    4758:	4622      	mov	r2, r4
    475a:	4641      	mov	r1, r8
    475c:	f000 fa1e 	bl	4b9c <z_pend_curr>
	if (got_mutex == 0) {
    4760:	2800      	cmp	r0, #0
    4762:	d0e0      	beq.n	4726 <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
    4764:	f04f 0320 	mov.w	r3, #32
    4768:	f3ef 8611 	mrs	r6, BASEPRI
    476c:	f383 8812 	msr	BASEPRI_MAX, r3
    4770:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    4774:	6823      	ldr	r3, [r4, #0]
    4776:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4778:	429c      	cmp	r4, r3
    477a:	d00a      	beq.n	4792 <z_impl_k_mutex_lock+0xc2>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    477c:	b14b      	cbz	r3, 4792 <z_impl_k_mutex_lock+0xc2>
    477e:	f993 300e 	ldrsb.w	r3, [r3, #14]
    4782:	4299      	cmp	r1, r3
    4784:	bfa8      	it	ge
    4786:	4619      	movge	r1, r3
    4788:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    478c:	4299      	cmp	r1, r3
    478e:	bfb8      	it	lt
    4790:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    4792:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
    4794:	f990 300e 	ldrsb.w	r3, [r0, #14]
    4798:	4299      	cmp	r1, r3
    479a:	d109      	bne.n	47b0 <z_impl_k_mutex_lock+0xe0>
	if (resched) {
    479c:	b16d      	cbz	r5, 47ba <z_impl_k_mutex_lock+0xea>
		z_reschedule(&lock, key);
    479e:	480a      	ldr	r0, [pc, #40]	; (47c8 <z_impl_k_mutex_lock+0xf8>)
    47a0:	4631      	mov	r1, r6
    47a2:	f000 f8a1 	bl	48e8 <z_reschedule>
	return -EAGAIN;
    47a6:	f06f 000a 	mvn.w	r0, #10
    47aa:	e7bc      	b.n	4726 <z_impl_k_mutex_lock+0x56>
	bool resched = false;
    47ac:	2500      	movs	r5, #0
    47ae:	e7d0      	b.n	4752 <z_impl_k_mutex_lock+0x82>
		return z_set_prio(mutex->owner, new_prio);
    47b0:	f000 fa08 	bl	4bc4 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    47b4:	2800      	cmp	r0, #0
    47b6:	d1f2      	bne.n	479e <z_impl_k_mutex_lock+0xce>
    47b8:	e7f0      	b.n	479c <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
    47ba:	f386 8811 	msr	BASEPRI, r6
    47be:	f3bf 8f6f 	isb	sy
    47c2:	e7f0      	b.n	47a6 <z_impl_k_mutex_lock+0xd6>
    47c4:	20000c18 	.word	0x20000c18
    47c8:	2000107e 	.word	0x2000107e

000047cc <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    47cc:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    47ce:	6883      	ldr	r3, [r0, #8]
{
    47d0:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
    47d2:	2b00      	cmp	r3, #0
    47d4:	d036      	beq.n	4844 <z_impl_k_mutex_unlock+0x78>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    47d6:	4a1e      	ldr	r2, [pc, #120]	; (4850 <z_impl_k_mutex_unlock+0x84>)
    47d8:	6892      	ldr	r2, [r2, #8]
    47da:	4293      	cmp	r3, r2
    47dc:	d135      	bne.n	484a <z_impl_k_mutex_unlock+0x7e>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    47de:	7bda      	ldrb	r2, [r3, #15]
    47e0:	3a01      	subs	r2, #1
    47e2:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    47e4:	68c3      	ldr	r3, [r0, #12]
    47e6:	2b01      	cmp	r3, #1
    47e8:	d905      	bls.n	47f6 <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
    47ea:	3b01      	subs	r3, #1
    47ec:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    47ee:	f000 fa67 	bl	4cc0 <k_sched_unlock>

	return 0;
    47f2:	2000      	movs	r0, #0
}
    47f4:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    47f6:	f04f 0320 	mov.w	r3, #32
    47fa:	f3ef 8511 	mrs	r5, BASEPRI
    47fe:	f383 8812 	msr	BASEPRI_MAX, r3
    4802:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    4806:	6901      	ldr	r1, [r0, #16]
    4808:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
    480a:	f990 300e 	ldrsb.w	r3, [r0, #14]
    480e:	4299      	cmp	r1, r3
    4810:	d001      	beq.n	4816 <z_impl_k_mutex_unlock+0x4a>
		return z_set_prio(mutex->owner, new_prio);
    4812:	f000 f9d7 	bl	4bc4 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    4816:	4620      	mov	r0, r4
    4818:	f001 fded 	bl	63f6 <z_unpend_first_thread>
	mutex->owner = new_owner;
    481c:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    481e:	b158      	cbz	r0, 4838 <z_impl_k_mutex_unlock+0x6c>
		mutex->owner_orig_prio = new_owner->base.prio;
    4820:	f990 200e 	ldrsb.w	r2, [r0, #14]
    4824:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    4826:	2200      	movs	r2, #0
    4828:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
    482a:	f001 fd70 	bl	630e <z_ready_thread>
		z_reschedule(&lock, key);
    482e:	4809      	ldr	r0, [pc, #36]	; (4854 <z_impl_k_mutex_unlock+0x88>)
    4830:	4629      	mov	r1, r5
    4832:	f000 f859 	bl	48e8 <z_reschedule>
    4836:	e7da      	b.n	47ee <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
    4838:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    483a:	f385 8811 	msr	BASEPRI, r5
    483e:	f3bf 8f6f 	isb	sy
    4842:	e7d4      	b.n	47ee <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
    4844:	f06f 0015 	mvn.w	r0, #21
    4848:	e7d4      	b.n	47f4 <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
    484a:	f04f 30ff 	mov.w	r0, #4294967295
    484e:	e7d1      	b.n	47f4 <z_impl_k_mutex_unlock+0x28>
    4850:	20000c18 	.word	0x20000c18
    4854:	2000107e 	.word	0x2000107e

00004858 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
    4858:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
    485a:	4c08      	ldr	r4, [pc, #32]	; (487c <z_reset_time_slice+0x24>)
    485c:	6823      	ldr	r3, [r4, #0]
    485e:	b15b      	cbz	r3, 4878 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    4860:	f7fe ff26 	bl	36b0 <sys_clock_elapsed>
    4864:	4603      	mov	r3, r0
    4866:	6820      	ldr	r0, [r4, #0]
    4868:	4a05      	ldr	r2, [pc, #20]	; (4880 <z_reset_time_slice+0x28>)
    486a:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
    486c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    4870:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
    4872:	2100      	movs	r1, #0
    4874:	f001 be0f 	b.w	6496 <z_set_timeout_expiry>
}
    4878:	bd10      	pop	{r4, pc}
    487a:	bf00      	nop
    487c:	20000c48 	.word	0x20000c48
    4880:	20000c18 	.word	0x20000c18

00004884 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
    4884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4886:	4604      	mov	r4, r0
    4888:	460d      	mov	r5, r1
	__asm__ volatile(
    488a:	f04f 0320 	mov.w	r3, #32
    488e:	f3ef 8611 	mrs	r6, BASEPRI
    4892:	f383 8812 	msr	BASEPRI_MAX, r3
    4896:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    489a:	4b10      	ldr	r3, [pc, #64]	; (48dc <k_sched_time_slice_set+0x58>)
    489c:	2200      	movs	r2, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
    489e:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    48a2:	f240 30e7 	movw	r0, #999	; 0x3e7
    48a6:	2100      	movs	r1, #0
    48a8:	611a      	str	r2, [r3, #16]
    48aa:	fbe7 0104 	umlal	r0, r1, r7, r4
    48ae:	2300      	movs	r3, #0
    48b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    48b4:	f7fb fe06 	bl	4c4 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    48b8:	2c00      	cmp	r4, #0
    48ba:	4b09      	ldr	r3, [pc, #36]	; (48e0 <k_sched_time_slice_set+0x5c>)
    48bc:	dc09      	bgt.n	48d2 <k_sched_time_slice_set+0x4e>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
    48be:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
    48c0:	4b08      	ldr	r3, [pc, #32]	; (48e4 <k_sched_time_slice_set+0x60>)
    48c2:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
    48c4:	f7ff ffc8 	bl	4858 <z_reset_time_slice>
	__asm__ volatile(
    48c8:	f386 8811 	msr	BASEPRI, r6
    48cc:	f3bf 8f6f 	isb	sy
	}
}
    48d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_time = MAX(2, slice_time);
    48d2:	2802      	cmp	r0, #2
    48d4:	bfb8      	it	lt
    48d6:	2002      	movlt	r0, #2
    48d8:	e7f1      	b.n	48be <k_sched_time_slice_set+0x3a>
    48da:	bf00      	nop
    48dc:	20000c18 	.word	0x20000c18
    48e0:	20000c48 	.word	0x20000c48
    48e4:	20000c44 	.word	0x20000c44

000048e8 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
    48e8:	b949      	cbnz	r1, 48fe <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    48ea:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
    48ee:	b930      	cbnz	r0, 48fe <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
    48f0:	4b05      	ldr	r3, [pc, #20]	; (4908 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
    48f2:	69da      	ldr	r2, [r3, #28]
    48f4:	689b      	ldr	r3, [r3, #8]
    48f6:	429a      	cmp	r2, r3
    48f8:	d001      	beq.n	48fe <z_reschedule+0x16>
	ret = arch_swap(key);
    48fa:	f7fd b9b3 	b.w	1c64 <arch_swap>
    48fe:	f381 8811 	msr	BASEPRI, r1
    4902:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
    4906:	4770      	bx	lr
    4908:	20000c18 	.word	0x20000c18

0000490c <k_sched_lock>:
	__asm__ volatile(
    490c:	f04f 0320 	mov.w	r3, #32
    4910:	f3ef 8111 	mrs	r1, BASEPRI
    4914:	f383 8812 	msr	BASEPRI_MAX, r3
    4918:	f3bf 8f6f 	isb	sy
    491c:	4b04      	ldr	r3, [pc, #16]	; (4930 <k_sched_lock+0x24>)
    491e:	689a      	ldr	r2, [r3, #8]
    4920:	7bd3      	ldrb	r3, [r2, #15]
    4922:	3b01      	subs	r3, #1
    4924:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    4926:	f381 8811 	msr	BASEPRI, r1
    492a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    492e:	4770      	bx	lr
    4930:	20000c18 	.word	0x20000c18

00004934 <update_cache>:
{
    4934:	b538      	push	{r3, r4, r5, lr}
    4936:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
    4938:	480c      	ldr	r0, [pc, #48]	; (496c <update_cache+0x38>)
    493a:	4d0d      	ldr	r5, [pc, #52]	; (4970 <update_cache+0x3c>)
    493c:	f001 fcdd 	bl	62fa <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    4940:	4604      	mov	r4, r0
    4942:	b900      	cbnz	r0, 4946 <update_cache+0x12>
    4944:	68ec      	ldr	r4, [r5, #12]
	if (preempt_ok != 0) {
    4946:	68ab      	ldr	r3, [r5, #8]
    4948:	b94a      	cbnz	r2, 495e <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
    494a:	7b5a      	ldrb	r2, [r3, #13]
    494c:	06d2      	lsls	r2, r2, #27
    494e:	d106      	bne.n	495e <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    4950:	69a2      	ldr	r2, [r4, #24]
    4952:	b922      	cbnz	r2, 495e <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
    4954:	89da      	ldrh	r2, [r3, #14]
    4956:	2a7f      	cmp	r2, #127	; 0x7f
    4958:	d901      	bls.n	495e <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
    495a:	61eb      	str	r3, [r5, #28]
}
    495c:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
    495e:	429c      	cmp	r4, r3
    4960:	d001      	beq.n	4966 <update_cache+0x32>
			z_reset_time_slice();
    4962:	f7ff ff79 	bl	4858 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    4966:	61ec      	str	r4, [r5, #28]
}
    4968:	e7f8      	b.n	495c <update_cache+0x28>
    496a:	bf00      	nop
    496c:	20000c38 	.word	0x20000c38
    4970:	20000c18 	.word	0x20000c18

00004974 <move_thread_to_end_of_prio_q>:
{
    4974:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    4976:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    497a:	7b43      	ldrb	r3, [r0, #13]
    497c:	2a00      	cmp	r2, #0
{
    497e:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    4980:	da04      	bge.n	498c <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4982:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4986:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    4988:	f001 fc7f 	bl	628a <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    498c:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
    498e:	4a17      	ldr	r2, [pc, #92]	; (49ec <move_thread_to_end_of_prio_q+0x78>)
    4990:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4994:	4610      	mov	r0, r2
    4996:	734b      	strb	r3, [r1, #13]
    4998:	f850 3f20 	ldr.w	r3, [r0, #32]!
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    499c:	6a55      	ldr	r5, [r2, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
    499e:	4283      	cmp	r3, r0
    49a0:	bf08      	it	eq
    49a2:	2300      	moveq	r3, #0
    49a4:	2b00      	cmp	r3, #0
    49a6:	bf38      	it	cc
    49a8:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    49aa:	b1cb      	cbz	r3, 49e0 <move_thread_to_end_of_prio_q+0x6c>
	int32_t b1 = thread_1->base.prio;
    49ac:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
    49b0:	f993 400e 	ldrsb.w	r4, [r3, #14]
	if (b1 != b2) {
    49b4:	42a6      	cmp	r6, r4
    49b6:	d00f      	beq.n	49d8 <move_thread_to_end_of_prio_q+0x64>
		return b2 - b1;
    49b8:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    49ba:	2c00      	cmp	r4, #0
    49bc:	dd0c      	ble.n	49d8 <move_thread_to_end_of_prio_q+0x64>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    49be:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
    49c0:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
    49c4:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    49c6:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
    49c8:	6890      	ldr	r0, [r2, #8]
    49ca:	1a43      	subs	r3, r0, r1
    49cc:	4258      	negs	r0, r3
}
    49ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    49d2:	4158      	adcs	r0, r3
    49d4:	f7ff bfae 	b.w	4934 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    49d8:	42ab      	cmp	r3, r5
    49da:	d001      	beq.n	49e0 <move_thread_to_end_of_prio_q+0x6c>
    49dc:	681b      	ldr	r3, [r3, #0]
    49de:	e7e4      	b.n	49aa <move_thread_to_end_of_prio_q+0x36>
	node->prev = tail;
    49e0:	e9c1 0500 	strd	r0, r5, [r1]
	tail->next = node;
    49e4:	6029      	str	r1, [r5, #0]
	list->tail = node;
    49e6:	6251      	str	r1, [r2, #36]	; 0x24
}
    49e8:	e7ee      	b.n	49c8 <move_thread_to_end_of_prio_q+0x54>
    49ea:	bf00      	nop
    49ec:	20000c18 	.word	0x20000c18

000049f0 <z_time_slice>:
{
    49f0:	b570      	push	{r4, r5, r6, lr}
    49f2:	4601      	mov	r1, r0
	__asm__ volatile(
    49f4:	f04f 0320 	mov.w	r3, #32
    49f8:	f3ef 8411 	mrs	r4, BASEPRI
    49fc:	f383 8812 	msr	BASEPRI_MAX, r3
    4a00:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    4a04:	4b16      	ldr	r3, [pc, #88]	; (4a60 <z_time_slice+0x70>)
    4a06:	4a17      	ldr	r2, [pc, #92]	; (4a64 <z_time_slice+0x74>)
    4a08:	6898      	ldr	r0, [r3, #8]
    4a0a:	6815      	ldr	r5, [r2, #0]
    4a0c:	42a8      	cmp	r0, r5
    4a0e:	461d      	mov	r5, r3
    4a10:	d106      	bne.n	4a20 <z_time_slice+0x30>
			z_reset_time_slice();
    4a12:	f7ff ff21 	bl	4858 <z_reset_time_slice>
	__asm__ volatile(
    4a16:	f384 8811 	msr	BASEPRI, r4
    4a1a:	f3bf 8f6f 	isb	sy
}
    4a1e:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
    4a20:	2600      	movs	r6, #0
    4a22:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
    4a24:	4a10      	ldr	r2, [pc, #64]	; (4a68 <z_time_slice+0x78>)
    4a26:	6812      	ldr	r2, [r2, #0]
    4a28:	b1ba      	cbz	r2, 4a5a <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
    4a2a:	89c2      	ldrh	r2, [r0, #14]
    4a2c:	2a7f      	cmp	r2, #127	; 0x7f
    4a2e:	d814      	bhi.n	4a5a <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
    4a30:	7b42      	ldrb	r2, [r0, #13]
    4a32:	06d2      	lsls	r2, r2, #27
    4a34:	d111      	bne.n	4a5a <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    4a36:	4a0d      	ldr	r2, [pc, #52]	; (4a6c <z_time_slice+0x7c>)
    4a38:	f990 600e 	ldrsb.w	r6, [r0, #14]
    4a3c:	6812      	ldr	r2, [r2, #0]
    4a3e:	4296      	cmp	r6, r2
    4a40:	db0b      	blt.n	4a5a <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
    4a42:	4a0b      	ldr	r2, [pc, #44]	; (4a70 <z_time_slice+0x80>)
    4a44:	4290      	cmp	r0, r2
    4a46:	d008      	beq.n	4a5a <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
    4a48:	691a      	ldr	r2, [r3, #16]
    4a4a:	428a      	cmp	r2, r1
    4a4c:	dc02      	bgt.n	4a54 <z_time_slice+0x64>
			move_thread_to_end_of_prio_q(_current);
    4a4e:	f7ff ff91 	bl	4974 <move_thread_to_end_of_prio_q>
    4a52:	e7de      	b.n	4a12 <z_time_slice+0x22>
			_current_cpu->slice_ticks -= ticks;
    4a54:	1a52      	subs	r2, r2, r1
    4a56:	611a      	str	r2, [r3, #16]
    4a58:	e7dd      	b.n	4a16 <z_time_slice+0x26>
		_current_cpu->slice_ticks = 0;
    4a5a:	2300      	movs	r3, #0
    4a5c:	612b      	str	r3, [r5, #16]
    4a5e:	e7da      	b.n	4a16 <z_time_slice+0x26>
    4a60:	20000c18 	.word	0x20000c18
    4a64:	20000c40 	.word	0x20000c40
    4a68:	20000c48 	.word	0x20000c48
    4a6c:	20000c44 	.word	0x20000c44
    4a70:	200003e8 	.word	0x200003e8

00004a74 <ready_thread>:
{
    4a74:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    4a76:	f990 300d 	ldrsb.w	r3, [r0, #13]
    4a7a:	7b42      	ldrb	r2, [r0, #13]
    4a7c:	2b00      	cmp	r3, #0
    4a7e:	db2d      	blt.n	4adc <ready_thread+0x68>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    4a80:	06d3      	lsls	r3, r2, #27
    4a82:	d12b      	bne.n	4adc <ready_thread+0x68>

int z_abort_timeout(struct _timeout *to);

static inline bool z_is_inactive_timeout(const struct _timeout *to)
{
	return !sys_dnode_is_linked(&to->node);
    4a84:	6983      	ldr	r3, [r0, #24]
    4a86:	bb4b      	cbnz	r3, 4adc <ready_thread+0x68>
	return list->head == list;
    4a88:	4915      	ldr	r1, [pc, #84]	; (4ae0 <ready_thread+0x6c>)
	thread->base.thread_state |= _THREAD_QUEUED;
    4a8a:	f062 027f 	orn	r2, r2, #127	; 0x7f
    4a8e:	7342      	strb	r2, [r0, #13]
    4a90:	460a      	mov	r2, r1
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    4a92:	6a4d      	ldr	r5, [r1, #36]	; 0x24
	return list->head == list;
    4a94:	f852 4f20 	ldr.w	r4, [r2, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4a98:	4294      	cmp	r4, r2
    4a9a:	bf18      	it	ne
    4a9c:	4623      	movne	r3, r4
    4a9e:	2b00      	cmp	r3, #0
    4aa0:	bf38      	it	cc
    4aa2:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4aa4:	b1ab      	cbz	r3, 4ad2 <ready_thread+0x5e>
	int32_t b1 = thread_1->base.prio;
    4aa6:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    4aaa:	f993 400e 	ldrsb.w	r4, [r3, #14]
	if (b1 != b2) {
    4aae:	42a6      	cmp	r6, r4
    4ab0:	d00b      	beq.n	4aca <ready_thread+0x56>
		return b2 - b1;
    4ab2:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    4ab4:	2c00      	cmp	r4, #0
    4ab6:	dd08      	ble.n	4aca <ready_thread+0x56>
	sys_dnode_t *const prev = successor->prev;
    4ab8:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    4aba:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
    4abe:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    4ac0:	6058      	str	r0, [r3, #4]
}
    4ac2:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    4ac4:	2000      	movs	r0, #0
    4ac6:	f7ff bf35 	b.w	4934 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    4aca:	42ab      	cmp	r3, r5
    4acc:	d001      	beq.n	4ad2 <ready_thread+0x5e>
    4ace:	681b      	ldr	r3, [r3, #0]
    4ad0:	e7e8      	b.n	4aa4 <ready_thread+0x30>
	node->prev = tail;
    4ad2:	e9c0 2500 	strd	r2, r5, [r0]
	tail->next = node;
    4ad6:	6028      	str	r0, [r5, #0]
	list->tail = node;
    4ad8:	6248      	str	r0, [r1, #36]	; 0x24
}
    4ada:	e7f2      	b.n	4ac2 <ready_thread+0x4e>
}
    4adc:	bc70      	pop	{r4, r5, r6}
    4ade:	4770      	bx	lr
    4ae0:	20000c18 	.word	0x20000c18

00004ae4 <z_sched_start>:
{
    4ae4:	b510      	push	{r4, lr}
	__asm__ volatile(
    4ae6:	f04f 0220 	mov.w	r2, #32
    4aea:	f3ef 8411 	mrs	r4, BASEPRI
    4aee:	f382 8812 	msr	BASEPRI_MAX, r2
    4af2:	f3bf 8f6f 	isb	sy
	if (z_has_thread_started(thread)) {
    4af6:	7b42      	ldrb	r2, [r0, #13]
    4af8:	0751      	lsls	r1, r2, #29
    4afa:	d404      	bmi.n	4b06 <z_sched_start+0x22>
	__asm__ volatile(
    4afc:	f384 8811 	msr	BASEPRI, r4
    4b00:	f3bf 8f6f 	isb	sy
}
    4b04:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    4b06:	f022 0204 	bic.w	r2, r2, #4
    4b0a:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    4b0c:	f7ff ffb2 	bl	4a74 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    4b10:	4621      	mov	r1, r4
    4b12:	4802      	ldr	r0, [pc, #8]	; (4b1c <z_sched_start+0x38>)
}
    4b14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    4b18:	f7ff bee6 	b.w	48e8 <z_reschedule>
    4b1c:	2000107e 	.word	0x2000107e

00004b20 <unready_thread>:
{
    4b20:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    4b22:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    4b26:	7b43      	ldrb	r3, [r0, #13]
    4b28:	2a00      	cmp	r2, #0
{
    4b2a:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    4b2c:	da04      	bge.n	4b38 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4b2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4b32:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    4b34:	f001 fba9 	bl	628a <sys_dlist_remove>
	update_cache(thread == _current);
    4b38:	4b04      	ldr	r3, [pc, #16]	; (4b4c <unready_thread+0x2c>)
    4b3a:	6898      	ldr	r0, [r3, #8]
    4b3c:	1a43      	subs	r3, r0, r1
    4b3e:	4258      	negs	r0, r3
    4b40:	4158      	adcs	r0, r3
}
    4b42:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    4b46:	f7ff bef5 	b.w	4934 <update_cache>
    4b4a:	bf00      	nop
    4b4c:	20000c18 	.word	0x20000c18

00004b50 <pend>:
{
    4b50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4b54:	4606      	mov	r6, r0
    4b56:	4614      	mov	r4, r2
    4b58:	461d      	mov	r5, r3
	__asm__ volatile(
    4b5a:	f04f 0320 	mov.w	r3, #32
    4b5e:	f3ef 8711 	mrs	r7, BASEPRI
    4b62:	f383 8812 	msr	BASEPRI_MAX, r3
    4b66:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
    4b6a:	f001 fc02 	bl	6372 <add_to_waitq_locked>
	__asm__ volatile(
    4b6e:	f387 8811 	msr	BASEPRI, r7
    4b72:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    4b76:	1c6b      	adds	r3, r5, #1
    4b78:	bf08      	it	eq
    4b7a:	f1b4 3fff 	cmpeq.w	r4, #4294967295
    4b7e:	d008      	beq.n	4b92 <pend+0x42>

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    4b80:	4622      	mov	r2, r4
    4b82:	462b      	mov	r3, r5
    4b84:	f106 0018 	add.w	r0, r6, #24
    4b88:	4903      	ldr	r1, [pc, #12]	; (4b98 <pend+0x48>)
}
    4b8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4b8e:	f000 bb15 	b.w	51bc <z_add_timeout>
    4b92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4b96:	bf00      	nop
    4b98:	0000632f 	.word	0x0000632f

00004b9c <z_pend_curr>:
{
    4b9c:	b510      	push	{r4, lr}
	pending_current = _current;
    4b9e:	4b07      	ldr	r3, [pc, #28]	; (4bbc <z_pend_curr+0x20>)
    4ba0:	6898      	ldr	r0, [r3, #8]
    4ba2:	4b07      	ldr	r3, [pc, #28]	; (4bc0 <z_pend_curr+0x24>)
{
    4ba4:	460c      	mov	r4, r1
	pending_current = _current;
    4ba6:	6018      	str	r0, [r3, #0]
{
    4ba8:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
    4baa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    4bae:	f7ff ffcf 	bl	4b50 <pend>
    4bb2:	4620      	mov	r0, r4
}
    4bb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4bb8:	f7fd b854 	b.w	1c64 <arch_swap>
    4bbc:	20000c18 	.word	0x20000c18
    4bc0:	20000c40 	.word	0x20000c40

00004bc4 <z_set_prio>:
{
    4bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4bc6:	4604      	mov	r4, r0
	__asm__ volatile(
    4bc8:	f04f 0320 	mov.w	r3, #32
    4bcc:	f3ef 8611 	mrs	r6, BASEPRI
    4bd0:	f383 8812 	msr	BASEPRI_MAX, r3
    4bd4:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    4bd8:	7b43      	ldrb	r3, [r0, #13]
    4bda:	06da      	lsls	r2, r3, #27
    4bdc:	b249      	sxtb	r1, r1
    4bde:	d138      	bne.n	4c52 <z_set_prio+0x8e>
	return !sys_dnode_is_linked(&to->node);
    4be0:	6985      	ldr	r5, [r0, #24]
		if (need_sched) {
    4be2:	2d00      	cmp	r5, #0
    4be4:	d135      	bne.n	4c52 <z_set_prio+0x8e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4be6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4bea:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    4bec:	f001 fb4d 	bl	628a <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    4bf0:	7b43      	ldrb	r3, [r0, #13]
				thread->base.prio = prio;
    4bf2:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    4bf4:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4bf8:	7343      	strb	r3, [r0, #13]
	return list->head == list;
    4bfa:	4817      	ldr	r0, [pc, #92]	; (4c58 <z_set_prio+0x94>)
    4bfc:	4603      	mov	r3, r0
    4bfe:	f853 7f20 	ldr.w	r7, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4c02:	429f      	cmp	r7, r3
    4c04:	bf18      	it	ne
    4c06:	463d      	movne	r5, r7
    4c08:	2d00      	cmp	r5, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    4c0a:	6a47      	ldr	r7, [r0, #36]	; 0x24
    4c0c:	461a      	mov	r2, r3
    4c0e:	462b      	mov	r3, r5
    4c10:	bf38      	it	cc
    4c12:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4c14:	b1c3      	cbz	r3, 4c48 <z_set_prio+0x84>
	int32_t b2 = thread_2->base.prio;
    4c16:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
    4c1a:	42a9      	cmp	r1, r5
    4c1c:	d010      	beq.n	4c40 <z_set_prio+0x7c>
		return b2 - b1;
    4c1e:	1a6d      	subs	r5, r5, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    4c20:	2d00      	cmp	r5, #0
    4c22:	dd0d      	ble.n	4c40 <z_set_prio+0x7c>
	sys_dnode_t *const prev = successor->prev;
    4c24:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    4c26:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    4c2a:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    4c2c:	605c      	str	r4, [r3, #4]
			update_cache(1);
    4c2e:	2001      	movs	r0, #1
    4c30:	f7ff fe80 	bl	4934 <update_cache>
    4c34:	2001      	movs	r0, #1
	__asm__ volatile(
    4c36:	f386 8811 	msr	BASEPRI, r6
    4c3a:	f3bf 8f6f 	isb	sy
}
    4c3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    4c40:	42bb      	cmp	r3, r7
    4c42:	d001      	beq.n	4c48 <z_set_prio+0x84>
    4c44:	681b      	ldr	r3, [r3, #0]
    4c46:	e7e5      	b.n	4c14 <z_set_prio+0x50>
	node->prev = tail;
    4c48:	e9c4 2700 	strd	r2, r7, [r4]
	tail->next = node;
    4c4c:	603c      	str	r4, [r7, #0]
	list->tail = node;
    4c4e:	6244      	str	r4, [r0, #36]	; 0x24
}
    4c50:	e7ed      	b.n	4c2e <z_set_prio+0x6a>
			thread->base.prio = prio;
    4c52:	73a1      	strb	r1, [r4, #14]
    4c54:	2000      	movs	r0, #0
    4c56:	e7ee      	b.n	4c36 <z_set_prio+0x72>
    4c58:	20000c18 	.word	0x20000c18

00004c5c <z_impl_k_thread_suspend>:
{
    4c5c:	b570      	push	{r4, r5, r6, lr}
    4c5e:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    4c60:	3018      	adds	r0, #24
    4c62:	f001 fbf2 	bl	644a <z_abort_timeout>
	__asm__ volatile(
    4c66:	f04f 0320 	mov.w	r3, #32
    4c6a:	f3ef 8611 	mrs	r6, BASEPRI
    4c6e:	f383 8812 	msr	BASEPRI_MAX, r3
    4c72:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    4c76:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    4c7a:	7b63      	ldrb	r3, [r4, #13]
    4c7c:	2a00      	cmp	r2, #0
    4c7e:	da05      	bge.n	4c8c <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4c80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4c84:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    4c86:	4620      	mov	r0, r4
    4c88:	f001 faff 	bl	628a <sys_dlist_remove>
		update_cache(thread == _current);
    4c8c:	4d0b      	ldr	r5, [pc, #44]	; (4cbc <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    4c8e:	7b63      	ldrb	r3, [r4, #13]
    4c90:	68a8      	ldr	r0, [r5, #8]
    4c92:	f043 0310 	orr.w	r3, r3, #16
    4c96:	7363      	strb	r3, [r4, #13]
    4c98:	1b03      	subs	r3, r0, r4
    4c9a:	4258      	negs	r0, r3
    4c9c:	4158      	adcs	r0, r3
    4c9e:	f7ff fe49 	bl	4934 <update_cache>
	__asm__ volatile(
    4ca2:	f386 8811 	msr	BASEPRI, r6
    4ca6:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    4caa:	68ab      	ldr	r3, [r5, #8]
    4cac:	42a3      	cmp	r3, r4
    4cae:	d103      	bne.n	4cb8 <z_impl_k_thread_suspend+0x5c>
}
    4cb0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    4cb4:	f001 bb17 	b.w	62e6 <z_reschedule_unlocked>
}
    4cb8:	bd70      	pop	{r4, r5, r6, pc}
    4cba:	bf00      	nop
    4cbc:	20000c18 	.word	0x20000c18

00004cc0 <k_sched_unlock>:
{
    4cc0:	b510      	push	{r4, lr}
	__asm__ volatile(
    4cc2:	f04f 0320 	mov.w	r3, #32
    4cc6:	f3ef 8411 	mrs	r4, BASEPRI
    4cca:	f383 8812 	msr	BASEPRI_MAX, r3
    4cce:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    4cd2:	4b08      	ldr	r3, [pc, #32]	; (4cf4 <k_sched_unlock+0x34>)
    4cd4:	689a      	ldr	r2, [r3, #8]
    4cd6:	7bd3      	ldrb	r3, [r2, #15]
    4cd8:	3301      	adds	r3, #1
    4cda:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    4cdc:	2000      	movs	r0, #0
    4cde:	f7ff fe29 	bl	4934 <update_cache>
	__asm__ volatile(
    4ce2:	f384 8811 	msr	BASEPRI, r4
    4ce6:	f3bf 8f6f 	isb	sy
}
    4cea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    4cee:	f001 bafa 	b.w	62e6 <z_reschedule_unlocked>
    4cf2:	bf00      	nop
    4cf4:	20000c18 	.word	0x20000c18

00004cf8 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    4cf8:	4b04      	ldr	r3, [pc, #16]	; (4d0c <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    4cfa:	2100      	movs	r1, #0
    4cfc:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
    4d00:	e9c3 2208 	strd	r2, r2, [r3, #32]
    4d04:	4608      	mov	r0, r1
    4d06:	f7ff bdbd 	b.w	4884 <k_sched_time_slice_set>
    4d0a:	bf00      	nop
    4d0c:	20000c18 	.word	0x20000c18

00004d10 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
    4d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    4d12:	f04f 0320 	mov.w	r3, #32
    4d16:	f3ef 8411 	mrs	r4, BASEPRI
    4d1a:	f383 8812 	msr	BASEPRI_MAX, r3
    4d1e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    4d22:	491b      	ldr	r1, [pc, #108]	; (4d90 <z_impl_k_yield+0x80>)
    4d24:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4d26:	7b43      	ldrb	r3, [r0, #13]
    4d28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4d2c:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    4d2e:	f001 faac 	bl	628a <sys_dlist_remove>
	}
	queue_thread(_current);
    4d32:	688a      	ldr	r2, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    4d34:	7b53      	ldrb	r3, [r2, #13]
	return list->head == list;
    4d36:	4608      	mov	r0, r1
    4d38:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4d3c:	7353      	strb	r3, [r2, #13]
    4d3e:	f850 3f20 	ldr.w	r3, [r0, #32]!
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    4d42:	6a4e      	ldr	r6, [r1, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4d44:	4283      	cmp	r3, r0
    4d46:	bf08      	it	eq
    4d48:	2300      	moveq	r3, #0
    4d4a:	2b00      	cmp	r3, #0
    4d4c:	bf38      	it	cc
    4d4e:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4d50:	b1cb      	cbz	r3, 4d86 <z_impl_k_yield+0x76>
	int32_t b1 = thread_1->base.prio;
    4d52:	f992 700e 	ldrsb.w	r7, [r2, #14]
	int32_t b2 = thread_2->base.prio;
    4d56:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
    4d5a:	42af      	cmp	r7, r5
    4d5c:	d00f      	beq.n	4d7e <z_impl_k_yield+0x6e>
		return b2 - b1;
    4d5e:	1bed      	subs	r5, r5, r7
		if (z_sched_prio_cmp(thread, t) > 0) {
    4d60:	2d00      	cmp	r5, #0
    4d62:	dd0c      	ble.n	4d7e <z_impl_k_yield+0x6e>
	sys_dnode_t *const prev = successor->prev;
    4d64:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    4d66:	e9c2 3100 	strd	r3, r1, [r2]
	prev->next = node;
    4d6a:	600a      	str	r2, [r1, #0]
	successor->prev = node;
    4d6c:	605a      	str	r2, [r3, #4]
	update_cache(1);
    4d6e:	2001      	movs	r0, #1
    4d70:	f7ff fde0 	bl	4934 <update_cache>
    4d74:	4620      	mov	r0, r4
	z_swap(&sched_spinlock, key);
}
    4d76:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    4d7a:	f7fc bf73 	b.w	1c64 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    4d7e:	42b3      	cmp	r3, r6
    4d80:	d001      	beq.n	4d86 <z_impl_k_yield+0x76>
    4d82:	681b      	ldr	r3, [r3, #0]
    4d84:	e7e4      	b.n	4d50 <z_impl_k_yield+0x40>
	node->prev = tail;
    4d86:	e9c2 0600 	strd	r0, r6, [r2]
	tail->next = node;
    4d8a:	6032      	str	r2, [r6, #0]
	list->tail = node;
    4d8c:	624a      	str	r2, [r1, #36]	; 0x24
}
    4d8e:	e7ee      	b.n	4d6e <z_impl_k_yield+0x5e>
    4d90:	20000c18 	.word	0x20000c18

00004d94 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
    4d94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4d98:	4604      	mov	r4, r0
    4d9a:	460d      	mov	r5, r1
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    4d9c:	ea54 0105 	orrs.w	r1, r4, r5
    4da0:	d104      	bne.n	4dac <z_tick_sleep+0x18>
	z_impl_k_yield();
    4da2:	f7ff ffb5 	bl	4d10 <z_impl_k_yield>
		k_yield();
		return 0;
    4da6:	2000      	movs	r0, #0
		return ticks;
	}
#endif

	return 0;
}
    4da8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (Z_TICK_ABS(ticks) <= 0) {
    4dac:	f06f 0101 	mvn.w	r1, #1
    4db0:	1a0a      	subs	r2, r1, r0
    4db2:	f04f 31ff 	mov.w	r1, #4294967295
    4db6:	eb61 0305 	sbc.w	r3, r1, r5
    4dba:	2a01      	cmp	r2, #1
    4dbc:	f173 0300 	sbcs.w	r3, r3, #0
    4dc0:	da2a      	bge.n	4e18 <z_tick_sleep+0x84>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    4dc2:	f001 fb82 	bl	64ca <sys_clock_tick_get_32>
    4dc6:	1906      	adds	r6, r0, r4
    4dc8:	f04f 0320 	mov.w	r3, #32
    4dcc:	f3ef 8811 	mrs	r8, BASEPRI
    4dd0:	f383 8812 	msr	BASEPRI_MAX, r3
    4dd4:	f3bf 8f6f 	isb	sy
	pending_current = _current;
    4dd8:	4f11      	ldr	r7, [pc, #68]	; (4e20 <z_tick_sleep+0x8c>)
    4dda:	4b12      	ldr	r3, [pc, #72]	; (4e24 <z_tick_sleep+0x90>)
    4ddc:	68b8      	ldr	r0, [r7, #8]
    4dde:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    4de0:	f7ff fe9e 	bl	4b20 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    4de4:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    4de6:	4910      	ldr	r1, [pc, #64]	; (4e28 <z_tick_sleep+0x94>)
    4de8:	4622      	mov	r2, r4
    4dea:	462b      	mov	r3, r5
    4dec:	3018      	adds	r0, #24
    4dee:	f000 f9e5 	bl	51bc <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    4df2:	68ba      	ldr	r2, [r7, #8]
    4df4:	7b53      	ldrb	r3, [r2, #13]
    4df6:	f043 0310 	orr.w	r3, r3, #16
    4dfa:	7353      	strb	r3, [r2, #13]
    4dfc:	4640      	mov	r0, r8
    4dfe:	f7fc ff31 	bl	1c64 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    4e02:	f001 fb62 	bl	64ca <sys_clock_tick_get_32>
    4e06:	1a30      	subs	r0, r6, r0
    4e08:	eb66 0106 	sbc.w	r1, r6, r6
	if (ticks > 0) {
    4e0c:	2801      	cmp	r0, #1
    4e0e:	f171 0300 	sbcs.w	r3, r1, #0
		return ticks;
    4e12:	bfb8      	it	lt
    4e14:	2000      	movlt	r0, #0
    4e16:	e7c7      	b.n	4da8 <z_tick_sleep+0x14>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    4e18:	f06f 0601 	mvn.w	r6, #1
    4e1c:	1a36      	subs	r6, r6, r0
    4e1e:	e7d3      	b.n	4dc8 <z_tick_sleep+0x34>
    4e20:	20000c18 	.word	0x20000c18
    4e24:	20000c40 	.word	0x20000c40
    4e28:	0000632f 	.word	0x0000632f

00004e2c <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
    4e2c:	b508      	push	{r3, lr}
    4e2e:	460b      	mov	r3, r1
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    4e30:	3301      	adds	r3, #1
    4e32:	bf08      	it	eq
    4e34:	f1b0 3fff 	cmpeq.w	r0, #4294967295
    4e38:	d106      	bne.n	4e48 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
    4e3a:	4b08      	ldr	r3, [pc, #32]	; (4e5c <z_impl_k_sleep+0x30>)
    4e3c:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    4e3e:	f7ff ff0d 	bl	4c5c <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    4e42:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    4e46:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
    4e48:	f7ff ffa4 	bl	4d94 <z_tick_sleep>
			return (t * to_hz + off) / from_hz;
    4e4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    4e50:	fb80 2303 	smull	r2, r3, r0, r3
    4e54:	0bd0      	lsrs	r0, r2, #15
    4e56:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    4e5a:	e7f4      	b.n	4e46 <z_impl_k_sleep+0x1a>
    4e5c:	20000c18 	.word	0x20000c18

00004e60 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    4e60:	4b01      	ldr	r3, [pc, #4]	; (4e68 <z_impl_z_current_get+0x8>)
    4e62:	6898      	ldr	r0, [r3, #8]
    4e64:	4770      	bx	lr
    4e66:	bf00      	nop
    4e68:	20000c18 	.word	0x20000c18

00004e6c <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    4e6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4e70:	4604      	mov	r4, r0
    4e72:	f04f 0320 	mov.w	r3, #32
    4e76:	f3ef 8611 	mrs	r6, BASEPRI
    4e7a:	f383 8812 	msr	BASEPRI_MAX, r3
    4e7e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    4e82:	7b43      	ldrb	r3, [r0, #13]
    4e84:	071a      	lsls	r2, r3, #28
    4e86:	d505      	bpl.n	4e94 <z_thread_abort+0x28>
	__asm__ volatile(
    4e88:	f386 8811 	msr	BASEPRI, r6
    4e8c:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    4e90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
    4e94:	f023 0220 	bic.w	r2, r3, #32
    4e98:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    4e9c:	09d2      	lsrs	r2, r2, #7
    4e9e:	d120      	bne.n	4ee2 <z_thread_abort+0x76>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    4ea0:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
    4ea2:	68a3      	ldr	r3, [r4, #8]
    4ea4:	b113      	cbz	r3, 4eac <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
    4ea6:	4620      	mov	r0, r4
    4ea8:	f001 f9f7 	bl	629a <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    4eac:	f104 0018 	add.w	r0, r4, #24
    4eb0:	f001 facb 	bl	644a <z_abort_timeout>
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    4eb4:	f104 0758 	add.w	r7, r4, #88	; 0x58
    4eb8:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
    4ebc:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4ebe:	42bd      	cmp	r5, r7
    4ec0:	d000      	beq.n	4ec4 <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    4ec2:	b9b5      	cbnz	r5, 4ef2 <z_thread_abort+0x86>
		update_cache(1);
    4ec4:	2001      	movs	r0, #1
    4ec6:	f7ff fd35 	bl	4934 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    4eca:	4b10      	ldr	r3, [pc, #64]	; (4f0c <z_thread_abort+0xa0>)
    4ecc:	689b      	ldr	r3, [r3, #8]
    4ece:	42a3      	cmp	r3, r4
    4ed0:	d1da      	bne.n	4e88 <z_thread_abort+0x1c>
    4ed2:	f3ef 8305 	mrs	r3, IPSR
    4ed6:	2b00      	cmp	r3, #0
    4ed8:	d1d6      	bne.n	4e88 <z_thread_abort+0x1c>
    4eda:	4630      	mov	r0, r6
    4edc:	f7fc fec2 	bl	1c64 <arch_swap>
	return ret;
    4ee0:	e7d2      	b.n	4e88 <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4ee2:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    4ee6:	f043 0308 	orr.w	r3, r3, #8
    4eea:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    4eec:	f001 f9cd 	bl	628a <sys_dlist_remove>
}
    4ef0:	e7d7      	b.n	4ea2 <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
    4ef2:	4628      	mov	r0, r5
    4ef4:	f001 f9d1 	bl	629a <unpend_thread_no_timeout>
    4ef8:	f105 0018 	add.w	r0, r5, #24
    4efc:	f001 faa5 	bl	644a <z_abort_timeout>
    4f00:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
		ready_thread(thread);
    4f04:	4628      	mov	r0, r5
    4f06:	f7ff fdb5 	bl	4a74 <ready_thread>
    4f0a:	e7d7      	b.n	4ebc <z_thread_abort+0x50>
    4f0c:	20000c18 	.word	0x20000c18

00004f10 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    4f10:	b538      	push	{r3, r4, r5, lr}
    4f12:	4604      	mov	r4, r0
	__asm__ volatile(
    4f14:	f04f 0320 	mov.w	r3, #32
    4f18:	f3ef 8511 	mrs	r5, BASEPRI
    4f1c:	f383 8812 	msr	BASEPRI_MAX, r3
    4f20:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    4f24:	f001 fa67 	bl	63f6 <z_unpend_first_thread>

	if (thread != NULL) {
    4f28:	b148      	cbz	r0, 4f3e <z_impl_k_sem_give+0x2e>
    4f2a:	2200      	movs	r2, #0
    4f2c:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    4f2e:	f001 f9ee 	bl	630e <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    4f32:	4629      	mov	r1, r5
    4f34:	4805      	ldr	r0, [pc, #20]	; (4f4c <z_impl_k_sem_give+0x3c>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    4f36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    4f3a:	f7ff bcd5 	b.w	48e8 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    4f3e:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    4f42:	429a      	cmp	r2, r3
    4f44:	bf18      	it	ne
    4f46:	3301      	addne	r3, #1
    4f48:	60a3      	str	r3, [r4, #8]
		handle_poll_events(sem);
    4f4a:	e7f2      	b.n	4f32 <z_impl_k_sem_give+0x22>
    4f4c:	2000107e 	.word	0x2000107e

00004f50 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    4f50:	b537      	push	{r0, r1, r2, r4, r5, lr}
    4f52:	4614      	mov	r4, r2
    4f54:	461d      	mov	r5, r3
    4f56:	f04f 0320 	mov.w	r3, #32
    4f5a:	f3ef 8111 	mrs	r1, BASEPRI
    4f5e:	f383 8812 	msr	BASEPRI_MAX, r3
    4f62:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    4f66:	6883      	ldr	r3, [r0, #8]
    4f68:	b143      	cbz	r3, 4f7c <z_impl_k_sem_take+0x2c>
		sem->count--;
    4f6a:	3b01      	subs	r3, #1
    4f6c:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
    4f6e:	f381 8811 	msr	BASEPRI, r1
    4f72:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    4f76:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    4f78:	b003      	add	sp, #12
    4f7a:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    4f7c:	ea54 0305 	orrs.w	r3, r4, r5
    4f80:	d106      	bne.n	4f90 <z_impl_k_sem_take+0x40>
    4f82:	f381 8811 	msr	BASEPRI, r1
    4f86:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    4f8a:	f06f 000f 	mvn.w	r0, #15
    4f8e:	e7f3      	b.n	4f78 <z_impl_k_sem_take+0x28>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    4f90:	4602      	mov	r2, r0
    4f92:	e9cd 4500 	strd	r4, r5, [sp]
    4f96:	4802      	ldr	r0, [pc, #8]	; (4fa0 <z_impl_k_sem_take+0x50>)
    4f98:	f7ff fe00 	bl	4b9c <z_pend_curr>
	return ret;
    4f9c:	e7ec      	b.n	4f78 <z_impl_k_sem_take+0x28>
    4f9e:	bf00      	nop
    4fa0:	2000107e 	.word	0x2000107e

00004fa4 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    4fa4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    4fa8:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    4faa:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    4fac:	2604      	movs	r6, #4
    4fae:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
    4fb0:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    4fb2:	7386      	strb	r6, [r0, #14]
	sys_dlist_init(&w->waitq);
    4fb4:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
    4fb8:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    4fba:	1dd6      	adds	r6, r2, #7
	list->tail = (sys_dnode_t *)list;
    4fbc:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    4fc0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
    4fc2:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    4fc4:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    4fc8:	3720      	adds	r7, #32
	node->prev = NULL;
    4fca:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
    4fce:	e9c0 7619 	strd	r7, r6, [r0, #100]	; 0x64
	thread_base->pended_on = NULL;
    4fd2:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
    4fd4:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
    4fd6:	66c5      	str	r5, [r0, #108]	; 0x6c
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    4fd8:	f106 0820 	add.w	r8, r6, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    4fdc:	9202      	str	r2, [sp, #8]
    4fde:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    4fe0:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
    4fe2:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    4fe4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    4fe6:	9200      	str	r2, [sp, #0]
    4fe8:	4642      	mov	r2, r8
{
    4fea:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    4fec:	f7fc fe54 	bl	1c98 <arch_new_thread>
	if (!_current) {
    4ff0:	4b04      	ldr	r3, [pc, #16]	; (5004 <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
    4ff2:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
    4ff4:	689b      	ldr	r3, [r3, #8]
    4ff6:	b103      	cbz	r3, 4ffa <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
    4ff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	return stack_ptr;
    4ffa:	6723      	str	r3, [r4, #112]	; 0x70
}
    4ffc:	4640      	mov	r0, r8
    4ffe:	b004      	add	sp, #16
    5000:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5004:	20000c18 	.word	0x20000c18

00005008 <z_impl_k_thread_create>:
{
    5008:	b5f0      	push	{r4, r5, r6, r7, lr}
    500a:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    500c:	2500      	movs	r5, #0
    500e:	9505      	str	r5, [sp, #20]
    5010:	9d10      	ldr	r5, [sp, #64]	; 0x40
    5012:	9504      	str	r5, [sp, #16]
    5014:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    5016:	9503      	str	r5, [sp, #12]
    5018:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    501a:	9502      	str	r5, [sp, #8]
{
    501c:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    5020:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    5022:	9501      	str	r5, [sp, #4]
    5024:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    5026:	9500      	str	r5, [sp, #0]
{
    5028:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    502a:	f7ff ffbb 	bl	4fa4 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    502e:	1c7b      	adds	r3, r7, #1
    5030:	bf08      	it	eq
    5032:	f1b6 3fff 	cmpeq.w	r6, #4294967295
    5036:	d005      	beq.n	5044 <z_impl_k_thread_create+0x3c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    5038:	ea56 0307 	orrs.w	r3, r6, r7
    503c:	d105      	bne.n	504a <z_impl_k_thread_create+0x42>
	z_sched_start(thread);
    503e:	4620      	mov	r0, r4
    5040:	f7ff fd50 	bl	4ae4 <z_sched_start>
}
    5044:	4620      	mov	r0, r4
    5046:	b007      	add	sp, #28
    5048:	bdf0      	pop	{r4, r5, r6, r7, pc}
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    504a:	4904      	ldr	r1, [pc, #16]	; (505c <z_impl_k_thread_create+0x54>)
    504c:	4632      	mov	r2, r6
    504e:	463b      	mov	r3, r7
    5050:	f104 0018 	add.w	r0, r4, #24
    5054:	f000 f8b2 	bl	51bc <z_add_timeout>
    5058:	e7f4      	b.n	5044 <z_impl_k_thread_create+0x3c>
    505a:	bf00      	nop
    505c:	0000632f 	.word	0x0000632f

00005060 <z_init_static_threads>:
{
    5060:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
    5064:	4e2a      	ldr	r6, [pc, #168]	; (5110 <z_init_static_threads+0xb0>)
    5066:	4d2b      	ldr	r5, [pc, #172]	; (5114 <z_init_static_threads+0xb4>)
{
    5068:	b086      	sub	sp, #24
    506a:	46b0      	mov	r8, r6
	_FOREACH_STATIC_THREAD(thread_data) {
    506c:	42b5      	cmp	r5, r6
    506e:	f105 0430 	add.w	r4, r5, #48	; 0x30
    5072:	d310      	bcc.n	5096 <z_init_static_threads+0x36>
	k_sched_lock();
    5074:	f7ff fc4a 	bl	490c <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    5078:	4c26      	ldr	r4, [pc, #152]	; (5114 <z_init_static_threads+0xb4>)
    507a:	f8df a09c 	ldr.w	sl, [pc, #156]	; 5118 <z_init_static_threads+0xb8>
    507e:	f44f 4900 	mov.w	r9, #32768	; 0x8000
    5082:	f240 36e7 	movw	r6, #999	; 0x3e7
    5086:	2700      	movs	r7, #0
    5088:	4544      	cmp	r4, r8
    508a:	d321      	bcc.n	50d0 <z_init_static_threads+0x70>
}
    508c:	b006      	add	sp, #24
    508e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	k_sched_unlock();
    5092:	f7ff be15 	b.w	4cc0 <k_sched_unlock>
		z_setup_new_thread(
    5096:	f854 3c04 	ldr.w	r3, [r4, #-4]
    509a:	9305      	str	r3, [sp, #20]
    509c:	f854 3c10 	ldr.w	r3, [r4, #-16]
    50a0:	9304      	str	r3, [sp, #16]
    50a2:	f854 3c14 	ldr.w	r3, [r4, #-20]
    50a6:	9303      	str	r3, [sp, #12]
    50a8:	f854 3c18 	ldr.w	r3, [r4, #-24]
    50ac:	9302      	str	r3, [sp, #8]
    50ae:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    50b2:	9301      	str	r3, [sp, #4]
    50b4:	f854 3c20 	ldr.w	r3, [r4, #-32]
    50b8:	9300      	str	r3, [sp, #0]
    50ba:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    50be:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    50c2:	f7ff ff6f 	bl	4fa4 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    50c6:	f854 3c30 	ldr.w	r3, [r4, #-48]
    50ca:	655d      	str	r5, [r3, #84]	; 0x54
    50cc:	4625      	mov	r5, r4
    50ce:	e7cd      	b.n	506c <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    50d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    50d2:	1c5a      	adds	r2, r3, #1
    50d4:	d00d      	beq.n	50f2 <z_init_static_threads+0x92>
					    K_MSEC(thread_data->init_delay));
    50d6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    50da:	4630      	mov	r0, r6
    50dc:	4639      	mov	r1, r7
    50de:	fbc9 0103 	smlal	r0, r1, r9, r3
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    50e2:	42b9      	cmp	r1, r7
    50e4:	bf08      	it	eq
    50e6:	42b0      	cmpeq	r0, r6
			schedule_new_thread(thread_data->init_thread,
    50e8:	6825      	ldr	r5, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    50ea:	d104      	bne.n	50f6 <z_init_static_threads+0x96>
	z_sched_start(thread);
    50ec:	4628      	mov	r0, r5
    50ee:	f7ff fcf9 	bl	4ae4 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    50f2:	3430      	adds	r4, #48	; 0x30
    50f4:	e7c8      	b.n	5088 <z_init_static_threads+0x28>
    50f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    50fa:	2300      	movs	r3, #0
    50fc:	f7fb f9e2 	bl	4c4 <__aeabi_uldivmod>
    5100:	4602      	mov	r2, r0
    5102:	460b      	mov	r3, r1
    5104:	f105 0018 	add.w	r0, r5, #24
    5108:	4651      	mov	r1, sl
    510a:	f000 f857 	bl	51bc <z_add_timeout>
    510e:	e7f0      	b.n	50f2 <z_init_static_threads+0x92>
    5110:	200001f8 	.word	0x200001f8
    5114:	200001f8 	.word	0x200001f8
    5118:	0000632f 	.word	0x0000632f

0000511c <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    511c:	4b03      	ldr	r3, [pc, #12]	; (512c <elapsed+0x10>)
    511e:	681b      	ldr	r3, [r3, #0]
    5120:	b90b      	cbnz	r3, 5126 <elapsed+0xa>
    5122:	f7fe bac5 	b.w	36b0 <sys_clock_elapsed>
}
    5126:	2000      	movs	r0, #0
    5128:	4770      	bx	lr
    512a:	bf00      	nop
    512c:	20000c4c 	.word	0x20000c4c

00005130 <remove_timeout>:
{
    5130:	b530      	push	{r4, r5, lr}
    5132:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    5134:	b168      	cbz	r0, 5152 <remove_timeout+0x22>
    5136:	4a0a      	ldr	r2, [pc, #40]	; (5160 <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
    5138:	6852      	ldr	r2, [r2, #4]
    513a:	4290      	cmp	r0, r2
    513c:	d009      	beq.n	5152 <remove_timeout+0x22>
	if (next(t) != NULL) {
    513e:	b143      	cbz	r3, 5152 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    5140:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    5144:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    5148:	1912      	adds	r2, r2, r4
    514a:	eb45 0101 	adc.w	r1, r5, r1
    514e:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    5152:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
    5154:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    5156:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    5158:	2300      	movs	r3, #0
	node->prev = NULL;
    515a:	e9c0 3300 	strd	r3, r3, [r0]
}
    515e:	bd30      	pop	{r4, r5, pc}
    5160:	20000174 	.word	0x20000174

00005164 <next_timeout>:

static int32_t next_timeout(void)
{
    5164:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
    5166:	4b13      	ldr	r3, [pc, #76]	; (51b4 <next_timeout+0x50>)
    5168:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    516a:	429c      	cmp	r4, r3
    516c:	bf08      	it	eq
    516e:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    5170:	f7ff ffd4 	bl	511c <elapsed>
    5174:	4605      	mov	r5, r0
	int32_t ret = to == NULL ? MAX_WAIT
    5176:	b1bc      	cbz	r4, 51a8 <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    5178:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    517c:	1b40      	subs	r0, r0, r5
    517e:	eb61 71e5 	sbc.w	r1, r1, r5, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
    5182:	2801      	cmp	r0, #1
    5184:	f171 0300 	sbcs.w	r3, r1, #0
    5188:	db11      	blt.n	51ae <next_timeout+0x4a>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    518a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    518e:	2300      	movs	r3, #0
    5190:	4282      	cmp	r2, r0
    5192:	eb73 0401 	sbcs.w	r4, r3, r1
    5196:	da00      	bge.n	519a <next_timeout+0x36>
    5198:	4610      	mov	r0, r2

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    519a:	4b07      	ldr	r3, [pc, #28]	; (51b8 <next_timeout+0x54>)
    519c:	691b      	ldr	r3, [r3, #16]
    519e:	b113      	cbz	r3, 51a6 <next_timeout+0x42>
    51a0:	4298      	cmp	r0, r3
    51a2:	bfa8      	it	ge
    51a4:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    51a6:	bd38      	pop	{r3, r4, r5, pc}
	int32_t ret = to == NULL ? MAX_WAIT
    51a8:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    51ac:	e7f5      	b.n	519a <next_timeout+0x36>
    51ae:	2000      	movs	r0, #0
    51b0:	e7f3      	b.n	519a <next_timeout+0x36>
    51b2:	bf00      	nop
    51b4:	20000174 	.word	0x20000174
    51b8:	20000c18 	.word	0x20000c18

000051bc <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    51bc:	f1b3 3fff 	cmp.w	r3, #4294967295
    51c0:	bf08      	it	eq
    51c2:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
    51c6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    51ca:	4604      	mov	r4, r0
    51cc:	4692      	mov	sl, r2
    51ce:	469b      	mov	fp, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    51d0:	d073      	beq.n	52ba <z_add_timeout+0xfe>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    51d2:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
    51d4:	f04f 0320 	mov.w	r3, #32
    51d8:	f3ef 8511 	mrs	r5, BASEPRI
    51dc:	f383 8812 	msr	BASEPRI_MAX, r3
    51e0:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    51e4:	f06f 0301 	mvn.w	r3, #1
    51e8:	ebb3 080a 	subs.w	r8, r3, sl
    51ec:	f04f 32ff 	mov.w	r2, #4294967295
    51f0:	eb62 090b 	sbc.w	r9, r2, fp
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    51f4:	f1b8 0f00 	cmp.w	r8, #0
    51f8:	f179 0100 	sbcs.w	r1, r9, #0
    51fc:	db1c      	blt.n	5238 <z_add_timeout+0x7c>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    51fe:	4830      	ldr	r0, [pc, #192]	; (52c0 <z_add_timeout+0x104>)
    5200:	e9d0 1000 	ldrd	r1, r0, [r0]
    5204:	1a5b      	subs	r3, r3, r1
    5206:	eb62 0200 	sbc.w	r2, r2, r0

			to->dticks = MAX(1, ticks);
    520a:	ebb3 060a 	subs.w	r6, r3, sl
    520e:	eb62 070b 	sbc.w	r7, r2, fp
    5212:	2e01      	cmp	r6, #1
    5214:	f177 0300 	sbcs.w	r3, r7, #0
    5218:	bfbc      	itt	lt
    521a:	2601      	movlt	r6, #1
    521c:	2700      	movlt	r7, #0
    521e:	e9c4 6704 	strd	r6, r7, [r4, #16]
	return list->head == list;
    5222:	4a28      	ldr	r2, [pc, #160]	; (52c4 <z_add_timeout+0x108>)
    5224:	e9d2 3c00 	ldrd	r3, ip, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5228:	4293      	cmp	r3, r2
    522a:	d11e      	bne.n	526a <z_add_timeout+0xae>
	node->prev = tail;
    522c:	e9c4 2c00 	strd	r2, ip, [r4]
	tail->next = node;
    5230:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
    5234:	6054      	str	r4, [r2, #4]
}
    5236:	e02d      	b.n	5294 <z_add_timeout+0xd8>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    5238:	f7ff ff70 	bl	511c <elapsed>
    523c:	f11a 0301 	adds.w	r3, sl, #1
    5240:	9300      	str	r3, [sp, #0]
    5242:	f14b 0300 	adc.w	r3, fp, #0
    5246:	9301      	str	r3, [sp, #4]
    5248:	e9dd 2300 	ldrd	r2, r3, [sp]
    524c:	1812      	adds	r2, r2, r0
    524e:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
    5252:	e9c4 2304 	strd	r2, r3, [r4, #16]
    5256:	e7e4      	b.n	5222 <z_add_timeout+0x66>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
    5258:	ebb6 0008 	subs.w	r0, r6, r8
    525c:	eb67 0109 	sbc.w	r1, r7, r9
	return (node == list->tail) ? NULL : node->next;
    5260:	4563      	cmp	r3, ip
    5262:	e9c4 0104 	strd	r0, r1, [r4, #16]
    5266:	d0e1      	beq.n	522c <z_add_timeout+0x70>
    5268:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
    526a:	2b00      	cmp	r3, #0
    526c:	d0de      	beq.n	522c <z_add_timeout+0x70>
			if (t->dticks > to->dticks) {
    526e:	e9d3 8904 	ldrd	r8, r9, [r3, #16]
    5272:	e9d4 6704 	ldrd	r6, r7, [r4, #16]
    5276:	4546      	cmp	r6, r8
    5278:	eb77 0109 	sbcs.w	r1, r7, r9
    527c:	daec      	bge.n	5258 <z_add_timeout+0x9c>
				t->dticks -= to->dticks;
    527e:	ebb8 0006 	subs.w	r0, r8, r6
    5282:	eb69 0107 	sbc.w	r1, r9, r7
    5286:	e9c3 0104 	strd	r0, r1, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
    528a:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    528c:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
    5290:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    5292:	605c      	str	r4, [r3, #4]
	return list->head == list;
    5294:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5296:	4293      	cmp	r3, r2
    5298:	d00b      	beq.n	52b2 <z_add_timeout+0xf6>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    529a:	429c      	cmp	r4, r3
    529c:	d109      	bne.n	52b2 <z_add_timeout+0xf6>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    529e:	f7ff ff61 	bl	5164 <next_timeout>

			if (next_time == 0 ||
    52a2:	b118      	cbz	r0, 52ac <z_add_timeout+0xf0>
			    _current_cpu->slice_ticks != next_time) {
    52a4:	4b08      	ldr	r3, [pc, #32]	; (52c8 <z_add_timeout+0x10c>)
			if (next_time == 0 ||
    52a6:	691b      	ldr	r3, [r3, #16]
    52a8:	4283      	cmp	r3, r0
    52aa:	d002      	beq.n	52b2 <z_add_timeout+0xf6>
				sys_clock_set_timeout(next_time, false);
    52ac:	2100      	movs	r1, #0
    52ae:	f7fe f9cf 	bl	3650 <sys_clock_set_timeout>
	__asm__ volatile(
    52b2:	f385 8811 	msr	BASEPRI, r5
    52b6:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    52ba:	b003      	add	sp, #12
    52bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    52c0:	200004e8 	.word	0x200004e8
    52c4:	20000174 	.word	0x20000174
    52c8:	20000c18 	.word	0x20000c18

000052cc <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    52cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    52d0:	4606      	mov	r6, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    52d2:	f7ff fb8d 	bl	49f0 <z_time_slice>
	__asm__ volatile(
    52d6:	f04f 0320 	mov.w	r3, #32
    52da:	f3ef 8411 	mrs	r4, BASEPRI
    52de:	f383 8812 	msr	BASEPRI_MAX, r3
    52e2:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    52e6:	4d2c      	ldr	r5, [pc, #176]	; (5398 <sys_clock_announce+0xcc>)
    52e8:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 539c <sys_clock_announce+0xd0>
	return list->head == list;
    52ec:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 53a0 <sys_clock_announce+0xd4>
    52f0:	602e      	str	r6, [r5, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
    52f2:	4651      	mov	r1, sl
    52f4:	f8d5 c000 	ldr.w	ip, [r5]
    52f8:	f8db 0000 	ldr.w	r0, [fp]
    52fc:	4662      	mov	r2, ip
    52fe:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5300:	4558      	cmp	r0, fp
    5302:	e9da 8900 	ldrd	r8, r9, [sl]
    5306:	e9cd 2300 	strd	r2, r3, [sp]
    530a:	d00d      	beq.n	5328 <sys_clock_announce+0x5c>
    530c:	b160      	cbz	r0, 5328 <sys_clock_announce+0x5c>
    530e:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
    5312:	45b4      	cmp	ip, r6
    5314:	41bb      	sbcs	r3, r7
    5316:	da1e      	bge.n	5356 <sys_clock_announce+0x8a>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    5318:	9b00      	ldr	r3, [sp, #0]
    531a:	ebb6 0c03 	subs.w	ip, r6, r3
    531e:	9b01      	ldr	r3, [sp, #4]
    5320:	eb67 0603 	sbc.w	r6, r7, r3
    5324:	e9c0 c604 	strd	ip, r6, [r0, #16]
	}

	curr_tick += announce_remaining;
    5328:	9b00      	ldr	r3, [sp, #0]
    532a:	eb13 0208 	adds.w	r2, r3, r8
    532e:	9b01      	ldr	r3, [sp, #4]
	announce_remaining = 0;
    5330:	f04f 0600 	mov.w	r6, #0
	curr_tick += announce_remaining;
    5334:	eb43 0309 	adc.w	r3, r3, r9
    5338:	e9c1 2300 	strd	r2, r3, [r1]
	announce_remaining = 0;
    533c:	602e      	str	r6, [r5, #0]

	sys_clock_set_timeout(next_timeout(), false);
    533e:	f7ff ff11 	bl	5164 <next_timeout>
    5342:	4631      	mov	r1, r6
    5344:	f7fe f984 	bl	3650 <sys_clock_set_timeout>
	__asm__ volatile(
    5348:	f384 8811 	msr	BASEPRI, r4
    534c:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    5350:	b003      	add	sp, #12
    5352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		curr_tick += dt;
    5356:	eb18 0806 	adds.w	r8, r8, r6
		t->dticks = 0;
    535a:	f04f 0200 	mov.w	r2, #0
    535e:	f04f 0300 	mov.w	r3, #0
		curr_tick += dt;
    5362:	eb49 79e6 	adc.w	r9, r9, r6, asr #31
		t->dticks = 0;
    5366:	e9c0 2304 	strd	r2, r3, [r0, #16]
		announce_remaining -= dt;
    536a:	ebac 0606 	sub.w	r6, ip, r6
		curr_tick += dt;
    536e:	e9ca 8900 	strd	r8, r9, [sl]
		announce_remaining -= dt;
    5372:	602e      	str	r6, [r5, #0]
		remove_timeout(t);
    5374:	f7ff fedc 	bl	5130 <remove_timeout>
    5378:	f384 8811 	msr	BASEPRI, r4
    537c:	f3bf 8f6f 	isb	sy
		t->fn(t);
    5380:	6883      	ldr	r3, [r0, #8]
    5382:	4798      	blx	r3
	__asm__ volatile(
    5384:	f04f 0320 	mov.w	r3, #32
    5388:	f3ef 8411 	mrs	r4, BASEPRI
    538c:	f383 8812 	msr	BASEPRI_MAX, r3
    5390:	f3bf 8f6f 	isb	sy

	/* Note that we need to use the underlying arch-specific lock
	 * implementation.  The "irq_lock()" API in SMP context is
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();
    5394:	4901      	ldr	r1, [pc, #4]	; (539c <sys_clock_announce+0xd0>)
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    5396:	e7ad      	b.n	52f4 <sys_clock_announce+0x28>
    5398:	20000c4c 	.word	0x20000c4c
    539c:	200004e8 	.word	0x200004e8
    53a0:	20000174 	.word	0x20000174

000053a4 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    53a4:	b510      	push	{r4, lr}
    53a6:	f04f 0320 	mov.w	r3, #32
    53aa:	f3ef 8411 	mrs	r4, BASEPRI
    53ae:	f383 8812 	msr	BASEPRI_MAX, r3
    53b2:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
    53b6:	f7fe f97b 	bl	36b0 <sys_clock_elapsed>
    53ba:	4b06      	ldr	r3, [pc, #24]	; (53d4 <sys_clock_tick_get+0x30>)
    53bc:	e9d3 2300 	ldrd	r2, r3, [r3]
    53c0:	1812      	adds	r2, r2, r0
    53c2:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
    53c6:	f384 8811 	msr	BASEPRI, r4
    53ca:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    53ce:	4610      	mov	r0, r2
    53d0:	4619      	mov	r1, r3
    53d2:	bd10      	pop	{r4, pc}
    53d4:	200004e8 	.word	0x200004e8

000053d8 <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    53d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    53da:	4604      	mov	r4, r0
	__asm__ volatile(
    53dc:	f04f 0320 	mov.w	r3, #32
    53e0:	f3ef 8511 	mrs	r5, BASEPRI
    53e4:	f383 8812 	msr	BASEPRI_MAX, r3
    53e8:	f3bf 8f6f 	isb	sy

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    53ec:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
    53f0:	1c56      	adds	r6, r2, #1
    53f2:	f143 0700 	adc.w	r7, r3, #0
    53f6:	2f00      	cmp	r7, #0
    53f8:	bf08      	it	eq
    53fa:	2e02      	cmpeq	r6, #2
    53fc:	d302      	bcc.n	5404 <z_timer_expiration_handler+0x2c>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    53fe:	4917      	ldr	r1, [pc, #92]	; (545c <z_timer_expiration_handler+0x84>)
    5400:	f7ff fedc 	bl	51bc <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
    5404:	6b23      	ldr	r3, [r4, #48]	; 0x30
    5406:	3301      	adds	r3, #1
    5408:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
    540a:	6a23      	ldr	r3, [r4, #32]
    540c:	b173      	cbz	r3, 542c <z_timer_expiration_handler+0x54>
	__asm__ volatile(
    540e:	f385 8811 	msr	BASEPRI, r5
    5412:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
    5416:	6a23      	ldr	r3, [r4, #32]
    5418:	4620      	mov	r0, r4
    541a:	4798      	blx	r3
	__asm__ volatile(
    541c:	f04f 0320 	mov.w	r3, #32
    5420:	f3ef 8511 	mrs	r5, BASEPRI
    5424:	f383 8812 	msr	BASEPRI_MAX, r3
    5428:	f3bf 8f6f 	isb	sy
	return list->head == list;
    542c:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5430:	42a6      	cmp	r6, r4
    5432:	d000      	beq.n	5436 <z_timer_expiration_handler+0x5e>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
    5434:	b926      	cbnz	r6, 5440 <z_timer_expiration_handler+0x68>
	__asm__ volatile(
    5436:	f385 8811 	msr	BASEPRI, r5
    543a:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
    543e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	z_unpend_thread_no_timeout(thread);
    5440:	4630      	mov	r0, r6
    5442:	f000 ff34 	bl	62ae <z_unpend_thread_no_timeout>
    5446:	2300      	movs	r3, #0
    5448:	67b3      	str	r3, [r6, #120]	; 0x78
    544a:	f385 8811 	msr	BASEPRI, r5
    544e:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
    5452:	4630      	mov	r0, r6
}
    5454:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_ready_thread(thread);
    5458:	f000 bf59 	b.w	630e <z_ready_thread>
    545c:	000053d9 	.word	0x000053d9

00005460 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
    5460:	e92d 4f73 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, lr}
    5464:	4619      	mov	r1, r3
    5466:	4606      	mov	r6, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    5468:	1c4c      	adds	r4, r1, #1
{
    546a:	4610      	mov	r0, r2
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    546c:	bf08      	it	eq
    546e:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
    5472:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    5476:	4680      	mov	r8, r0
    5478:	4689      	mov	r9, r1
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    547a:	d04c      	beq.n	5516 <z_impl_k_timer_start+0xb6>
    547c:	461d      	mov	r5, r3
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    547e:	1c6b      	adds	r3, r5, #1
    5480:	bf08      	it	eq
    5482:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    5486:	4614      	mov	r4, r2
    5488:	d019      	beq.n	54be <z_impl_k_timer_start+0x5e>
    548a:	ea54 0305 	orrs.w	r3, r4, r5
    548e:	d016      	beq.n	54be <z_impl_k_timer_start+0x5e>
	    Z_TICK_ABS(period.ticks) < 0) {
    5490:	f06f 0301 	mvn.w	r3, #1
    5494:	ebb3 0a02 	subs.w	sl, r3, r2
    5498:	f04f 33ff 	mov.w	r3, #4294967295
    549c:	eb63 0b05 	sbc.w	fp, r3, r5
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    54a0:	f1ba 0f00 	cmp.w	sl, #0
    54a4:	f17b 0300 	sbcs.w	r3, fp, #0
    54a8:	da09      	bge.n	54be <z_impl_k_timer_start+0x5e>
		period.ticks = MAX(period.ticks - 1, 1);
    54aa:	f112 34ff 	adds.w	r4, r2, #4294967295
    54ae:	f145 35ff 	adc.w	r5, r5, #4294967295
    54b2:	2c01      	cmp	r4, #1
    54b4:	f175 0300 	sbcs.w	r3, r5, #0
    54b8:	bfbc      	itt	lt
    54ba:	2401      	movlt	r4, #1
    54bc:	2500      	movlt	r5, #0
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
    54be:	f06f 0301 	mvn.w	r3, #1
    54c2:	1a1b      	subs	r3, r3, r0
    54c4:	9300      	str	r3, [sp, #0]
    54c6:	f04f 33ff 	mov.w	r3, #4294967295
    54ca:	eb63 0301 	sbc.w	r3, r3, r1
    54ce:	9301      	str	r3, [sp, #4]
    54d0:	e9dd 2300 	ldrd	r2, r3, [sp]
    54d4:	2a00      	cmp	r2, #0
    54d6:	f173 0300 	sbcs.w	r3, r3, #0
    54da:	da0c      	bge.n	54f6 <z_impl_k_timer_start+0x96>
		duration.ticks = MAX(duration.ticks - 1, 0);
    54dc:	f110 38ff 	adds.w	r8, r0, #4294967295
    54e0:	f141 39ff 	adc.w	r9, r1, #4294967295
    54e4:	f1b8 0f00 	cmp.w	r8, #0
    54e8:	f179 0300 	sbcs.w	r3, r9, #0
    54ec:	bfbc      	itt	lt
    54ee:	f04f 0800 	movlt.w	r8, #0
    54f2:	f04f 0900 	movlt.w	r9, #0
	}

	(void)z_abort_timeout(&timer->timeout);
    54f6:	4630      	mov	r0, r6
    54f8:	f000 ffa7 	bl	644a <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
    54fc:	2300      	movs	r3, #0

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    54fe:	4907      	ldr	r1, [pc, #28]	; (551c <z_impl_k_timer_start+0xbc>)
	timer->status = 0U;
    5500:	6333      	str	r3, [r6, #48]	; 0x30
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    5502:	4642      	mov	r2, r8
    5504:	464b      	mov	r3, r9
    5506:	4630      	mov	r0, r6
	timer->period = period;
    5508:	e9c6 450a 	strd	r4, r5, [r6, #40]	; 0x28
		     duration);
}
    550c:	b002      	add	sp, #8
    550e:	e8bd 4f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    5512:	f7ff be53 	b.w	51bc <z_add_timeout>
}
    5516:	b002      	add	sp, #8
    5518:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
    551c:	000053d9 	.word	0x000053d9

00005520 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    5520:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
		 __data_region_end - __data_region_start);
    5522:	4806      	ldr	r0, [pc, #24]	; (553c <z_data_copy+0x1c>)
	(void)memcpy(&__data_region_start, &__data_region_load_start,
    5524:	4a06      	ldr	r2, [pc, #24]	; (5540 <z_data_copy+0x20>)
    5526:	4907      	ldr	r1, [pc, #28]	; (5544 <z_data_copy+0x24>)
    5528:	1a12      	subs	r2, r2, r0
    552a:	f000 fbb5 	bl	5c98 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    552e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&__ramfunc_start, &__ramfunc_load_start,
    5532:	4a05      	ldr	r2, [pc, #20]	; (5548 <z_data_copy+0x28>)
    5534:	4905      	ldr	r1, [pc, #20]	; (554c <z_data_copy+0x2c>)
    5536:	4806      	ldr	r0, [pc, #24]	; (5550 <z_data_copy+0x30>)
    5538:	f000 bbae 	b.w	5c98 <memcpy>
    553c:	20000000 	.word	0x20000000
    5540:	20000248 	.word	0x20000248
    5544:	00006d54 	.word	0x00006d54
    5548:	00000000 	.word	0x00000000
    554c:	00006d54 	.word	0x00006d54
    5550:	20000000 	.word	0x20000000

00005554 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    5554:	4a02      	ldr	r2, [pc, #8]	; (5560 <boot_banner+0xc>)
    5556:	4903      	ldr	r1, [pc, #12]	; (5564 <boot_banner+0x10>)
    5558:	4803      	ldr	r0, [pc, #12]	; (5568 <boot_banner+0x14>)
    555a:	f000 bb45 	b.w	5be8 <printk>
    555e:	bf00      	nop
    5560:	00006d52 	.word	0x00006d52
    5564:	00006d1d 	.word	0x00006d1d
    5568:	00006d2c 	.word	0x00006d2c

0000556c <nrf_cc3xx_platform_init_no_rng>:
    556c:	b510      	push	{r4, lr}
    556e:	4c0a      	ldr	r4, [pc, #40]	; (5598 <nrf_cc3xx_platform_init_no_rng+0x2c>)
    5570:	6823      	ldr	r3, [r4, #0]
    5572:	b11b      	cbz	r3, 557c <nrf_cc3xx_platform_init_no_rng+0x10>
    5574:	2301      	movs	r3, #1
    5576:	6023      	str	r3, [r4, #0]
    5578:	2000      	movs	r0, #0
    557a:	bd10      	pop	{r4, pc}
    557c:	f000 f8d6 	bl	572c <CC_LibInitNoRng>
    5580:	2800      	cmp	r0, #0
    5582:	d0f7      	beq.n	5574 <nrf_cc3xx_platform_init_no_rng+0x8>
    5584:	3801      	subs	r0, #1
    5586:	2806      	cmp	r0, #6
    5588:	d803      	bhi.n	5592 <nrf_cc3xx_platform_init_no_rng+0x26>
    558a:	4b04      	ldr	r3, [pc, #16]	; (559c <nrf_cc3xx_platform_init_no_rng+0x30>)
    558c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    5590:	bd10      	pop	{r4, pc}
    5592:	4803      	ldr	r0, [pc, #12]	; (55a0 <nrf_cc3xx_platform_init_no_rng+0x34>)
    5594:	bd10      	pop	{r4, pc}
    5596:	bf00      	nop
    5598:	20000c50 	.word	0x20000c50
    559c:	00006970 	.word	0x00006970
    55a0:	ffff8ffe 	.word	0xffff8ffe

000055a4 <nrf_cc3xx_platform_abort>:
    55a4:	f3bf 8f4f 	dsb	sy
    55a8:	4905      	ldr	r1, [pc, #20]	; (55c0 <nrf_cc3xx_platform_abort+0x1c>)
    55aa:	4b06      	ldr	r3, [pc, #24]	; (55c4 <nrf_cc3xx_platform_abort+0x20>)
    55ac:	68ca      	ldr	r2, [r1, #12]
    55ae:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    55b2:	4313      	orrs	r3, r2
    55b4:	60cb      	str	r3, [r1, #12]
    55b6:	f3bf 8f4f 	dsb	sy
    55ba:	bf00      	nop
    55bc:	e7fd      	b.n	55ba <nrf_cc3xx_platform_abort+0x16>
    55be:	bf00      	nop
    55c0:	e000ed00 	.word	0xe000ed00
    55c4:	05fa0004 	.word	0x05fa0004

000055c8 <CC_PalAbort>:
    55c8:	b4f0      	push	{r4, r5, r6, r7}
    55ca:	4f09      	ldr	r7, [pc, #36]	; (55f0 <CC_PalAbort+0x28>)
    55cc:	4e09      	ldr	r6, [pc, #36]	; (55f4 <CC_PalAbort+0x2c>)
    55ce:	4c0a      	ldr	r4, [pc, #40]	; (55f8 <CC_PalAbort+0x30>)
    55d0:	4a0a      	ldr	r2, [pc, #40]	; (55fc <CC_PalAbort+0x34>)
    55d2:	4d0b      	ldr	r5, [pc, #44]	; (5600 <CC_PalAbort+0x38>)
    55d4:	490b      	ldr	r1, [pc, #44]	; (5604 <CC_PalAbort+0x3c>)
    55d6:	f04f 33fe 	mov.w	r3, #4278124286	; 0xfefefefe
    55da:	603b      	str	r3, [r7, #0]
    55dc:	6852      	ldr	r2, [r2, #4]
    55de:	6033      	str	r3, [r6, #0]
    55e0:	6023      	str	r3, [r4, #0]
    55e2:	2400      	movs	r4, #0
    55e4:	602b      	str	r3, [r5, #0]
    55e6:	f8c1 4500 	str.w	r4, [r1, #1280]	; 0x500
    55ea:	bcf0      	pop	{r4, r5, r6, r7}
    55ec:	4710      	bx	r2
    55ee:	bf00      	nop
    55f0:	5002b400 	.word	0x5002b400
    55f4:	5002b404 	.word	0x5002b404
    55f8:	5002b408 	.word	0x5002b408
    55fc:	2000017c 	.word	0x2000017c
    5600:	5002b40c 	.word	0x5002b40c
    5604:	5002a000 	.word	0x5002a000

00005608 <nrf_cc3xx_platform_set_abort>:
    5608:	e9d0 1200 	ldrd	r1, r2, [r0]
    560c:	4b01      	ldr	r3, [pc, #4]	; (5614 <nrf_cc3xx_platform_set_abort+0xc>)
    560e:	e9c3 1200 	strd	r1, r2, [r3]
    5612:	4770      	bx	lr
    5614:	2000017c 	.word	0x2000017c

00005618 <mutex_free>:
    5618:	b510      	push	{r4, lr}
    561a:	4604      	mov	r4, r0
    561c:	b130      	cbz	r0, 562c <mutex_free+0x14>
    561e:	6863      	ldr	r3, [r4, #4]
    5620:	06db      	lsls	r3, r3, #27
    5622:	d502      	bpl.n	562a <mutex_free+0x12>
    5624:	2300      	movs	r3, #0
    5626:	6023      	str	r3, [r4, #0]
    5628:	6063      	str	r3, [r4, #4]
    562a:	bd10      	pop	{r4, pc}
    562c:	4b02      	ldr	r3, [pc, #8]	; (5638 <mutex_free+0x20>)
    562e:	4803      	ldr	r0, [pc, #12]	; (563c <mutex_free+0x24>)
    5630:	685b      	ldr	r3, [r3, #4]
    5632:	4798      	blx	r3
    5634:	e7f3      	b.n	561e <mutex_free+0x6>
    5636:	bf00      	nop
    5638:	2000017c 	.word	0x2000017c
    563c:	0000698c 	.word	0x0000698c

00005640 <mutex_unlock>:
    5640:	b168      	cbz	r0, 565e <mutex_unlock+0x1e>
    5642:	6843      	ldr	r3, [r0, #4]
    5644:	b13b      	cbz	r3, 5656 <mutex_unlock+0x16>
    5646:	06db      	lsls	r3, r3, #27
    5648:	d507      	bpl.n	565a <mutex_unlock+0x1a>
    564a:	f3bf 8f5f 	dmb	sy
    564e:	2300      	movs	r3, #0
    5650:	6003      	str	r3, [r0, #0]
    5652:	4618      	mov	r0, r3
    5654:	4770      	bx	lr
    5656:	4803      	ldr	r0, [pc, #12]	; (5664 <mutex_unlock+0x24>)
    5658:	4770      	bx	lr
    565a:	4803      	ldr	r0, [pc, #12]	; (5668 <mutex_unlock+0x28>)
    565c:	4770      	bx	lr
    565e:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    5662:	4770      	bx	lr
    5664:	ffff8fea 	.word	0xffff8fea
    5668:	ffff8fe9 	.word	0xffff8fe9

0000566c <mutex_init>:
    566c:	b510      	push	{r4, lr}
    566e:	4604      	mov	r4, r0
    5670:	b120      	cbz	r0, 567c <mutex_init+0x10>
    5672:	2200      	movs	r2, #0
    5674:	2311      	movs	r3, #17
    5676:	6022      	str	r2, [r4, #0]
    5678:	6063      	str	r3, [r4, #4]
    567a:	bd10      	pop	{r4, pc}
    567c:	4801      	ldr	r0, [pc, #4]	; (5684 <mutex_init+0x18>)
    567e:	f7ff ffa3 	bl	55c8 <CC_PalAbort>
    5682:	e7f6      	b.n	5672 <mutex_init+0x6>
    5684:	000069b4 	.word	0x000069b4

00005688 <mutex_lock>:
    5688:	b1c0      	cbz	r0, 56bc <mutex_lock+0x34>
    568a:	6843      	ldr	r3, [r0, #4]
    568c:	b1a3      	cbz	r3, 56b8 <mutex_lock+0x30>
    568e:	06db      	lsls	r3, r3, #27
    5690:	d510      	bpl.n	56b4 <mutex_lock+0x2c>
    5692:	2201      	movs	r2, #1
    5694:	f3bf 8f5b 	dmb	ish
    5698:	e850 3f00 	ldrex	r3, [r0]
    569c:	e840 2100 	strex	r1, r2, [r0]
    56a0:	2900      	cmp	r1, #0
    56a2:	d1f9      	bne.n	5698 <mutex_lock+0x10>
    56a4:	f3bf 8f5b 	dmb	ish
    56a8:	2b01      	cmp	r3, #1
    56aa:	d0f3      	beq.n	5694 <mutex_lock+0xc>
    56ac:	f3bf 8f5f 	dmb	sy
    56b0:	2000      	movs	r0, #0
    56b2:	4770      	bx	lr
    56b4:	4803      	ldr	r0, [pc, #12]	; (56c4 <mutex_lock+0x3c>)
    56b6:	4770      	bx	lr
    56b8:	4803      	ldr	r0, [pc, #12]	; (56c8 <mutex_lock+0x40>)
    56ba:	4770      	bx	lr
    56bc:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    56c0:	4770      	bx	lr
    56c2:	bf00      	nop
    56c4:	ffff8fe9 	.word	0xffff8fe9
    56c8:	ffff8fea 	.word	0xffff8fea

000056cc <nrf_cc3xx_platform_set_mutexes>:
    56cc:	b570      	push	{r4, r5, r6, lr}
    56ce:	e9d0 2300 	ldrd	r2, r3, [r0]
    56d2:	4c13      	ldr	r4, [pc, #76]	; (5720 <nrf_cc3xx_platform_set_mutexes+0x54>)
    56d4:	4d13      	ldr	r5, [pc, #76]	; (5724 <nrf_cc3xx_platform_set_mutexes+0x58>)
    56d6:	e9c4 2300 	strd	r2, r3, [r4]
    56da:	e9d0 6302 	ldrd	r6, r3, [r0, #8]
    56de:	e9c4 6302 	strd	r6, r3, [r4, #8]
    56e2:	4b11      	ldr	r3, [pc, #68]	; (5728 <nrf_cc3xx_platform_set_mutexes+0x5c>)
    56e4:	6808      	ldr	r0, [r1, #0]
    56e6:	6018      	str	r0, [r3, #0]
    56e8:	6848      	ldr	r0, [r1, #4]
    56ea:	6058      	str	r0, [r3, #4]
    56ec:	6888      	ldr	r0, [r1, #8]
    56ee:	6098      	str	r0, [r3, #8]
    56f0:	e9d1 6003 	ldrd	r6, r0, [r1, #12]
    56f4:	f8d5 1114 	ldr.w	r1, [r5, #276]	; 0x114
    56f8:	60de      	str	r6, [r3, #12]
    56fa:	6118      	str	r0, [r3, #16]
    56fc:	06cb      	lsls	r3, r1, #27
    56fe:	d50d      	bpl.n	571c <nrf_cc3xx_platform_set_mutexes+0x50>
    5700:	2300      	movs	r3, #0
    5702:	e9c5 3344 	strd	r3, r3, [r5, #272]	; 0x110
    5706:	e9c5 336d 	strd	r3, r3, [r5, #436]	; 0x1b4
    570a:	f505 7088 	add.w	r0, r5, #272	; 0x110
    570e:	4790      	blx	r2
    5710:	6823      	ldr	r3, [r4, #0]
    5712:	f505 70da 	add.w	r0, r5, #436	; 0x1b4
    5716:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    571a:	4718      	bx	r3
    571c:	bd70      	pop	{r4, r5, r6, pc}
    571e:	bf00      	nop
    5720:	2000018c 	.word	0x2000018c
    5724:	20001080 	.word	0x20001080
    5728:	2000019c 	.word	0x2000019c

0000572c <CC_LibInitNoRng>:
    572c:	b510      	push	{r4, lr}
    572e:	f000 f833 	bl	5798 <CC_HalInit>
    5732:	b120      	cbz	r0, 573e <CC_LibInitNoRng+0x12>
    5734:	2403      	movs	r4, #3
    5736:	f000 f867 	bl	5808 <CC_PalTerminate>
    573a:	4620      	mov	r0, r4
    573c:	bd10      	pop	{r4, pc}
    573e:	f000 f835 	bl	57ac <CC_PalInit>
    5742:	b990      	cbnz	r0, 576a <CC_LibInitNoRng+0x3e>
    5744:	f000 f8b0 	bl	58a8 <CC_PalPowerSaveModeSelect>
    5748:	b990      	cbnz	r0, 5770 <CC_LibInitNoRng+0x44>
    574a:	4b0f      	ldr	r3, [pc, #60]	; (5788 <CC_LibInitNoRng+0x5c>)
    574c:	681b      	ldr	r3, [r3, #0]
    574e:	0e1b      	lsrs	r3, r3, #24
    5750:	2bf0      	cmp	r3, #240	; 0xf0
    5752:	d108      	bne.n	5766 <CC_LibInitNoRng+0x3a>
    5754:	4a0d      	ldr	r2, [pc, #52]	; (578c <CC_LibInitNoRng+0x60>)
    5756:	4b0e      	ldr	r3, [pc, #56]	; (5790 <CC_LibInitNoRng+0x64>)
    5758:	6812      	ldr	r2, [r2, #0]
    575a:	429a      	cmp	r2, r3
    575c:	d00a      	beq.n	5774 <CC_LibInitNoRng+0x48>
    575e:	2407      	movs	r4, #7
    5760:	f000 f81c 	bl	579c <CC_HalTerminate>
    5764:	e7e7      	b.n	5736 <CC_LibInitNoRng+0xa>
    5766:	2406      	movs	r4, #6
    5768:	e7fa      	b.n	5760 <CC_LibInitNoRng+0x34>
    576a:	2404      	movs	r4, #4
    576c:	4620      	mov	r0, r4
    576e:	bd10      	pop	{r4, pc}
    5770:	2400      	movs	r4, #0
    5772:	e7f5      	b.n	5760 <CC_LibInitNoRng+0x34>
    5774:	2001      	movs	r0, #1
    5776:	f000 f897 	bl	58a8 <CC_PalPowerSaveModeSelect>
    577a:	4604      	mov	r4, r0
    577c:	2800      	cmp	r0, #0
    577e:	d1f7      	bne.n	5770 <CC_LibInitNoRng+0x44>
    5780:	4b04      	ldr	r3, [pc, #16]	; (5794 <CC_LibInitNoRng+0x68>)
    5782:	6018      	str	r0, [r3, #0]
    5784:	e7d9      	b.n	573a <CC_LibInitNoRng+0xe>
    5786:	bf00      	nop
    5788:	5002b928 	.word	0x5002b928
    578c:	5002ba24 	.word	0x5002ba24
    5790:	20e00000 	.word	0x20e00000
    5794:	5002ba0c 	.word	0x5002ba0c

00005798 <CC_HalInit>:
    5798:	2000      	movs	r0, #0
    579a:	4770      	bx	lr

0000579c <CC_HalTerminate>:
    579c:	2000      	movs	r0, #0
    579e:	4770      	bx	lr

000057a0 <CC_HalMaskInterrupt>:
    57a0:	4b01      	ldr	r3, [pc, #4]	; (57a8 <CC_HalMaskInterrupt+0x8>)
    57a2:	6018      	str	r0, [r3, #0]
    57a4:	4770      	bx	lr
    57a6:	bf00      	nop
    57a8:	5002ba04 	.word	0x5002ba04

000057ac <CC_PalInit>:
    57ac:	b510      	push	{r4, lr}
    57ae:	4811      	ldr	r0, [pc, #68]	; (57f4 <CC_PalInit+0x48>)
    57b0:	f000 f848 	bl	5844 <CC_PalMutexCreate>
    57b4:	b100      	cbz	r0, 57b8 <CC_PalInit+0xc>
    57b6:	bd10      	pop	{r4, pc}
    57b8:	480f      	ldr	r0, [pc, #60]	; (57f8 <CC_PalInit+0x4c>)
    57ba:	f000 f843 	bl	5844 <CC_PalMutexCreate>
    57be:	2800      	cmp	r0, #0
    57c0:	d1f9      	bne.n	57b6 <CC_PalInit+0xa>
    57c2:	4c0e      	ldr	r4, [pc, #56]	; (57fc <CC_PalInit+0x50>)
    57c4:	4620      	mov	r0, r4
    57c6:	f000 f83d 	bl	5844 <CC_PalMutexCreate>
    57ca:	2800      	cmp	r0, #0
    57cc:	d1f3      	bne.n	57b6 <CC_PalInit+0xa>
    57ce:	4b0c      	ldr	r3, [pc, #48]	; (5800 <CC_PalInit+0x54>)
    57d0:	480c      	ldr	r0, [pc, #48]	; (5804 <CC_PalInit+0x58>)
    57d2:	601c      	str	r4, [r3, #0]
    57d4:	f000 f836 	bl	5844 <CC_PalMutexCreate>
    57d8:	4601      	mov	r1, r0
    57da:	2800      	cmp	r0, #0
    57dc:	d1eb      	bne.n	57b6 <CC_PalInit+0xa>
    57de:	f000 f82d 	bl	583c <CC_PalDmaInit>
    57e2:	4604      	mov	r4, r0
    57e4:	b108      	cbz	r0, 57ea <CC_PalInit+0x3e>
    57e6:	4620      	mov	r0, r4
    57e8:	bd10      	pop	{r4, pc}
    57ea:	f000 f83f 	bl	586c <CC_PalPowerSaveModeInit>
    57ee:	4620      	mov	r0, r4
    57f0:	e7fa      	b.n	57e8 <CC_PalInit+0x3c>
    57f2:	bf00      	nop
    57f4:	200001d4 	.word	0x200001d4
    57f8:	200001c8 	.word	0x200001c8
    57fc:	200001d0 	.word	0x200001d0
    5800:	200001d8 	.word	0x200001d8
    5804:	200001cc 	.word	0x200001cc

00005808 <CC_PalTerminate>:
    5808:	b508      	push	{r3, lr}
    580a:	4808      	ldr	r0, [pc, #32]	; (582c <CC_PalTerminate+0x24>)
    580c:	f000 f824 	bl	5858 <CC_PalMutexDestroy>
    5810:	4807      	ldr	r0, [pc, #28]	; (5830 <CC_PalTerminate+0x28>)
    5812:	f000 f821 	bl	5858 <CC_PalMutexDestroy>
    5816:	4807      	ldr	r0, [pc, #28]	; (5834 <CC_PalTerminate+0x2c>)
    5818:	f000 f81e 	bl	5858 <CC_PalMutexDestroy>
    581c:	4806      	ldr	r0, [pc, #24]	; (5838 <CC_PalTerminate+0x30>)
    581e:	f000 f81b 	bl	5858 <CC_PalMutexDestroy>
    5822:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    5826:	f000 b80b 	b.w	5840 <CC_PalDmaTerminate>
    582a:	bf00      	nop
    582c:	200001d4 	.word	0x200001d4
    5830:	200001c8 	.word	0x200001c8
    5834:	200001d0 	.word	0x200001d0
    5838:	200001cc 	.word	0x200001cc

0000583c <CC_PalDmaInit>:
    583c:	2000      	movs	r0, #0
    583e:	4770      	bx	lr

00005840 <CC_PalDmaTerminate>:
    5840:	4770      	bx	lr
    5842:	bf00      	nop

00005844 <CC_PalMutexCreate>:
    5844:	b508      	push	{r3, lr}
    5846:	4b03      	ldr	r3, [pc, #12]	; (5854 <CC_PalMutexCreate+0x10>)
    5848:	6802      	ldr	r2, [r0, #0]
    584a:	681b      	ldr	r3, [r3, #0]
    584c:	6810      	ldr	r0, [r2, #0]
    584e:	4798      	blx	r3
    5850:	2000      	movs	r0, #0
    5852:	bd08      	pop	{r3, pc}
    5854:	2000018c 	.word	0x2000018c

00005858 <CC_PalMutexDestroy>:
    5858:	b508      	push	{r3, lr}
    585a:	4b03      	ldr	r3, [pc, #12]	; (5868 <CC_PalMutexDestroy+0x10>)
    585c:	6802      	ldr	r2, [r0, #0]
    585e:	685b      	ldr	r3, [r3, #4]
    5860:	6810      	ldr	r0, [r2, #0]
    5862:	4798      	blx	r3
    5864:	2000      	movs	r0, #0
    5866:	bd08      	pop	{r3, pc}
    5868:	2000018c 	.word	0x2000018c

0000586c <CC_PalPowerSaveModeInit>:
    586c:	b570      	push	{r4, r5, r6, lr}
    586e:	4c09      	ldr	r4, [pc, #36]	; (5894 <CC_PalPowerSaveModeInit+0x28>)
    5870:	4d09      	ldr	r5, [pc, #36]	; (5898 <CC_PalPowerSaveModeInit+0x2c>)
    5872:	6920      	ldr	r0, [r4, #16]
    5874:	68ab      	ldr	r3, [r5, #8]
    5876:	4798      	blx	r3
    5878:	b118      	cbz	r0, 5882 <CC_PalPowerSaveModeInit+0x16>
    587a:	4b08      	ldr	r3, [pc, #32]	; (589c <CC_PalPowerSaveModeInit+0x30>)
    587c:	4808      	ldr	r0, [pc, #32]	; (58a0 <CC_PalPowerSaveModeInit+0x34>)
    587e:	685b      	ldr	r3, [r3, #4]
    5880:	4798      	blx	r3
    5882:	4a08      	ldr	r2, [pc, #32]	; (58a4 <CC_PalPowerSaveModeInit+0x38>)
    5884:	68eb      	ldr	r3, [r5, #12]
    5886:	6920      	ldr	r0, [r4, #16]
    5888:	2100      	movs	r1, #0
    588a:	6011      	str	r1, [r2, #0]
    588c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5890:	4718      	bx	r3
    5892:	bf00      	nop
    5894:	2000019c 	.word	0x2000019c
    5898:	2000018c 	.word	0x2000018c
    589c:	2000017c 	.word	0x2000017c
    58a0:	000069d8 	.word	0x000069d8
    58a4:	20000c64 	.word	0x20000c64

000058a8 <CC_PalPowerSaveModeSelect>:
    58a8:	b570      	push	{r4, r5, r6, lr}
    58aa:	4d1a      	ldr	r5, [pc, #104]	; (5914 <CC_PalPowerSaveModeSelect+0x6c>)
    58ac:	4e1a      	ldr	r6, [pc, #104]	; (5918 <CC_PalPowerSaveModeSelect+0x70>)
    58ae:	4604      	mov	r4, r0
    58b0:	68b2      	ldr	r2, [r6, #8]
    58b2:	6928      	ldr	r0, [r5, #16]
    58b4:	4790      	blx	r2
    58b6:	b9f0      	cbnz	r0, 58f6 <CC_PalPowerSaveModeSelect+0x4e>
    58b8:	b15c      	cbz	r4, 58d2 <CC_PalPowerSaveModeSelect+0x2a>
    58ba:	4c18      	ldr	r4, [pc, #96]	; (591c <CC_PalPowerSaveModeSelect+0x74>)
    58bc:	6823      	ldr	r3, [r4, #0]
    58be:	b1ab      	cbz	r3, 58ec <CC_PalPowerSaveModeSelect+0x44>
    58c0:	2b01      	cmp	r3, #1
    58c2:	d01a      	beq.n	58fa <CC_PalPowerSaveModeSelect+0x52>
    58c4:	3b01      	subs	r3, #1
    58c6:	6023      	str	r3, [r4, #0]
    58c8:	6928      	ldr	r0, [r5, #16]
    58ca:	68f3      	ldr	r3, [r6, #12]
    58cc:	4798      	blx	r3
    58ce:	2000      	movs	r0, #0
    58d0:	bd70      	pop	{r4, r5, r6, pc}
    58d2:	4c12      	ldr	r4, [pc, #72]	; (591c <CC_PalPowerSaveModeSelect+0x74>)
    58d4:	6821      	ldr	r1, [r4, #0]
    58d6:	b939      	cbnz	r1, 58e8 <CC_PalPowerSaveModeSelect+0x40>
    58d8:	4b11      	ldr	r3, [pc, #68]	; (5920 <CC_PalPowerSaveModeSelect+0x78>)
    58da:	4a12      	ldr	r2, [pc, #72]	; (5924 <CC_PalPowerSaveModeSelect+0x7c>)
    58dc:	2001      	movs	r0, #1
    58de:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    58e2:	6813      	ldr	r3, [r2, #0]
    58e4:	2b00      	cmp	r3, #0
    58e6:	d1fc      	bne.n	58e2 <CC_PalPowerSaveModeSelect+0x3a>
    58e8:	3101      	adds	r1, #1
    58ea:	6021      	str	r1, [r4, #0]
    58ec:	68f3      	ldr	r3, [r6, #12]
    58ee:	6928      	ldr	r0, [r5, #16]
    58f0:	4798      	blx	r3
    58f2:	2000      	movs	r0, #0
    58f4:	bd70      	pop	{r4, r5, r6, pc}
    58f6:	480c      	ldr	r0, [pc, #48]	; (5928 <CC_PalPowerSaveModeSelect+0x80>)
    58f8:	bd70      	pop	{r4, r5, r6, pc}
    58fa:	4a0a      	ldr	r2, [pc, #40]	; (5924 <CC_PalPowerSaveModeSelect+0x7c>)
    58fc:	6813      	ldr	r3, [r2, #0]
    58fe:	2b00      	cmp	r3, #0
    5900:	d1fc      	bne.n	58fc <CC_PalPowerSaveModeSelect+0x54>
    5902:	4a07      	ldr	r2, [pc, #28]	; (5920 <CC_PalPowerSaveModeSelect+0x78>)
    5904:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    5908:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    590c:	f7ff ff48 	bl	57a0 <CC_HalMaskInterrupt>
    5910:	6823      	ldr	r3, [r4, #0]
    5912:	e7d7      	b.n	58c4 <CC_PalPowerSaveModeSelect+0x1c>
    5914:	2000019c 	.word	0x2000019c
    5918:	2000018c 	.word	0x2000018c
    591c:	20000c64 	.word	0x20000c64
    5920:	5002a000 	.word	0x5002a000
    5924:	5002b910 	.word	0x5002b910
    5928:	ffff8fe9 	.word	0xffff8fe9

0000592c <z_impl_gpio_pin_configure>:
{
    592c:	b4f0      	push	{r4, r5, r6, r7}
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
    592e:	04d4      	lsls	r4, r2, #19
	const struct gpio_driver_api *api =
    5930:	6887      	ldr	r7, [r0, #8]
	struct gpio_driver_data *data =
    5932:	6906      	ldr	r6, [r0, #16]
{
    5934:	4613      	mov	r3, r2
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
    5936:	d506      	bpl.n	5946 <z_impl_gpio_pin_configure+0x1a>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
    5938:	f412 6f40 	tst.w	r2, #3072	; 0xc00
    593c:	d003      	beq.n	5946 <z_impl_gpio_pin_configure+0x1a>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
    593e:	07da      	lsls	r2, r3, #31
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
    5940:	bf48      	it	mi
    5942:	f483 6340 	eormi.w	r3, r3, #3072	; 0xc00
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
    5946:	6834      	ldr	r4, [r6, #0]
    5948:	2501      	movs	r5, #1
    594a:	408d      	lsls	r5, r1
    594c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    5950:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
    5952:	bf4c      	ite	mi
    5954:	432c      	orrmi	r4, r5
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    5956:	43ac      	bicpl	r4, r5
	return api->pin_configure(port, pin, flags);
    5958:	683b      	ldr	r3, [r7, #0]
    595a:	6034      	str	r4, [r6, #0]
}
    595c:	bcf0      	pop	{r4, r5, r6, r7}
	return api->pin_configure(port, pin, flags);
    595e:	4718      	bx	r3

00005960 <z_impl_gpio_pin_interrupt_configure.constprop.0>:
static inline int z_impl_gpio_pin_interrupt_configure(const struct device *port,
    5960:	b410      	push	{r4}
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
    5962:	6904      	ldr	r4, [r0, #16]
	const struct gpio_driver_api *api =
    5964:	6882      	ldr	r2, [r0, #8]
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
    5966:	6824      	ldr	r4, [r4, #0]
    5968:	2301      	movs	r3, #1
    596a:	408b      	lsls	r3, r1
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
    596c:	4223      	tst	r3, r4
	return api->pin_interrupt_configure(port, pin, mode, trig);
    596e:	6994      	ldr	r4, [r2, #24]
    5970:	bf18      	it	ne
    5972:	f44f 3300 	movne.w	r3, #131072	; 0x20000
    5976:	46a4      	mov	ip, r4
    5978:	bf08      	it	eq
    597a:	f44f 2380 	moveq.w	r3, #262144	; 0x40000
}
    597e:	bc10      	pop	{r4}
	return api->pin_interrupt_configure(port, pin, mode, trig);
    5980:	f44f 32a0 	mov.w	r2, #81920	; 0x14000
    5984:	4760      	bx	ip

00005986 <encode_uint>:
{
    5986:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    598a:	4699      	mov	r9, r3
	bool upcase = isupper((int)conv->specifier);
    598c:	78d3      	ldrb	r3, [r2, #3]
{
    598e:	4614      	mov	r4, r2
	switch (specifier) {
    5990:	2b6f      	cmp	r3, #111	; 0x6f
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    5992:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
{
    5996:	4606      	mov	r6, r0
    5998:	460f      	mov	r7, r1
    599a:	9201      	str	r2, [sp, #4]
	switch (specifier) {
    599c:	d02d      	beq.n	59fa <encode_uint+0x74>
    599e:	d828      	bhi.n	59f2 <encode_uint+0x6c>
		return 16;
    59a0:	2b58      	cmp	r3, #88	; 0x58
    59a2:	bf14      	ite	ne
    59a4:	250a      	movne	r5, #10
    59a6:	2510      	moveq	r5, #16
	char *bp = bps + (bpe - bps);
    59a8:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
		unsigned int lsv = (unsigned int)(value % radix);
    59ac:	46aa      	mov	sl, r5
    59ae:	f04f 0b00 	mov.w	fp, #0
    59b2:	4652      	mov	r2, sl
    59b4:	465b      	mov	r3, fp
    59b6:	4630      	mov	r0, r6
    59b8:	4639      	mov	r1, r7
    59ba:	f7fa fd83 	bl	4c4 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    59be:	2a09      	cmp	r2, #9
    59c0:	b2d3      	uxtb	r3, r2
    59c2:	d81f      	bhi.n	5a04 <encode_uint+0x7e>
    59c4:	3330      	adds	r3, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    59c6:	455f      	cmp	r7, fp
		*--bp = (lsv <= 9) ? ('0' + lsv)
    59c8:	b2db      	uxtb	r3, r3
	} while ((value != 0) && (bps < bp));
    59ca:	bf08      	it	eq
    59cc:	4556      	cmpeq	r6, sl
		*--bp = (lsv <= 9) ? ('0' + lsv)
    59ce:	f808 3d01 	strb.w	r3, [r8, #-1]!
	} while ((value != 0) && (bps < bp));
    59d2:	d301      	bcc.n	59d8 <encode_uint+0x52>
    59d4:	45c8      	cmp	r8, r9
    59d6:	d812      	bhi.n	59fe <encode_uint+0x78>
	if (conv->flag_hash) {
    59d8:	7823      	ldrb	r3, [r4, #0]
    59da:	069b      	lsls	r3, r3, #26
    59dc:	d505      	bpl.n	59ea <encode_uint+0x64>
		if (radix == 8) {
    59de:	2d08      	cmp	r5, #8
    59e0:	d116      	bne.n	5a10 <encode_uint+0x8a>
			conv->altform_0 = true;
    59e2:	78a3      	ldrb	r3, [r4, #2]
    59e4:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    59e8:	70a3      	strb	r3, [r4, #2]
}
    59ea:	4640      	mov	r0, r8
    59ec:	b003      	add	sp, #12
    59ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    59f2:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
    59f6:	2b70      	cmp	r3, #112	; 0x70
    59f8:	e7d3      	b.n	59a2 <encode_uint+0x1c>
	switch (specifier) {
    59fa:	2508      	movs	r5, #8
    59fc:	e7d4      	b.n	59a8 <encode_uint+0x22>
		value /= radix;
    59fe:	4606      	mov	r6, r0
    5a00:	460f      	mov	r7, r1
    5a02:	e7d6      	b.n	59b2 <encode_uint+0x2c>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    5a04:	9a01      	ldr	r2, [sp, #4]
    5a06:	2a19      	cmp	r2, #25
    5a08:	bf94      	ite	ls
    5a0a:	3337      	addls	r3, #55	; 0x37
    5a0c:	3357      	addhi	r3, #87	; 0x57
    5a0e:	e7da      	b.n	59c6 <encode_uint+0x40>
		} else if (radix == 16) {
    5a10:	2d10      	cmp	r5, #16
    5a12:	d1ea      	bne.n	59ea <encode_uint+0x64>
			conv->altform_0c = true;
    5a14:	78a3      	ldrb	r3, [r4, #2]
    5a16:	f043 0310 	orr.w	r3, r3, #16
    5a1a:	e7e5      	b.n	59e8 <encode_uint+0x62>

00005a1c <outs>:
{
    5a1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5a20:	4607      	mov	r7, r0
    5a22:	4688      	mov	r8, r1
    5a24:	4615      	mov	r5, r2
    5a26:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    5a28:	4614      	mov	r4, r2
    5a2a:	42b4      	cmp	r4, r6
    5a2c:	eba4 0005 	sub.w	r0, r4, r5
    5a30:	d302      	bcc.n	5a38 <outs+0x1c>
    5a32:	b93e      	cbnz	r6, 5a44 <outs+0x28>
    5a34:	7823      	ldrb	r3, [r4, #0]
    5a36:	b12b      	cbz	r3, 5a44 <outs+0x28>
		int rc = out((int)*sp++, ctx);
    5a38:	f814 0b01 	ldrb.w	r0, [r4], #1
    5a3c:	4641      	mov	r1, r8
    5a3e:	47b8      	blx	r7
		if (rc < 0) {
    5a40:	2800      	cmp	r0, #0
    5a42:	daf2      	bge.n	5a2a <outs+0xe>
}
    5a44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00005a48 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    5a48:	4770      	bx	lr

00005a4a <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    5a4a:	4603      	mov	r3, r0
    5a4c:	b158      	cbz	r0, 5a66 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    5a4e:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    5a50:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    5a54:	2a01      	cmp	r2, #1
    5a56:	d003      	beq.n	5a60 <sys_notify_validate+0x16>
    5a58:	2a03      	cmp	r2, #3
    5a5a:	d104      	bne.n	5a66 <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    5a5c:	6802      	ldr	r2, [r0, #0]
    5a5e:	b112      	cbz	r2, 5a66 <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    5a60:	2000      	movs	r0, #0
    5a62:	6098      	str	r0, [r3, #8]
    5a64:	4770      	bx	lr
		return -EINVAL;
    5a66:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    5a6a:	4770      	bx	lr

00005a6c <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    5a6c:	6842      	ldr	r2, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    5a6e:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
    5a70:	f002 0203 	and.w	r2, r2, #3
	switch (method) {
    5a74:	2a03      	cmp	r2, #3
    5a76:	f04f 0200 	mov.w	r2, #0
{
    5a7a:	4603      	mov	r3, r0
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    5a7c:	bf0c      	ite	eq
    5a7e:	6800      	ldreq	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
    5a80:	4610      	movne	r0, r2
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    5a82:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    5a84:	4770      	bx	lr

00005a86 <abort_function>:
{
    5a86:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    5a88:	2000      	movs	r0, #0
    5a8a:	f7fc f809 	bl	1aa0 <sys_reboot>

00005a8e <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    5a8e:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    5a90:	f013 0307 	ands.w	r3, r3, #7
    5a94:	d105      	bne.n	5aa2 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    5a96:	6803      	ldr	r3, [r0, #0]
    5a98:	2b00      	cmp	r3, #0
		evt = EVT_START;
    5a9a:	bf0c      	ite	eq
    5a9c:	2000      	moveq	r0, #0
    5a9e:	2003      	movne	r0, #3
    5aa0:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    5aa2:	2b02      	cmp	r3, #2
    5aa4:	d105      	bne.n	5ab2 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    5aa6:	8b43      	ldrh	r3, [r0, #26]
    5aa8:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
    5aaa:	bf14      	ite	ne
    5aac:	2000      	movne	r0, #0
    5aae:	2004      	moveq	r0, #4
    5ab0:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    5ab2:	2b01      	cmp	r3, #1
    5ab4:	d105      	bne.n	5ac2 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    5ab6:	6803      	ldr	r3, [r0, #0]
    5ab8:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
    5aba:	bf0c      	ite	eq
    5abc:	2000      	moveq	r0, #0
    5abe:	2005      	movne	r0, #5
    5ac0:	4770      	bx	lr
	int evt = EVT_NOP;
    5ac2:	2000      	movs	r0, #0
}
    5ac4:	4770      	bx	lr

00005ac6 <notify_one>:
{
    5ac6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5aca:	460d      	mov	r5, r1
    5acc:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    5ace:	4619      	mov	r1, r3
    5ad0:	1d28      	adds	r0, r5, #4
{
    5ad2:	4690      	mov	r8, r2
    5ad4:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    5ad6:	f7ff ffc9 	bl	5a6c <sys_notify_finalize>
	if (cb) {
    5ada:	4604      	mov	r4, r0
    5adc:	b138      	cbz	r0, 5aee <notify_one+0x28>
		cb(mgr, cli, state, res);
    5ade:	4633      	mov	r3, r6
    5ae0:	4642      	mov	r2, r8
    5ae2:	4629      	mov	r1, r5
    5ae4:	4638      	mov	r0, r7
    5ae6:	46a4      	mov	ip, r4
}
    5ae8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    5aec:	4760      	bx	ip
}
    5aee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00005af2 <transition_complete>:
{
    5af2:	b410      	push	{r4}
	__asm__ volatile(
    5af4:	f04f 0420 	mov.w	r4, #32
    5af8:	f3ef 8211 	mrs	r2, BASEPRI
    5afc:	f384 8812 	msr	BASEPRI_MAX, r4
    5b00:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    5b04:	6141      	str	r1, [r0, #20]
}
    5b06:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
    5b08:	2101      	movs	r1, #1
    5b0a:	f7fb bdb5 	b.w	1678 <process_event>

00005b0e <validate_args>:
{
    5b0e:	b510      	push	{r4, lr}
    5b10:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    5b12:	b140      	cbz	r0, 5b26 <validate_args+0x18>
    5b14:	b139      	cbz	r1, 5b26 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
    5b16:	1d08      	adds	r0, r1, #4
    5b18:	f7ff ff97 	bl	5a4a <sys_notify_validate>
	if ((rv == 0)
    5b1c:	b928      	cbnz	r0, 5b2a <validate_args+0x1c>
	    && ((cli->notify.flags
    5b1e:	68a3      	ldr	r3, [r4, #8]
    5b20:	f033 0303 	bics.w	r3, r3, #3
    5b24:	d001      	beq.n	5b2a <validate_args+0x1c>
		rv = -EINVAL;
    5b26:	f06f 0015 	mvn.w	r0, #21
}
    5b2a:	bd10      	pop	{r4, pc}

00005b2c <onoff_manager_init>:
{
    5b2c:	b538      	push	{r3, r4, r5, lr}
    5b2e:	460c      	mov	r4, r1
	if ((mgr == NULL)
    5b30:	4605      	mov	r5, r0
    5b32:	b158      	cbz	r0, 5b4c <onoff_manager_init+0x20>
	    || (transitions == NULL)
    5b34:	b151      	cbz	r1, 5b4c <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    5b36:	680b      	ldr	r3, [r1, #0]
    5b38:	b143      	cbz	r3, 5b4c <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    5b3a:	684b      	ldr	r3, [r1, #4]
    5b3c:	b133      	cbz	r3, 5b4c <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    5b3e:	221c      	movs	r2, #28
    5b40:	2100      	movs	r1, #0
    5b42:	f000 f8b4 	bl	5cae <memset>
    5b46:	612c      	str	r4, [r5, #16]
	return 0;
    5b48:	2000      	movs	r0, #0
}
    5b4a:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    5b4c:	f06f 0015 	mvn.w	r0, #21
    5b50:	e7fb      	b.n	5b4a <onoff_manager_init+0x1e>

00005b52 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    5b52:	b570      	push	{r4, r5, r6, lr}
    5b54:	4604      	mov	r4, r0
    5b56:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    5b58:	f7ff ffd9 	bl	5b0e <validate_args>

	if (rv < 0) {
    5b5c:	1e05      	subs	r5, r0, #0
    5b5e:	db31      	blt.n	5bc4 <onoff_request+0x72>
    5b60:	f04f 0320 	mov.w	r3, #32
    5b64:	f3ef 8111 	mrs	r1, BASEPRI
    5b68:	f383 8812 	msr	BASEPRI_MAX, r3
    5b6c:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    5b70:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    5b72:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
    5b74:	f64f 75ff 	movw	r5, #65535	; 0xffff
    5b78:	42ab      	cmp	r3, r5
    5b7a:	f000 0207 	and.w	r2, r0, #7
    5b7e:	d02e      	beq.n	5bde <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    5b80:	2a02      	cmp	r2, #2
    5b82:	d10e      	bne.n	5ba2 <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    5b84:	3301      	adds	r3, #1
    5b86:	8363      	strh	r3, [r4, #26]
	rv = state;
    5b88:	4615      	mov	r5, r2
		notify = true;
    5b8a:	2301      	movs	r3, #1
	__asm__ volatile(
    5b8c:	f381 8811 	msr	BASEPRI, r1
    5b90:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    5b94:	b1b3      	cbz	r3, 5bc4 <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
    5b96:	2300      	movs	r3, #0
    5b98:	4631      	mov	r1, r6
    5b9a:	4620      	mov	r0, r4
    5b9c:	f7ff ff93 	bl	5ac6 <notify_one>
    5ba0:	e010      	b.n	5bc4 <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
    5ba2:	0783      	lsls	r3, r0, #30
    5ba4:	d001      	beq.n	5baa <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
    5ba6:	2a06      	cmp	r2, #6
    5ba8:	d10e      	bne.n	5bc8 <onoff_request+0x76>
	parent->next = child;
    5baa:	2300      	movs	r3, #0
    5bac:	6033      	str	r3, [r6, #0]
Z_GENLIST_APPEND(slist, snode)
    5bae:	6863      	ldr	r3, [r4, #4]
    5bb0:	b993      	cbnz	r3, 5bd8 <onoff_request+0x86>
	list->head = node;
    5bb2:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
    5bb6:	4615      	mov	r5, r2
    5bb8:	b962      	cbnz	r2, 5bd4 <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
    5bba:	460a      	mov	r2, r1
    5bbc:	4620      	mov	r0, r4
    5bbe:	2102      	movs	r1, #2
    5bc0:	f7fb fd5a 	bl	1678 <process_event>
		}
	}

	return rv;
}
    5bc4:	4628      	mov	r0, r5
    5bc6:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
    5bc8:	2a05      	cmp	r2, #5
    5bca:	bf0c      	ite	eq
    5bcc:	f06f 0585 	mvneq.w	r5, #133	; 0x85
    5bd0:	f06f 0504 	mvnne.w	r5, #4
    5bd4:	2300      	movs	r3, #0
    5bd6:	e7d9      	b.n	5b8c <onoff_request+0x3a>
	parent->next = child;
    5bd8:	601e      	str	r6, [r3, #0]
	list->tail = node;
    5bda:	6066      	str	r6, [r4, #4]
}
    5bdc:	e7eb      	b.n	5bb6 <onoff_request+0x64>
		rv = -EAGAIN;
    5bde:	f06f 050a 	mvn.w	r5, #10
    5be2:	e7f7      	b.n	5bd4 <onoff_request+0x82>

00005be4 <arch_printk_char_out>:
}
    5be4:	2000      	movs	r0, #0
    5be6:	4770      	bx	lr

00005be8 <printk>:
 *
 * @return N/A
 */

void printk(const char *fmt, ...)
{
    5be8:	b40f      	push	{r0, r1, r2, r3}
    5bea:	b507      	push	{r0, r1, r2, lr}
    5bec:	a904      	add	r1, sp, #16
    5bee:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    5bf2:	9101      	str	r1, [sp, #4]

	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		log_printk(fmt, ap);
	} else {
		vprintk(fmt, ap);
    5bf4:	f7fb ff46 	bl	1a84 <vprintk>
	}
	va_end(ap);
}
    5bf8:	b003      	add	sp, #12
    5bfa:	f85d eb04 	ldr.w	lr, [sp], #4
    5bfe:	b004      	add	sp, #16
    5c00:	4770      	bx	lr

00005c02 <pm_policy_next_state>:
		}
	}

error:
	LOG_DBG("No suitable power state found for cpu: %d!", cpu);
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
    5c02:	2200      	movs	r2, #0
    5c04:	e9c0 2200 	strd	r2, r2, [r0]
    5c08:	6082      	str	r2, [r0, #8]
}
    5c0a:	4770      	bx	lr

00005c0c <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    5c0c:	4604      	mov	r4, r0
    5c0e:	b508      	push	{r3, lr}
    5c10:	4608      	mov	r0, r1
    5c12:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    5c14:	461a      	mov	r2, r3
    5c16:	47a0      	blx	r4
	return z_impl_z_current_get();
    5c18:	f7ff f922 	bl	4e60 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    5c1c:	f7fc fa0a 	bl	2034 <z_impl_k_thread_abort>

00005c20 <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    5c20:	f000 bac6 	b.w	61b0 <z_fatal_error>

00005c24 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    5c24:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
    5c26:	6800      	ldr	r0, [r0, #0]
    5c28:	f000 bac2 	b.w	61b0 <z_fatal_error>

00005c2c <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    5c2c:	2100      	movs	r1, #0
    5c2e:	2001      	movs	r0, #1
    5c30:	f7ff bff6 	b.w	5c20 <z_arm_fatal_error>

00005c34 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
    5c34:	b508      	push	{r3, lr}
	handler();
    5c36:	f7fb ff85 	bl	1b44 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    5c3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    5c3e:	f7fc b877 	b.w	1d30 <z_arm_exc_exit>

00005c42 <_stdout_hook_default>:
}
    5c42:	f04f 30ff 	mov.w	r0, #4294967295
    5c46:	4770      	bx	lr

00005c48 <fputc>:
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&c, *(uintptr_t *)&stream, K_SYSCALL_ZEPHYR_FPUTC);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_fputc(c, stream);
    5c48:	f7fc bada 	b.w	2200 <z_impl_zephyr_fputc>

00005c4c <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    5c4c:	3901      	subs	r1, #1
    5c4e:	4603      	mov	r3, r0
    5c50:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    5c54:	b90a      	cbnz	r2, 5c5a <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
    5c56:	701a      	strb	r2, [r3, #0]

	return dest;
}
    5c58:	4770      	bx	lr
		*d = *s;
    5c5a:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
    5c5e:	e7f7      	b.n	5c50 <strcpy+0x4>

00005c60 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    5c60:	4603      	mov	r3, r0
	size_t n = 0;
    5c62:	2000      	movs	r0, #0

	while (*s != '\0') {
    5c64:	5c1a      	ldrb	r2, [r3, r0]
    5c66:	b902      	cbnz	r2, 5c6a <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    5c68:	4770      	bx	lr
		n++;
    5c6a:	3001      	adds	r0, #1
    5c6c:	e7fa      	b.n	5c64 <strlen+0x4>

00005c6e <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    5c6e:	4603      	mov	r3, r0
	size_t n = 0;
    5c70:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    5c72:	5c1a      	ldrb	r2, [r3, r0]
    5c74:	b10a      	cbz	r2, 5c7a <strnlen+0xc>
    5c76:	4288      	cmp	r0, r1
    5c78:	d100      	bne.n	5c7c <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
    5c7a:	4770      	bx	lr
		n++;
    5c7c:	3001      	adds	r0, #1
    5c7e:	e7f8      	b.n	5c72 <strnlen+0x4>

00005c80 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    5c80:	1e43      	subs	r3, r0, #1
    5c82:	3901      	subs	r1, #1
    5c84:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    5c88:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    5c8c:	4282      	cmp	r2, r0
    5c8e:	d101      	bne.n	5c94 <strcmp+0x14>
    5c90:	2a00      	cmp	r2, #0
    5c92:	d1f7      	bne.n	5c84 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    5c94:	1a10      	subs	r0, r2, r0
    5c96:	4770      	bx	lr

00005c98 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    5c98:	b510      	push	{r4, lr}
    5c9a:	1e43      	subs	r3, r0, #1
    5c9c:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    5c9e:	4291      	cmp	r1, r2
    5ca0:	d100      	bne.n	5ca4 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    5ca2:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    5ca4:	f811 4b01 	ldrb.w	r4, [r1], #1
    5ca8:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    5cac:	e7f7      	b.n	5c9e <memcpy+0x6>

00005cae <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    5cae:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    5cb0:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
    5cb2:	4603      	mov	r3, r0
	while (n > 0) {
    5cb4:	4293      	cmp	r3, r2
    5cb6:	d100      	bne.n	5cba <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    5cb8:	4770      	bx	lr
		*(d_byte++) = c_byte;
    5cba:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    5cbe:	e7f9      	b.n	5cb4 <memset+0x6>

00005cc0 <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
    5cc0:	b084      	sub	sp, #16
    5cc2:	ab04      	add	r3, sp, #16
    5cc4:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
    5cc8:	f89d 3004 	ldrb.w	r3, [sp, #4]
    5ccc:	2b06      	cmp	r3, #6
    5cce:	d108      	bne.n	5ce2 <pm_power_state_set+0x22>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    5cd0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5cd4:	2201      	movs	r2, #1
    5cd6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    5cda:	f3bf 8f4f 	dsb	sy
        __WFE();
    5cde:	bf20      	wfe
    while (true)
    5ce0:	e7fd      	b.n	5cde <pm_power_state_set+0x1e>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
    5ce2:	b004      	add	sp, #16
    5ce4:	4770      	bx	lr

00005ce6 <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
    5ce6:	b084      	sub	sp, #16
    5ce8:	ab04      	add	r3, sp, #16
    5cea:	e903 0007 	stmdb	r3, {r0, r1, r2}
    5cee:	2300      	movs	r3, #0
    5cf0:	f383 8811 	msr	BASEPRI, r3
    5cf4:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    5cf8:	b004      	add	sp, #16
    5cfa:	4770      	bx	lr

00005cfc <adc_context_on_timer_expired>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    5cfc:	f1a0 0308 	sub.w	r3, r0, #8
    5d00:	f3bf 8f5b 	dmb	ish
    5d04:	e853 2f00 	ldrex	r2, [r3]
    5d08:	1c51      	adds	r1, r2, #1
    5d0a:	e843 1c00 	strex	ip, r1, [r3]
    5d0e:	f1bc 0f00 	cmp.w	ip, #0
    5d12:	d1f7      	bne.n	5d04 <adc_context_on_timer_expired+0x8>
    5d14:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&ctx->sampling_requested) == 0) {
    5d18:	b91a      	cbnz	r2, 5d22 <adc_context_on_timer_expired+0x26>
		adc_context_start_sampling(ctx);
    5d1a:	f890 006e 	ldrb.w	r0, [r0, #110]	; 0x6e
    5d1e:	f7fc bacd 	b.w	22bc <adc_context_start_sampling.isra.0>
		ctx->status = -EBUSY;
    5d22:	f06f 030f 	mvn.w	r3, #15
    5d26:	6583      	str	r3, [r0, #88]	; 0x58
}
    5d28:	4770      	bx	lr

00005d2a <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    5d2a:	6902      	ldr	r2, [r0, #16]
    5d2c:	b2cb      	uxtb	r3, r1
    5d2e:	210c      	movs	r1, #12
    5d30:	fb03 2101 	mla	r1, r3, r1, r2
    5d34:	6c08      	ldr	r0, [r1, #64]	; 0x40
}
    5d36:	f000 0007 	and.w	r0, r0, #7
    5d3a:	4770      	bx	lr

00005d3c <set_off_state>:
	__asm__ volatile(
    5d3c:	f04f 0320 	mov.w	r3, #32
    5d40:	f3ef 8211 	mrs	r2, BASEPRI
    5d44:	f383 8812 	msr	BASEPRI_MAX, r3
    5d48:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    5d4c:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    5d4e:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    5d52:	d001      	beq.n	5d58 <set_off_state+0x1c>
    5d54:	428b      	cmp	r3, r1
    5d56:	d107      	bne.n	5d68 <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    5d58:	2301      	movs	r3, #1
    5d5a:	6003      	str	r3, [r0, #0]
	int err = 0;
    5d5c:	2000      	movs	r0, #0
	__asm__ volatile(
    5d5e:	f382 8811 	msr	BASEPRI, r2
    5d62:	f3bf 8f6f 	isb	sy
}
    5d66:	4770      	bx	lr
		err = -EPERM;
    5d68:	f04f 30ff 	mov.w	r0, #4294967295
    5d6c:	e7f7      	b.n	5d5e <set_off_state+0x22>

00005d6e <set_starting_state>:
{
    5d6e:	b510      	push	{r4, lr}
	__asm__ volatile(
    5d70:	f04f 0320 	mov.w	r3, #32
    5d74:	f3ef 8211 	mrs	r2, BASEPRI
    5d78:	f383 8812 	msr	BASEPRI_MAX, r3
    5d7c:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    5d80:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    5d82:	f003 0407 	and.w	r4, r3, #7
    5d86:	2c01      	cmp	r4, #1
    5d88:	d106      	bne.n	5d98 <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    5d8a:	6001      	str	r1, [r0, #0]
	int err = 0;
    5d8c:	2000      	movs	r0, #0
	__asm__ volatile(
    5d8e:	f382 8811 	msr	BASEPRI, r2
    5d92:	f3bf 8f6f 	isb	sy
}
    5d96:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    5d98:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
    5d9c:	428b      	cmp	r3, r1
		err = -EALREADY;
    5d9e:	bf14      	ite	ne
    5da0:	f04f 30ff 	movne.w	r0, #4294967295
    5da4:	f06f 0077 	mvneq.w	r0, #119	; 0x77
    5da8:	e7f1      	b.n	5d8e <set_starting_state+0x20>

00005daa <set_on_state>:
	__asm__ volatile(
    5daa:	f04f 0320 	mov.w	r3, #32
    5dae:	f3ef 8211 	mrs	r2, BASEPRI
    5db2:	f383 8812 	msr	BASEPRI_MAX, r3
    5db6:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    5dba:	6803      	ldr	r3, [r0, #0]
    5dbc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    5dc0:	f043 0302 	orr.w	r3, r3, #2
    5dc4:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    5dc6:	f382 8811 	msr	BASEPRI, r2
    5dca:	f3bf 8f6f 	isb	sy
}
    5dce:	4770      	bx	lr

00005dd0 <onoff_started_callback>:
	return &data->mgr[type];
    5dd0:	6900      	ldr	r0, [r0, #16]
{
    5dd2:	b410      	push	{r4}
	return &data->mgr[type];
    5dd4:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    5dd6:	241c      	movs	r4, #28
    5dd8:	fb03 0004 	mla	r0, r3, r4, r0
    5ddc:	2100      	movs	r1, #0
}
    5dde:	bc10      	pop	{r4}
	notify(mgr, 0);
    5de0:	4710      	bx	r2

00005de2 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    5de2:	2000      	movs	r0, #0
    5de4:	f7fd bc7e 	b.w	36e4 <nrfx_clock_start>

00005de8 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    5de8:	2000      	movs	r0, #0
    5dea:	f7fd bcad 	b.w	3748 <nrfx_clock_stop>

00005dee <blocking_start_callback>:
{
    5dee:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    5df0:	f7ff b88e 	b.w	4f10 <z_impl_k_sem_give>

00005df4 <api_stop>:
{
    5df4:	b538      	push	{r3, r4, r5, lr}
    5df6:	b2cc      	uxtb	r4, r1
	err = set_off_state(&subdata->flags, ctx);
    5df8:	230c      	movs	r3, #12
{
    5dfa:	4605      	mov	r5, r0
	err = set_off_state(&subdata->flags, ctx);
    5dfc:	4363      	muls	r3, r4
    5dfe:	6900      	ldr	r0, [r0, #16]
    5e00:	3340      	adds	r3, #64	; 0x40
    5e02:	2180      	movs	r1, #128	; 0x80
    5e04:	4418      	add	r0, r3
    5e06:	f7ff ff99 	bl	5d3c <set_off_state>
	if (err < 0) {
    5e0a:	2800      	cmp	r0, #0
    5e0c:	db05      	blt.n	5e1a <api_stop+0x26>
	get_sub_config(dev, type)->stop();
    5e0e:	6869      	ldr	r1, [r5, #4]
    5e10:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
    5e14:	6863      	ldr	r3, [r4, #4]
    5e16:	4798      	blx	r3
	return 0;
    5e18:	2000      	movs	r0, #0
}
    5e1a:	bd38      	pop	{r3, r4, r5, pc}

00005e1c <api_start>:
{
    5e1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5e20:	b2cd      	uxtb	r5, r1
	err = set_starting_state(&subdata->flags, ctx);
    5e22:	270c      	movs	r7, #12
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    5e24:	6904      	ldr	r4, [r0, #16]
	err = set_starting_state(&subdata->flags, ctx);
    5e26:	436f      	muls	r7, r5
{
    5e28:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
    5e2a:	f107 0040 	add.w	r0, r7, #64	; 0x40
    5e2e:	2180      	movs	r1, #128	; 0x80
    5e30:	4420      	add	r0, r4
{
    5e32:	4690      	mov	r8, r2
    5e34:	4699      	mov	r9, r3
	err = set_starting_state(&subdata->flags, ctx);
    5e36:	f7ff ff9a 	bl	5d6e <set_starting_state>
	if (err < 0) {
    5e3a:	2800      	cmp	r0, #0
    5e3c:	db07      	blt.n	5e4e <api_start+0x32>
	subdata->cb = cb;
    5e3e:	443c      	add	r4, r7
	subdata->user_data = user_data;
    5e40:	e9c4 890e 	strd	r8, r9, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    5e44:	6873      	ldr	r3, [r6, #4]
    5e46:	f853 3035 	ldr.w	r3, [r3, r5, lsl #3]
    5e4a:	4798      	blx	r3
	return 0;
    5e4c:	2000      	movs	r0, #0
}
    5e4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00005e52 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    5e52:	6843      	ldr	r3, [r0, #4]
    5e54:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    5e56:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    5e5a:	600b      	str	r3, [r1, #0]
}
    5e5c:	2000      	movs	r0, #0
    5e5e:	4770      	bx	lr

00005e60 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    5e60:	6843      	ldr	r3, [r0, #4]
    5e62:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    5e64:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    5e68:	4042      	eors	r2, r0
    5e6a:	400a      	ands	r2, r1
    5e6c:	4042      	eors	r2, r0
    p_reg->OUT = value;
    5e6e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    5e72:	2000      	movs	r0, #0
    5e74:	4770      	bx	lr

00005e76 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    5e76:	6843      	ldr	r3, [r0, #4]
    5e78:	685b      	ldr	r3, [r3, #4]
}
    5e7a:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    5e7c:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    5e80:	4770      	bx	lr

00005e82 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    5e82:	6843      	ldr	r3, [r0, #4]
    5e84:	685b      	ldr	r3, [r3, #4]
}
    5e86:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    5e88:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    5e8c:	4770      	bx	lr

00005e8e <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    5e8e:	6843      	ldr	r3, [r0, #4]
    5e90:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    5e92:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
    5e96:	404b      	eors	r3, r1
    p_reg->OUT = value;
    5e98:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
    5e9c:	2000      	movs	r0, #0
    5e9e:	4770      	bx	lr

00005ea0 <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    5ea0:	6903      	ldr	r3, [r0, #16]
Z_GENLIST_IS_EMPTY(slist)
    5ea2:	6858      	ldr	r0, [r3, #4]
{
    5ea4:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
    5ea6:	b158      	cbz	r0, 5ec0 <gpio_nrfx_manage_callback+0x20>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    5ea8:	2400      	movs	r4, #0
    5eaa:	4281      	cmp	r1, r0
    5eac:	d113      	bne.n	5ed6 <gpio_nrfx_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
    5eae:	6808      	ldr	r0, [r1, #0]
    5eb0:	b95c      	cbnz	r4, 5eca <gpio_nrfx_manage_callback+0x2a>
    5eb2:	689c      	ldr	r4, [r3, #8]
	list->head = node;
    5eb4:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    5eb6:	42a1      	cmp	r1, r4
    5eb8:	d100      	bne.n	5ebc <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
    5eba:	6098      	str	r0, [r3, #8]
	parent->next = child;
    5ebc:	2000      	movs	r0, #0
    5ebe:	6008      	str	r0, [r1, #0]
	if (set) {
    5ec0:	b972      	cbnz	r2, 5ee0 <gpio_nrfx_manage_callback+0x40>
	return 0;
    5ec2:	2000      	movs	r0, #0
}
    5ec4:	bd30      	pop	{r4, r5, pc}
    5ec6:	4628      	mov	r0, r5
    5ec8:	e7ef      	b.n	5eaa <gpio_nrfx_manage_callback+0xa>
    5eca:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
    5ecc:	6898      	ldr	r0, [r3, #8]
    5ece:	4281      	cmp	r1, r0
	list->tail = node;
    5ed0:	bf08      	it	eq
    5ed2:	609c      	streq	r4, [r3, #8]
}
    5ed4:	e7f2      	b.n	5ebc <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    5ed6:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    5ed8:	4604      	mov	r4, r0
    5eda:	2d00      	cmp	r5, #0
    5edc:	d1f3      	bne.n	5ec6 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
    5ede:	b13a      	cbz	r2, 5ef0 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
    5ee0:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
    5ee2:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
    5ee4:	6898      	ldr	r0, [r3, #8]
	list->head = node;
    5ee6:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    5ee8:	2800      	cmp	r0, #0
    5eea:	d1ea      	bne.n	5ec2 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
    5eec:	6099      	str	r1, [r3, #8]
}
    5eee:	e7e9      	b.n	5ec4 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
    5ef0:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    5ef4:	e7e6      	b.n	5ec4 <gpio_nrfx_manage_callback+0x24>

00005ef6 <any_other_channel_is_active>:
{
    5ef6:	b530      	push	{r4, r5, lr}
    5ef8:	2300      	movs	r3, #0
		data->current[channel] & PWM_NRFX_CH_PULSE_CYCLES_MASK;
    5efa:	1d0c      	adds	r4, r1, #4
		if (i != channel && pwm_channel_is_active(i, data)) {
    5efc:	b2da      	uxtb	r2, r3
    5efe:	4282      	cmp	r2, r0
    5f00:	d007      	beq.n	5f12 <any_other_channel_is_active+0x1c>
	uint16_t pulse_cycle =
    5f02:	f834 2013 	ldrh.w	r2, [r4, r3, lsl #1]
    5f06:	f3c2 020e 	ubfx	r2, r2, #0, #15
	return (pulse_cycle > 0 && pulse_cycle < data->countertop);
    5f0a:	b112      	cbz	r2, 5f12 <any_other_channel_is_active+0x1c>
    5f0c:	898d      	ldrh	r5, [r1, #12]
    5f0e:	4295      	cmp	r5, r2
    5f10:	d804      	bhi.n	5f1c <any_other_channel_is_active+0x26>
	for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i) {
    5f12:	3301      	adds	r3, #1
    5f14:	2b04      	cmp	r3, #4
    5f16:	d1f1      	bne.n	5efc <any_other_channel_is_active+0x6>
	return false;
    5f18:	2000      	movs	r0, #0
}
    5f1a:	bd30      	pop	{r4, r5, pc}
			return true;
    5f1c:	2001      	movs	r0, #1
    5f1e:	e7fc      	b.n	5f1a <any_other_channel_is_active+0x24>

00005f20 <uarte_nrfx_isr_int>:
	return config->uarte_regs;
    5f20:	6843      	ldr	r3, [r0, #4]
    5f22:	681b      	ldr	r3, [r3, #0]
    return p_reg->INTENSET & mask;
    5f24:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    5f28:	05d1      	lsls	r1, r2, #23
    5f2a:	d518      	bpl.n	5f5e <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5f2c:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    5f30:	b1aa      	cbz	r2, 5f5e <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
    5f32:	f04f 0120 	mov.w	r1, #32
    5f36:	f3ef 8211 	mrs	r2, BASEPRI
    5f3a:	f381 8812 	msr	BASEPRI_MAX, r1
    5f3e:	f3bf 8f6f 	isb	sy
    5f42:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    5f46:	b131      	cbz	r1, 5f56 <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5f48:	2100      	movs	r1, #0
    5f4a:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
    5f4e:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5f52:	2101      	movs	r1, #1
    5f54:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
    5f56:	f382 8811 	msr	BASEPRI, r2
    5f5a:	f3bf 8f6f 	isb	sy
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    5f5e:	6842      	ldr	r2, [r0, #4]
    5f60:	6852      	ldr	r2, [r2, #4]
    5f62:	06d2      	lsls	r2, r2, #27
    5f64:	d515      	bpl.n	5f92 <uarte_nrfx_isr_int+0x72>
	__asm__ volatile(
    5f66:	f04f 0120 	mov.w	r1, #32
    5f6a:	f3ef 8211 	mrs	r2, BASEPRI
    5f6e:	f381 8812 	msr	BASEPRI_MAX, r1
    5f72:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5f76:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    5f7a:	b111      	cbz	r1, 5f82 <uarte_nrfx_isr_int+0x62>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    5f7c:	2100      	movs	r1, #0
    5f7e:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    5f82:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    5f86:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
    5f8a:	f382 8811 	msr	BASEPRI, r2
    5f8e:	f3bf 8f6f 	isb	sy
}
    5f92:	4770      	bx	lr

00005f94 <uarte_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
    5f94:	6902      	ldr	r2, [r0, #16]
{
    5f96:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
    5f98:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    5f9c:	e883 0003 	stmia.w	r3, {r0, r1}
}
    5fa0:	2000      	movs	r0, #0
    5fa2:	4770      	bx	lr

00005fa4 <uarte_nrfx_err_check>:
	return config->uarte_regs;
    5fa4:	6843      	ldr	r3, [r0, #4]
    5fa6:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    5fa8:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    5fac:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    5fb0:	4770      	bx	lr

00005fb2 <is_tx_ready>:
	const struct uarte_nrfx_config *config = get_dev_config(dev);
    5fb2:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
    5fb4:	6813      	ldr	r3, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5fb6:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    5fba:	b940      	cbnz	r0, 5fce <is_tx_ready+0x1c>
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    5fbc:	6852      	ldr	r2, [r2, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    5fbe:	0792      	lsls	r2, r2, #30
    5fc0:	d406      	bmi.n	5fd0 <is_tx_ready+0x1e>
    5fc2:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    5fc6:	3800      	subs	r0, #0
    5fc8:	bf18      	it	ne
    5fca:	2001      	movne	r0, #1
    5fcc:	4770      	bx	lr
    5fce:	2001      	movs	r0, #1
}
    5fd0:	4770      	bx	lr

00005fd2 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    5fd2:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
    5fd4:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
    5fd6:	681b      	ldr	r3, [r3, #0]
    5fd8:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    5fdc:	b148      	cbz	r0, 5ff2 <uarte_nrfx_poll_in+0x20>
	*c = data->rx_data;
    5fde:	7c52      	ldrb	r2, [r2, #17]
    5fe0:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5fe2:	2000      	movs	r0, #0
    5fe4:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    5fe8:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5fec:	2201      	movs	r2, #1
    5fee:	601a      	str	r2, [r3, #0]
	return 0;
    5ff0:	4770      	bx	lr
		return -1;
    5ff2:	f04f 30ff 	mov.w	r0, #4294967295
}
    5ff6:	4770      	bx	lr

00005ff8 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    5ff8:	b510      	push	{r4, lr}
    5ffa:	2200      	movs	r2, #0
    5ffc:	4604      	mov	r4, r0
    5ffe:	2101      	movs	r1, #1
    6000:	2002      	movs	r0, #2
    6002:	f7fb fdfb 	bl	1bfc <z_arm_irq_priority_set>
    6006:	2002      	movs	r0, #2
    6008:	f7fb fdda 	bl	1bc0 <arch_irq_enable>
    600c:	4620      	mov	r0, r4
    600e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6012:	f7fd b86d 	b.w	30f0 <uarte_instance_init.isra.0>

00006016 <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    6016:	b510      	push	{r4, lr}
    6018:	2200      	movs	r2, #0
    601a:	4604      	mov	r4, r0
    601c:	2101      	movs	r1, #1
    601e:	2028      	movs	r0, #40	; 0x28
    6020:	f7fb fdec 	bl	1bfc <z_arm_irq_priority_set>
    6024:	2028      	movs	r0, #40	; 0x28
    6026:	f7fb fdcb 	bl	1bc0 <arch_irq_enable>
    602a:	4620      	mov	r0, r4
    602c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6030:	f7fd b85e 	b.w	30f0 <uarte_instance_init.isra.0>

00006034 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    6034:	4770      	bx	lr

00006036 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    6036:	b508      	push	{r3, lr}
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
    6038:	2000      	movs	r0, #0
    603a:	f7fc f91f 	bl	227c <sys_arch_reboot>

0000603e <hw_cc3xx_init_internal>:

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    603e:	f7ff ba95 	b.w	556c <nrf_cc3xx_platform_init_no_rng>

00006042 <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
    6042:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    6044:	f7fb fa4e 	bl	14e4 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    6048:	f7fb fb00 	bl	164c <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
    604c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init_no_rng();
    6050:	f7ff ba8c 	b.w	556c <nrf_cc3xx_platform_init_no_rng>

00006054 <nrfx_clock_enable>:
{
    6054:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    6056:	2000      	movs	r0, #0
    6058:	f7fb fdc2 	bl	1be0 <arch_irq_is_enabled>
    605c:	b918      	cbnz	r0, 6066 <nrfx_clock_enable+0x12>
}
    605e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    6062:	f7fb bdad 	b.w	1bc0 <arch_irq_enable>
    6066:	bd08      	pop	{r3, pc}

00006068 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    6068:	4700      	bx	r0

0000606a <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    606a:	f000 ba34 	b.w	64d6 <z_impl_k_busy_wait>

0000606e <nrf_gpio_reconfigure>:
{
    606e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6070:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    6072:	a801      	add	r0, sp, #4
{
    6074:	e9dd 4608 	ldrd	r4, r6, [sp, #32]
    6078:	4617      	mov	r7, r2
    607a:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    607c:	f7fd fc24 	bl	38c8 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    6080:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    6082:	2f00      	cmp	r7, #0
    6084:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    6088:	bf14      	ite	ne
    608a:	2302      	movne	r3, #2
    608c:	2300      	moveq	r3, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    608e:	2900      	cmp	r1, #0
    6090:	bf18      	it	ne
    6092:	f043 0301 	orrne.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    6096:	2d00      	cmp	r5, #0
    6098:	bf14      	ite	ne
    609a:	f04f 0c0c 	movne.w	ip, #12
    609e:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    60a2:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    60a4:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    60a8:	bf14      	ite	ne
    60aa:	f44f 6ce0 	movne.w	ip, #1792	; 0x700
    60ae:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    60b2:	2e00      	cmp	r6, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    60b4:	ea43 030c 	orr.w	r3, r3, ip
    uint32_t cnf = reg->PIN_CNF[pin_number];
    60b8:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    60bc:	bf14      	ite	ne
    60be:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
    60c2:	f04f 0c00 	moveq.w	ip, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    60c6:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
    60ca:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    60ce:	b101      	cbz	r1, 60d2 <nrf_gpio_reconfigure+0x64>
    60d0:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    60d2:	b10f      	cbz	r7, 60d8 <nrf_gpio_reconfigure+0x6a>
    60d4:	783f      	ldrb	r7, [r7, #0]
    60d6:	007f      	lsls	r7, r7, #1
    60d8:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    60da:	b10d      	cbz	r5, 60e0 <nrf_gpio_reconfigure+0x72>
    60dc:	782d      	ldrb	r5, [r5, #0]
    60de:	00ad      	lsls	r5, r5, #2
    60e0:	4339      	orrs	r1, r7
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    60e2:	b10c      	cbz	r4, 60e8 <nrf_gpio_reconfigure+0x7a>
    60e4:	7822      	ldrb	r2, [r4, #0]
    60e6:	0214      	lsls	r4, r2, #8
    60e8:	430d      	orrs	r5, r1
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    60ea:	b10e      	cbz	r6, 60f0 <nrf_gpio_reconfigure+0x82>
    60ec:	7836      	ldrb	r6, [r6, #0]
    60ee:	0436      	lsls	r6, r6, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    60f0:	432c      	orrs	r4, r5
    60f2:	4334      	orrs	r4, r6
    reg->PIN_CNF[pin_number] = cnf;
    60f4:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
    60f8:	b003      	add	sp, #12
    60fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

000060fc <nrf_gpio_cfg_sense_set>:
{
    60fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    60fe:	f10d 030f 	add.w	r3, sp, #15
    6102:	9301      	str	r3, [sp, #4]
    6104:	2300      	movs	r3, #0
{
    6106:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    610a:	9300      	str	r3, [sp, #0]
    610c:	461a      	mov	r2, r3
    610e:	4619      	mov	r1, r3
    6110:	f7ff ffad 	bl	606e <nrf_gpio_reconfigure>
}
    6114:	b005      	add	sp, #20
    6116:	f85d fb04 	ldr.w	pc, [sp], #4

0000611a <start_playback.isra.0>:
static uint32_t start_playback(nrfx_pwm_t const * p_instance,
    611a:	b510      	push	{r4, lr}
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
    611c:	2402      	movs	r4, #2
    611e:	720c      	strb	r4, [r1, #8]
    p_cb->flags = flags;
    6120:	724a      	strb	r2, [r1, #9]
    if (p_cb->handler)
    6122:	6809      	ldr	r1, [r1, #0]
    6124:	b171      	cbz	r1, 6144 <start_playback.isra.0+0x2a>
            int_mask |= NRF_PWM_INT_SEQEND0_MASK;
    6126:	f012 0f04 	tst.w	r2, #4
    612a:	bf0c      	ite	eq
    612c:	2182      	moveq	r1, #130	; 0x82
    612e:	2192      	movne	r1, #146	; 0x92
        if (flags & NRFX_PWM_FLAG_SIGNAL_END_SEQ1)
    6130:	0714      	lsls	r4, r2, #28
            int_mask |= NRF_PWM_INT_SEQEND1_MASK;
    6132:	bf48      	it	mi
    6134:	f041 0120 	orrmi.w	r1, r1, #32
        if (flags & NRFX_PWM_FLAG_NO_EVT_FINISHED)
    6138:	06d4      	lsls	r4, r2, #27
            int_mask &= ~NRF_PWM_INT_LOOPSDONE_MASK;
    613a:	bf48      	it	mi
    613c:	f021 0180 	bicmi.w	r1, r1, #128	; 0x80
    p_reg->INTEN = mask;
    6140:	f8c0 1300 	str.w	r1, [r0, #768]	; 0x300
    if (flags & NRFX_PWM_FLAG_START_VIA_TASK)
    6144:	0612      	lsls	r2, r2, #24
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6146:	f04f 0100 	mov.w	r1, #0
    614a:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    614e:	bf58      	it	pl
    6150:	2201      	movpl	r2, #1
    6152:	f8d0 4104 	ldr.w	r4, [r0, #260]	; 0x104
    6156:	bf56      	itet	pl
    6158:	50c2      	strpl	r2, [r0, r3]
    return ((uint32_t)p_reg + (uint32_t)task);
    615a:	18c0      	addmi	r0, r0, r3
    return 0;
    615c:	4608      	movpl	r0, r1
}
    615e:	bd10      	pop	{r4, pc}

00006160 <nrfx_pwm_stop>:
{
    6160:	b538      	push	{r3, r4, r5, lr}
    nrf_pwm_shorts_set(p_instance->p_registers, 0);
    6162:	6803      	ldr	r3, [r0, #0]
    p_reg->SHORTS = mask;
    6164:	2200      	movs	r2, #0
    6166:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    616a:	2201      	movs	r2, #1
    616c:	605a      	str	r2, [r3, #4]
{
    616e:	4605      	mov	r5, r0
    6170:	460c      	mov	r4, r1
    if (nrfx_pwm_is_stopped(p_instance))
    6172:	f7fd ffdf 	bl	4134 <nrfx_pwm_is_stopped>
    6176:	b938      	cbnz	r0, 6188 <nrfx_pwm_stop+0x28>
            if (nrfx_pwm_is_stopped(p_instance))
    6178:	4628      	mov	r0, r5
    617a:	f7fd ffdb 	bl	4134 <nrfx_pwm_is_stopped>
    617e:	b918      	cbnz	r0, 6188 <nrfx_pwm_stop+0x28>
        } while (wait_until_stopped);
    6180:	2c00      	cmp	r4, #0
    6182:	d1f9      	bne.n	6178 <nrfx_pwm_stop+0x18>
}
    6184:	4620      	mov	r0, r4
    6186:	bd38      	pop	{r3, r4, r5, pc}
        ret_val = true;
    6188:	2401      	movs	r4, #1
    618a:	e7fb      	b.n	6184 <nrfx_pwm_stop+0x24>

0000618c <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
    618c:	f7fe b8f4 	b.w	4378 <_DoInit>

00006190 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
    6190:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
    6192:	f7ff fffb 	bl	618c <SEGGER_RTT_Init>

	return 0;
}
    6196:	2000      	movs	r0, #0
    6198:	bd08      	pop	{r3, pc}

0000619a <z_device_state_init>:
}
    619a:	4770      	bx	lr

0000619c <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    619c:	b138      	cbz	r0, 61ae <z_device_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    619e:	68c3      	ldr	r3, [r0, #12]
    61a0:	8818      	ldrh	r0, [r3, #0]
    61a2:	f3c0 0008 	ubfx	r0, r0, #0, #9
    61a6:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
    61aa:	4258      	negs	r0, r3
    61ac:	4158      	adcs	r0, r3
}
    61ae:	4770      	bx	lr

000061b0 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    61b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    61b2:	4605      	mov	r5, r0
    61b4:	460e      	mov	r6, r1
	__asm__ volatile(
    61b6:	f04f 0320 	mov.w	r3, #32
    61ba:	f3ef 8711 	mrs	r7, BASEPRI
    61be:	f383 8812 	msr	BASEPRI_MAX, r3
    61c2:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    61c6:	f7fe fe4b 	bl	4e60 <z_impl_z_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    61ca:	4631      	mov	r1, r6
    61cc:	4604      	mov	r4, r0
    61ce:	4628      	mov	r0, r5
    61d0:	f7ff ff31 	bl	6036 <k_sys_fatal_error_handler>
	__asm__ volatile(
    61d4:	f387 8811 	msr	BASEPRI, r7
    61d8:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    61dc:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    61de:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    61e2:	f7fb bf27 	b.w	2034 <z_impl_k_thread_abort>

000061e6 <z_pm_save_idle_exit>:
{
    61e6:	b508      	push	{r3, lr}
	pm_system_resume();
    61e8:	f7fb fb7a 	bl	18e0 <pm_system_resume>
}
    61ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    61f0:	f7ff bf20 	b.w	6034 <sys_clock_idle_exit>

000061f4 <k_mem_slab_init>:
{
    61f4:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
    61f6:	2400      	movs	r4, #0
    61f8:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    61fa:	ea41 0402 	orr.w	r4, r1, r2
    61fe:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
    6202:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
    6206:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    6208:	d10c      	bne.n	6224 <k_mem_slab_init+0x30>
	slab->free_list = NULL;
    620a:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    620c:	42a3      	cmp	r3, r4
    620e:	d103      	bne.n	6218 <k_mem_slab_init+0x24>
	list->tail = (sys_dnode_t *)list;
    6210:	e9c0 0000 	strd	r0, r0, [r0]
}
    6214:	2000      	movs	r0, #0
}
    6216:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
    6218:	6945      	ldr	r5, [r0, #20]
    621a:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    621c:	3401      	adds	r4, #1
		slab->free_list = p;
    621e:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
    6220:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
    6222:	e7f3      	b.n	620c <k_mem_slab_init+0x18>
		return -EINVAL;
    6224:	f06f 0015 	mvn.w	r0, #21
	return rc;
    6228:	e7f5      	b.n	6216 <k_mem_slab_init+0x22>

0000622a <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    622a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    622c:	4604      	mov	r4, r0
    622e:	460d      	mov	r5, r1
	__asm__ volatile(
    6230:	f04f 0320 	mov.w	r3, #32
    6234:	f3ef 8611 	mrs	r6, BASEPRI
    6238:	f383 8812 	msr	BASEPRI_MAX, r3
    623c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    6240:	6947      	ldr	r7, [r0, #20]
    6242:	b977      	cbnz	r7, 6262 <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    6244:	f000 f8d7 	bl	63f6 <z_unpend_first_thread>

		if (pending_thread != NULL) {
    6248:	b158      	cbz	r0, 6262 <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    624a:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    624c:	6142      	str	r2, [r0, #20]
    624e:	6787      	str	r7, [r0, #120]	; 0x78
			z_ready_thread(pending_thread);
    6250:	f000 f85d 	bl	630e <z_ready_thread>
			z_reschedule(&slab->lock, key);
    6254:	4631      	mov	r1, r6
    6256:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    625a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
    625e:	f7fe bb43 	b.w	48e8 <z_reschedule>
	**(char ***) mem = slab->free_list;
    6262:	682b      	ldr	r3, [r5, #0]
    6264:	6962      	ldr	r2, [r4, #20]
    6266:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    6268:	682b      	ldr	r3, [r5, #0]
    626a:	6163      	str	r3, [r4, #20]
	slab->num_used--;
    626c:	69a3      	ldr	r3, [r4, #24]
    626e:	3b01      	subs	r3, #1
    6270:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
    6272:	f386 8811 	msr	BASEPRI, r6
    6276:	f3bf 8f6f 	isb	sy
}
    627a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000627c <z_impl_k_mutex_init>:
{
    627c:	4603      	mov	r3, r0
	mutex->owner = NULL;
    627e:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
    6280:	e9c3 0002 	strd	r0, r0, [r3, #8]
    6284:	e9c3 3300 	strd	r3, r3, [r3]
}
    6288:	4770      	bx	lr

0000628a <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
    628a:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    628e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    6290:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    6292:	2300      	movs	r3, #0
	node->prev = NULL;
    6294:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
    6298:	4770      	bx	lr

0000629a <unpend_thread_no_timeout>:
{
    629a:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
    629c:	f7ff fff5 	bl	628a <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    62a0:	7b43      	ldrb	r3, [r0, #13]
    62a2:	f023 0302 	bic.w	r3, r3, #2
    62a6:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
    62a8:	2300      	movs	r3, #0
    62aa:	6083      	str	r3, [r0, #8]
}
    62ac:	bd08      	pop	{r3, pc}

000062ae <z_unpend_thread_no_timeout>:
{
    62ae:	b508      	push	{r3, lr}
	__asm__ volatile(
    62b0:	f04f 0320 	mov.w	r3, #32
    62b4:	f3ef 8111 	mrs	r1, BASEPRI
    62b8:	f383 8812 	msr	BASEPRI_MAX, r3
    62bc:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
    62c0:	f7ff ffeb 	bl	629a <unpend_thread_no_timeout>
	__asm__ volatile(
    62c4:	f381 8811 	msr	BASEPRI, r1
    62c8:	f3bf 8f6f 	isb	sy
}
    62cc:	bd08      	pop	{r3, pc}

000062ce <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    62ce:	4603      	mov	r3, r0
    62d0:	b920      	cbnz	r0, 62dc <z_reschedule_irqlock+0xe>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    62d2:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
    62d6:	b90a      	cbnz	r2, 62dc <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
    62d8:	f7fb bcc4 	b.w	1c64 <arch_swap>
    62dc:	f383 8811 	msr	BASEPRI, r3
    62e0:	f3bf 8f6f 	isb	sy
}
    62e4:	4770      	bx	lr

000062e6 <z_reschedule_unlocked>:
	__asm__ volatile(
    62e6:	f04f 0320 	mov.w	r3, #32
    62ea:	f3ef 8011 	mrs	r0, BASEPRI
    62ee:	f383 8812 	msr	BASEPRI_MAX, r3
    62f2:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    62f6:	f7ff bfea 	b.w	62ce <z_reschedule_irqlock>

000062fa <z_priq_dumb_best>:
{
    62fa:	4603      	mov	r3, r0
	return list->head == list;
    62fc:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    62fe:	4283      	cmp	r3, r0
    6300:	d003      	beq.n	630a <z_priq_dumb_best+0x10>
	if (n != NULL) {
    6302:	2800      	cmp	r0, #0
    6304:	bf38      	it	cc
    6306:	2000      	movcc	r0, #0
    6308:	4770      	bx	lr
	struct k_thread *thread = NULL;
    630a:	2000      	movs	r0, #0
}
    630c:	4770      	bx	lr

0000630e <z_ready_thread>:
{
    630e:	b510      	push	{r4, lr}
    6310:	f04f 0320 	mov.w	r3, #32
    6314:	f3ef 8411 	mrs	r4, BASEPRI
    6318:	f383 8812 	msr	BASEPRI_MAX, r3
    631c:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
    6320:	f7fe fba8 	bl	4a74 <ready_thread>
	__asm__ volatile(
    6324:	f384 8811 	msr	BASEPRI, r4
    6328:	f3bf 8f6f 	isb	sy
}
    632c:	bd10      	pop	{r4, pc}

0000632e <z_thread_timeout>:
{
    632e:	b510      	push	{r4, lr}
    6330:	4601      	mov	r1, r0
	__asm__ volatile(
    6332:	f04f 0320 	mov.w	r3, #32
    6336:	f3ef 8411 	mrs	r4, BASEPRI
    633a:	f383 8812 	msr	BASEPRI_MAX, r3
    633e:	f3bf 8f6f 	isb	sy
		if (!killed) {
    6342:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
    6346:	f013 0f28 	tst.w	r3, #40	; 0x28
    634a:	d10d      	bne.n	6368 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
    634c:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
    6350:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
    6352:	b10b      	cbz	r3, 6358 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
    6354:	f7ff ffa1 	bl	629a <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    6358:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
    635c:	f023 0314 	bic.w	r3, r3, #20
    6360:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
    6364:	f7fe fb86 	bl	4a74 <ready_thread>
	__asm__ volatile(
    6368:	f384 8811 	msr	BASEPRI, r4
    636c:	f3bf 8f6f 	isb	sy
}
    6370:	bd10      	pop	{r4, pc}

00006372 <add_to_waitq_locked>:
{
    6372:	b538      	push	{r3, r4, r5, lr}
    6374:	4604      	mov	r4, r0
    6376:	460d      	mov	r5, r1
	unready_thread(thread);
    6378:	f7fe fbd2 	bl	4b20 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    637c:	7b63      	ldrb	r3, [r4, #13]
    637e:	f043 0302 	orr.w	r3, r3, #2
    6382:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    6384:	b1b5      	cbz	r5, 63b4 <add_to_waitq_locked+0x42>
	return list->head == list;
    6386:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
    6388:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    638a:	429d      	cmp	r5, r3
    638c:	bf08      	it	eq
    638e:	2300      	moveq	r3, #0
    6390:	2b00      	cmp	r3, #0
    6392:	bf38      	it	cc
    6394:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6396:	b19b      	cbz	r3, 63c0 <add_to_waitq_locked+0x4e>
	int32_t b1 = thread_1->base.prio;
    6398:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    639c:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
    63a0:	4291      	cmp	r1, r2
    63a2:	d008      	beq.n	63b6 <add_to_waitq_locked+0x44>
		return b2 - b1;
    63a4:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    63a6:	2a00      	cmp	r2, #0
    63a8:	dd05      	ble.n	63b6 <add_to_waitq_locked+0x44>
	sys_dnode_t *const prev = successor->prev;
    63aa:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    63ac:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    63b0:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    63b2:	605c      	str	r4, [r3, #4]
}
    63b4:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
    63b6:	686a      	ldr	r2, [r5, #4]
    63b8:	4293      	cmp	r3, r2
    63ba:	d001      	beq.n	63c0 <add_to_waitq_locked+0x4e>
    63bc:	681b      	ldr	r3, [r3, #0]
    63be:	e7ea      	b.n	6396 <add_to_waitq_locked+0x24>
	sys_dnode_t *const tail = list->tail;
    63c0:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    63c2:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    63c6:	601c      	str	r4, [r3, #0]
	list->tail = node;
    63c8:	606c      	str	r4, [r5, #4]
    63ca:	e7f3      	b.n	63b4 <add_to_waitq_locked+0x42>

000063cc <z_unpend1_no_timeout>:
{
    63cc:	b510      	push	{r4, lr}
	__asm__ volatile(
    63ce:	f04f 0320 	mov.w	r3, #32
    63d2:	f3ef 8411 	mrs	r4, BASEPRI
    63d6:	f383 8812 	msr	BASEPRI_MAX, r3
    63da:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
    63de:	f7ff ff8c 	bl	62fa <z_priq_dumb_best>
		if (thread != NULL) {
    63e2:	4601      	mov	r1, r0
    63e4:	b108      	cbz	r0, 63ea <z_unpend1_no_timeout+0x1e>
			unpend_thread_no_timeout(thread);
    63e6:	f7ff ff58 	bl	629a <unpend_thread_no_timeout>
	__asm__ volatile(
    63ea:	f384 8811 	msr	BASEPRI, r4
    63ee:	f3bf 8f6f 	isb	sy
}
    63f2:	4608      	mov	r0, r1
    63f4:	bd10      	pop	{r4, pc}

000063f6 <z_unpend_first_thread>:
{
    63f6:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    63f8:	f04f 0320 	mov.w	r3, #32
    63fc:	f3ef 8511 	mrs	r5, BASEPRI
    6400:	f383 8812 	msr	BASEPRI_MAX, r3
    6404:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
    6408:	f7ff ff77 	bl	62fa <z_priq_dumb_best>
		if (thread != NULL) {
    640c:	4604      	mov	r4, r0
    640e:	b120      	cbz	r0, 641a <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
    6410:	f7ff ff43 	bl	629a <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    6414:	3018      	adds	r0, #24
    6416:	f000 f818 	bl	644a <z_abort_timeout>
	__asm__ volatile(
    641a:	f385 8811 	msr	BASEPRI, r5
    641e:	f3bf 8f6f 	isb	sy
}
    6422:	4620      	mov	r0, r4
    6424:	bd38      	pop	{r3, r4, r5, pc}

00006426 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
    6426:	b13a      	cbz	r2, 6438 <z_impl_k_sem_init+0x12>
    6428:	428a      	cmp	r2, r1
    642a:	d305      	bcc.n	6438 <z_impl_k_sem_init+0x12>
	sem->limit = limit;
    642c:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
    6430:	e9c0 0000 	strd	r0, r0, [r0]
	return 0;
    6434:	2000      	movs	r0, #0
    6436:	4770      	bx	lr
		return -EINVAL;
    6438:	f06f 0015 	mvn.w	r0, #21
}
    643c:	4770      	bx	lr

0000643e <k_is_in_isr>:
    643e:	f3ef 8005 	mrs	r0, IPSR
}
    6442:	3800      	subs	r0, #0
    6444:	bf18      	it	ne
    6446:	2001      	movne	r0, #1
    6448:	4770      	bx	lr

0000644a <z_abort_timeout>:
{
    644a:	b510      	push	{r4, lr}
	__asm__ volatile(
    644c:	f04f 0220 	mov.w	r2, #32
    6450:	f3ef 8411 	mrs	r4, BASEPRI
    6454:	f382 8812 	msr	BASEPRI_MAX, r2
    6458:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    645c:	6803      	ldr	r3, [r0, #0]
    645e:	b13b      	cbz	r3, 6470 <z_abort_timeout+0x26>
			remove_timeout(to);
    6460:	f7fe fe66 	bl	5130 <remove_timeout>
			ret = 0;
    6464:	2000      	movs	r0, #0
	__asm__ volatile(
    6466:	f384 8811 	msr	BASEPRI, r4
    646a:	f3bf 8f6f 	isb	sy
}
    646e:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    6470:	f06f 0015 	mvn.w	r0, #21
    6474:	e7f7      	b.n	6466 <z_abort_timeout+0x1c>

00006476 <z_get_next_timeout_expiry>:
{
    6476:	b510      	push	{r4, lr}
	__asm__ volatile(
    6478:	f04f 0320 	mov.w	r3, #32
    647c:	f3ef 8411 	mrs	r4, BASEPRI
    6480:	f383 8812 	msr	BASEPRI_MAX, r3
    6484:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    6488:	f7fe fe6c 	bl	5164 <next_timeout>
	__asm__ volatile(
    648c:	f384 8811 	msr	BASEPRI, r4
    6490:	f3bf 8f6f 	isb	sy
}
    6494:	bd10      	pop	{r4, pc}

00006496 <z_set_timeout_expiry>:
{
    6496:	b570      	push	{r4, r5, r6, lr}
    6498:	4604      	mov	r4, r0
    649a:	460d      	mov	r5, r1
	__asm__ volatile(
    649c:	f04f 0320 	mov.w	r3, #32
    64a0:	f3ef 8611 	mrs	r6, BASEPRI
    64a4:	f383 8812 	msr	BASEPRI_MAX, r3
    64a8:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
    64ac:	f7fe fe5a 	bl	5164 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    64b0:	2801      	cmp	r0, #1
    64b2:	dd05      	ble.n	64c0 <z_set_timeout_expiry+0x2a>
    64b4:	42a0      	cmp	r0, r4
    64b6:	db03      	blt.n	64c0 <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    64b8:	4629      	mov	r1, r5
    64ba:	4620      	mov	r0, r4
    64bc:	f7fd f8c8 	bl	3650 <sys_clock_set_timeout>
	__asm__ volatile(
    64c0:	f386 8811 	msr	BASEPRI, r6
    64c4:	f3bf 8f6f 	isb	sy
}
    64c8:	bd70      	pop	{r4, r5, r6, pc}

000064ca <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    64ca:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    64cc:	f7fe ff6a 	bl	53a4 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    64d0:	bd08      	pop	{r3, pc}

000064d2 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
    64d2:	f7fe bf67 	b.w	53a4 <sys_clock_tick_get>

000064d6 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    64d6:	b108      	cbz	r0, 64dc <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    64d8:	f7fb bee6 	b.w	22a8 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    64dc:	4770      	bx	lr

000064de <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
    64de:	b510      	push	{r4, lr}
    64e0:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
    64e2:	f7ff ffb2 	bl	644a <z_abort_timeout>

	if (inactive) {
    64e6:	b9b0      	cbnz	r0, 6516 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
    64e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    64ea:	b10b      	cbz	r3, 64f0 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
    64ec:	4620      	mov	r0, r4
    64ee:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
    64f0:	f104 0018 	add.w	r0, r4, #24
    64f4:	f7ff ff6a 	bl	63cc <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
    64f8:	b168      	cbz	r0, 6516 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
    64fa:	f7ff ff08 	bl	630e <z_ready_thread>
	__asm__ volatile(
    64fe:	f04f 0320 	mov.w	r3, #32
    6502:	f3ef 8011 	mrs	r0, BASEPRI
    6506:	f383 8812 	msr	BASEPRI_MAX, r3
    650a:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
    650e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
    6512:	f7ff bedc 	b.w	62ce <z_reschedule_irqlock>
    6516:	bd10      	pop	{r4, pc}

00006518 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    6518:	4770      	bx	lr
	...

0000651c <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    651c:	f7fd be44 	b.w	41a8 <SystemInit>
