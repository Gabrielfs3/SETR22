
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	200013e0 	.word	0x200013e0
}
   4:	0000246d 	.word	0x0000246d
   8:	00005aa1 	.word	0x00005aa1
   c:	00002459 	.word	0x00002459
  10:	00002459 	.word	0x00002459
  14:	00002459 	.word	0x00002459
  18:	00002459 	.word	0x00002459
	...
  2c:	000022ad 	.word	0x000022ad
  30:	00002459 	.word	0x00002459
  34:	00000000 	.word	0x00000000
  38:	00002259 	.word	0x00002259
  3c:	00002459 	.word	0x00002459

00000040 <_irq_vector_table>:
  40:	00002211 00002211 00002211 00002211     ."..."..."..."..
  50:	00002211 00002211 00002211 00002211     ."..."..."..."..
  60:	00002211 00002211 00002211 00002211     ."..."..."..."..
  70:	00002211 00002211 00002211 00002211     ."..."..."..."..
  80:	00002211 00002211 00002211 00002211     ."..."..."..."..
  90:	00002211 00002211 00002211 00002211     ."..."..."..."..
  a0:	00002211 00002211 00002211 00002211     ."..."..."..."..
  b0:	00002211 00002211 00002211 00002211     ."..."..."..."..
  c0:	00002211 00002211 00002211 00002211     ."..."..."..."..
  d0:	00002211 00002211 00002211 00002211     ."..."..."..."..
  e0:	00002211 00002211 00002211 00002211     ."..."..."..."..
  f0:	00002211 00002211 00002211 00002211     ."..."..."..."..

Disassembly of section text:

00000100 <__aeabi_drsub>:
     100:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
     104:	e002      	b.n	10c <__adddf3>
     106:	bf00      	nop

00000108 <__aeabi_dsub>:
     108:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000010c <__adddf3>:
     10c:	b530      	push	{r4, r5, lr}
     10e:	ea4f 0441 	mov.w	r4, r1, lsl #1
     112:	ea4f 0543 	mov.w	r5, r3, lsl #1
     116:	ea94 0f05 	teq	r4, r5
     11a:	bf08      	it	eq
     11c:	ea90 0f02 	teqeq	r0, r2
     120:	bf1f      	itttt	ne
     122:	ea54 0c00 	orrsne.w	ip, r4, r0
     126:	ea55 0c02 	orrsne.w	ip, r5, r2
     12a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
     12e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     132:	f000 80e2 	beq.w	2fa <CONFIG_IDLE_STACK_SIZE+0x1ba>
     136:	ea4f 5454 	mov.w	r4, r4, lsr #21
     13a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
     13e:	bfb8      	it	lt
     140:	426d      	neglt	r5, r5
     142:	dd0c      	ble.n	15e <CONFIG_IDLE_STACK_SIZE+0x1e>
     144:	442c      	add	r4, r5
     146:	ea80 0202 	eor.w	r2, r0, r2
     14a:	ea81 0303 	eor.w	r3, r1, r3
     14e:	ea82 0000 	eor.w	r0, r2, r0
     152:	ea83 0101 	eor.w	r1, r3, r1
     156:	ea80 0202 	eor.w	r2, r0, r2
     15a:	ea81 0303 	eor.w	r3, r1, r3
     15e:	2d36      	cmp	r5, #54	; 0x36
     160:	bf88      	it	hi
     162:	bd30      	pophi	{r4, r5, pc}
     164:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     168:	ea4f 3101 	mov.w	r1, r1, lsl #12
     16c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     170:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     174:	d002      	beq.n	17c <CONFIG_IDLE_STACK_SIZE+0x3c>
     176:	4240      	negs	r0, r0
     178:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     17c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
     180:	ea4f 3303 	mov.w	r3, r3, lsl #12
     184:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     188:	d002      	beq.n	190 <CONFIG_IDLE_STACK_SIZE+0x50>
     18a:	4252      	negs	r2, r2
     18c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     190:	ea94 0f05 	teq	r4, r5
     194:	f000 80a7 	beq.w	2e6 <CONFIG_IDLE_STACK_SIZE+0x1a6>
     198:	f1a4 0401 	sub.w	r4, r4, #1
     19c:	f1d5 0e20 	rsbs	lr, r5, #32
     1a0:	db0d      	blt.n	1be <CONFIG_IDLE_STACK_SIZE+0x7e>
     1a2:	fa02 fc0e 	lsl.w	ip, r2, lr
     1a6:	fa22 f205 	lsr.w	r2, r2, r5
     1aa:	1880      	adds	r0, r0, r2
     1ac:	f141 0100 	adc.w	r1, r1, #0
     1b0:	fa03 f20e 	lsl.w	r2, r3, lr
     1b4:	1880      	adds	r0, r0, r2
     1b6:	fa43 f305 	asr.w	r3, r3, r5
     1ba:	4159      	adcs	r1, r3
     1bc:	e00e      	b.n	1dc <CONFIG_IDLE_STACK_SIZE+0x9c>
     1be:	f1a5 0520 	sub.w	r5, r5, #32
     1c2:	f10e 0e20 	add.w	lr, lr, #32
     1c6:	2a01      	cmp	r2, #1
     1c8:	fa03 fc0e 	lsl.w	ip, r3, lr
     1cc:	bf28      	it	cs
     1ce:	f04c 0c02 	orrcs.w	ip, ip, #2
     1d2:	fa43 f305 	asr.w	r3, r3, r5
     1d6:	18c0      	adds	r0, r0, r3
     1d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     1dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     1e0:	d507      	bpl.n	1f2 <CONFIG_IDLE_STACK_SIZE+0xb2>
     1e2:	f04f 0e00 	mov.w	lr, #0
     1e6:	f1dc 0c00 	rsbs	ip, ip, #0
     1ea:	eb7e 0000 	sbcs.w	r0, lr, r0
     1ee:	eb6e 0101 	sbc.w	r1, lr, r1
     1f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     1f6:	d31b      	bcc.n	230 <CONFIG_IDLE_STACK_SIZE+0xf0>
     1f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     1fc:	d30c      	bcc.n	218 <CONFIG_IDLE_STACK_SIZE+0xd8>
     1fe:	0849      	lsrs	r1, r1, #1
     200:	ea5f 0030 	movs.w	r0, r0, rrx
     204:	ea4f 0c3c 	mov.w	ip, ip, rrx
     208:	f104 0401 	add.w	r4, r4, #1
     20c:	ea4f 5244 	mov.w	r2, r4, lsl #21
     210:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     214:	f080 809a 	bcs.w	34c <CONFIG_IDLE_STACK_SIZE+0x20c>
     218:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     21c:	bf08      	it	eq
     21e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     222:	f150 0000 	adcs.w	r0, r0, #0
     226:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     22a:	ea41 0105 	orr.w	r1, r1, r5
     22e:	bd30      	pop	{r4, r5, pc}
     230:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     234:	4140      	adcs	r0, r0
     236:	eb41 0101 	adc.w	r1, r1, r1
     23a:	3c01      	subs	r4, #1
     23c:	bf28      	it	cs
     23e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
     242:	d2e9      	bcs.n	218 <CONFIG_IDLE_STACK_SIZE+0xd8>
     244:	f091 0f00 	teq	r1, #0
     248:	bf04      	itt	eq
     24a:	4601      	moveq	r1, r0
     24c:	2000      	moveq	r0, #0
     24e:	fab1 f381 	clz	r3, r1
     252:	bf08      	it	eq
     254:	3320      	addeq	r3, #32
     256:	f1a3 030b 	sub.w	r3, r3, #11
     25a:	f1b3 0220 	subs.w	r2, r3, #32
     25e:	da0c      	bge.n	27a <CONFIG_IDLE_STACK_SIZE+0x13a>
     260:	320c      	adds	r2, #12
     262:	dd08      	ble.n	276 <CONFIG_IDLE_STACK_SIZE+0x136>
     264:	f102 0c14 	add.w	ip, r2, #20
     268:	f1c2 020c 	rsb	r2, r2, #12
     26c:	fa01 f00c 	lsl.w	r0, r1, ip
     270:	fa21 f102 	lsr.w	r1, r1, r2
     274:	e00c      	b.n	290 <CONFIG_IDLE_STACK_SIZE+0x150>
     276:	f102 0214 	add.w	r2, r2, #20
     27a:	bfd8      	it	le
     27c:	f1c2 0c20 	rsble	ip, r2, #32
     280:	fa01 f102 	lsl.w	r1, r1, r2
     284:	fa20 fc0c 	lsr.w	ip, r0, ip
     288:	bfdc      	itt	le
     28a:	ea41 010c 	orrle.w	r1, r1, ip
     28e:	4090      	lslle	r0, r2
     290:	1ae4      	subs	r4, r4, r3
     292:	bfa2      	ittt	ge
     294:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     298:	4329      	orrge	r1, r5
     29a:	bd30      	popge	{r4, r5, pc}
     29c:	ea6f 0404 	mvn.w	r4, r4
     2a0:	3c1f      	subs	r4, #31
     2a2:	da1c      	bge.n	2de <CONFIG_IDLE_STACK_SIZE+0x19e>
     2a4:	340c      	adds	r4, #12
     2a6:	dc0e      	bgt.n	2c6 <CONFIG_IDLE_STACK_SIZE+0x186>
     2a8:	f104 0414 	add.w	r4, r4, #20
     2ac:	f1c4 0220 	rsb	r2, r4, #32
     2b0:	fa20 f004 	lsr.w	r0, r0, r4
     2b4:	fa01 f302 	lsl.w	r3, r1, r2
     2b8:	ea40 0003 	orr.w	r0, r0, r3
     2bc:	fa21 f304 	lsr.w	r3, r1, r4
     2c0:	ea45 0103 	orr.w	r1, r5, r3
     2c4:	bd30      	pop	{r4, r5, pc}
     2c6:	f1c4 040c 	rsb	r4, r4, #12
     2ca:	f1c4 0220 	rsb	r2, r4, #32
     2ce:	fa20 f002 	lsr.w	r0, r0, r2
     2d2:	fa01 f304 	lsl.w	r3, r1, r4
     2d6:	ea40 0003 	orr.w	r0, r0, r3
     2da:	4629      	mov	r1, r5
     2dc:	bd30      	pop	{r4, r5, pc}
     2de:	fa21 f004 	lsr.w	r0, r1, r4
     2e2:	4629      	mov	r1, r5
     2e4:	bd30      	pop	{r4, r5, pc}
     2e6:	f094 0f00 	teq	r4, #0
     2ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     2ee:	bf06      	itte	eq
     2f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     2f4:	3401      	addeq	r4, #1
     2f6:	3d01      	subne	r5, #1
     2f8:	e74e      	b.n	198 <CONFIG_IDLE_STACK_SIZE+0x58>
     2fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     2fe:	bf18      	it	ne
     300:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     304:	d029      	beq.n	35a <CONFIG_IDLE_STACK_SIZE+0x21a>
     306:	ea94 0f05 	teq	r4, r5
     30a:	bf08      	it	eq
     30c:	ea90 0f02 	teqeq	r0, r2
     310:	d005      	beq.n	31e <CONFIG_IDLE_STACK_SIZE+0x1de>
     312:	ea54 0c00 	orrs.w	ip, r4, r0
     316:	bf04      	itt	eq
     318:	4619      	moveq	r1, r3
     31a:	4610      	moveq	r0, r2
     31c:	bd30      	pop	{r4, r5, pc}
     31e:	ea91 0f03 	teq	r1, r3
     322:	bf1e      	ittt	ne
     324:	2100      	movne	r1, #0
     326:	2000      	movne	r0, #0
     328:	bd30      	popne	{r4, r5, pc}
     32a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     32e:	d105      	bne.n	33c <CONFIG_IDLE_STACK_SIZE+0x1fc>
     330:	0040      	lsls	r0, r0, #1
     332:	4149      	adcs	r1, r1
     334:	bf28      	it	cs
     336:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     33a:	bd30      	pop	{r4, r5, pc}
     33c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     340:	bf3c      	itt	cc
     342:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     346:	bd30      	popcc	{r4, r5, pc}
     348:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     34c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     350:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     354:	f04f 0000 	mov.w	r0, #0
     358:	bd30      	pop	{r4, r5, pc}
     35a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     35e:	bf1a      	itte	ne
     360:	4619      	movne	r1, r3
     362:	4610      	movne	r0, r2
     364:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     368:	bf1c      	itt	ne
     36a:	460b      	movne	r3, r1
     36c:	4602      	movne	r2, r0
     36e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     372:	bf06      	itte	eq
     374:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     378:	ea91 0f03 	teqeq	r1, r3
     37c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     380:	bd30      	pop	{r4, r5, pc}
     382:	bf00      	nop

00000384 <__aeabi_ui2d>:
     384:	f090 0f00 	teq	r0, #0
     388:	bf04      	itt	eq
     38a:	2100      	moveq	r1, #0
     38c:	4770      	bxeq	lr
     38e:	b530      	push	{r4, r5, lr}
     390:	f44f 6480 	mov.w	r4, #1024	; 0x400
     394:	f104 0432 	add.w	r4, r4, #50	; 0x32
     398:	f04f 0500 	mov.w	r5, #0
     39c:	f04f 0100 	mov.w	r1, #0
     3a0:	e750      	b.n	244 <CONFIG_IDLE_STACK_SIZE+0x104>
     3a2:	bf00      	nop

000003a4 <__aeabi_i2d>:
     3a4:	f090 0f00 	teq	r0, #0
     3a8:	bf04      	itt	eq
     3aa:	2100      	moveq	r1, #0
     3ac:	4770      	bxeq	lr
     3ae:	b530      	push	{r4, r5, lr}
     3b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
     3b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
     3b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     3bc:	bf48      	it	mi
     3be:	4240      	negmi	r0, r0
     3c0:	f04f 0100 	mov.w	r1, #0
     3c4:	e73e      	b.n	244 <CONFIG_IDLE_STACK_SIZE+0x104>
     3c6:	bf00      	nop

000003c8 <__aeabi_f2d>:
     3c8:	0042      	lsls	r2, r0, #1
     3ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
     3ce:	ea4f 0131 	mov.w	r1, r1, rrx
     3d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
     3d6:	bf1f      	itttt	ne
     3d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     3dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     3e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     3e4:	4770      	bxne	lr
     3e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
     3ea:	bf08      	it	eq
     3ec:	4770      	bxeq	lr
     3ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
     3f2:	bf04      	itt	eq
     3f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
     3f8:	4770      	bxeq	lr
     3fa:	b530      	push	{r4, r5, lr}
     3fc:	f44f 7460 	mov.w	r4, #896	; 0x380
     400:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     404:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     408:	e71c      	b.n	244 <CONFIG_IDLE_STACK_SIZE+0x104>
     40a:	bf00      	nop

0000040c <__aeabi_ul2d>:
     40c:	ea50 0201 	orrs.w	r2, r0, r1
     410:	bf08      	it	eq
     412:	4770      	bxeq	lr
     414:	b530      	push	{r4, r5, lr}
     416:	f04f 0500 	mov.w	r5, #0
     41a:	e00a      	b.n	432 <__aeabi_l2d+0x16>

0000041c <__aeabi_l2d>:
     41c:	ea50 0201 	orrs.w	r2, r0, r1
     420:	bf08      	it	eq
     422:	4770      	bxeq	lr
     424:	b530      	push	{r4, r5, lr}
     426:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     42a:	d502      	bpl.n	432 <__aeabi_l2d+0x16>
     42c:	4240      	negs	r0, r0
     42e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     432:	f44f 6480 	mov.w	r4, #1024	; 0x400
     436:	f104 0432 	add.w	r4, r4, #50	; 0x32
     43a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     43e:	f43f aed8 	beq.w	1f2 <CONFIG_IDLE_STACK_SIZE+0xb2>
     442:	f04f 0203 	mov.w	r2, #3
     446:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     44a:	bf18      	it	ne
     44c:	3203      	addne	r2, #3
     44e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     452:	bf18      	it	ne
     454:	3203      	addne	r2, #3
     456:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     45a:	f1c2 0320 	rsb	r3, r2, #32
     45e:	fa00 fc03 	lsl.w	ip, r0, r3
     462:	fa20 f002 	lsr.w	r0, r0, r2
     466:	fa01 fe03 	lsl.w	lr, r1, r3
     46a:	ea40 000e 	orr.w	r0, r0, lr
     46e:	fa21 f102 	lsr.w	r1, r1, r2
     472:	4414      	add	r4, r2
     474:	e6bd      	b.n	1f2 <CONFIG_IDLE_STACK_SIZE+0xb2>
     476:	bf00      	nop

00000478 <__aeabi_dmul>:
     478:	b570      	push	{r4, r5, r6, lr}
     47a:	f04f 0cff 	mov.w	ip, #255	; 0xff
     47e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     482:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     486:	bf1d      	ittte	ne
     488:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     48c:	ea94 0f0c 	teqne	r4, ip
     490:	ea95 0f0c 	teqne	r5, ip
     494:	f000 f8de 	bleq	654 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x16c>
     498:	442c      	add	r4, r5
     49a:	ea81 0603 	eor.w	r6, r1, r3
     49e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
     4a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
     4a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
     4aa:	bf18      	it	ne
     4ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
     4b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     4b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     4b8:	d038      	beq.n	52c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x44>
     4ba:	fba0 ce02 	umull	ip, lr, r0, r2
     4be:	f04f 0500 	mov.w	r5, #0
     4c2:	fbe1 e502 	umlal	lr, r5, r1, r2
     4c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
     4ca:	fbe0 e503 	umlal	lr, r5, r0, r3
     4ce:	f04f 0600 	mov.w	r6, #0
     4d2:	fbe1 5603 	umlal	r5, r6, r1, r3
     4d6:	f09c 0f00 	teq	ip, #0
     4da:	bf18      	it	ne
     4dc:	f04e 0e01 	orrne.w	lr, lr, #1
     4e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
     4e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
     4e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
     4ec:	d204      	bcs.n	4f8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x10>
     4ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
     4f2:	416d      	adcs	r5, r5
     4f4:	eb46 0606 	adc.w	r6, r6, r6
     4f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
     4fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
     500:	ea4f 20c5 	mov.w	r0, r5, lsl #11
     504:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
     508:	ea4f 2ece 	mov.w	lr, lr, lsl #11
     50c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     510:	bf88      	it	hi
     512:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     516:	d81e      	bhi.n	556 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6e>
     518:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
     51c:	bf08      	it	eq
     51e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
     522:	f150 0000 	adcs.w	r0, r0, #0
     526:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     52a:	bd70      	pop	{r4, r5, r6, pc}
     52c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
     530:	ea46 0101 	orr.w	r1, r6, r1
     534:	ea40 0002 	orr.w	r0, r0, r2
     538:	ea81 0103 	eor.w	r1, r1, r3
     53c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
     540:	bfc2      	ittt	gt
     542:	ebd4 050c 	rsbsgt	r5, r4, ip
     546:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     54a:	bd70      	popgt	{r4, r5, r6, pc}
     54c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     550:	f04f 0e00 	mov.w	lr, #0
     554:	3c01      	subs	r4, #1
     556:	f300 80ab 	bgt.w	6b0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c8>
     55a:	f114 0f36 	cmn.w	r4, #54	; 0x36
     55e:	bfde      	ittt	le
     560:	2000      	movle	r0, #0
     562:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
     566:	bd70      	pople	{r4, r5, r6, pc}
     568:	f1c4 0400 	rsb	r4, r4, #0
     56c:	3c20      	subs	r4, #32
     56e:	da35      	bge.n	5dc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xf4>
     570:	340c      	adds	r4, #12
     572:	dc1b      	bgt.n	5ac <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc4>
     574:	f104 0414 	add.w	r4, r4, #20
     578:	f1c4 0520 	rsb	r5, r4, #32
     57c:	fa00 f305 	lsl.w	r3, r0, r5
     580:	fa20 f004 	lsr.w	r0, r0, r4
     584:	fa01 f205 	lsl.w	r2, r1, r5
     588:	ea40 0002 	orr.w	r0, r0, r2
     58c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
     590:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     594:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     598:	fa21 f604 	lsr.w	r6, r1, r4
     59c:	eb42 0106 	adc.w	r1, r2, r6
     5a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5a4:	bf08      	it	eq
     5a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     5aa:	bd70      	pop	{r4, r5, r6, pc}
     5ac:	f1c4 040c 	rsb	r4, r4, #12
     5b0:	f1c4 0520 	rsb	r5, r4, #32
     5b4:	fa00 f304 	lsl.w	r3, r0, r4
     5b8:	fa20 f005 	lsr.w	r0, r0, r5
     5bc:	fa01 f204 	lsl.w	r2, r1, r4
     5c0:	ea40 0002 	orr.w	r0, r0, r2
     5c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     5c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     5cc:	f141 0100 	adc.w	r1, r1, #0
     5d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5d4:	bf08      	it	eq
     5d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     5da:	bd70      	pop	{r4, r5, r6, pc}
     5dc:	f1c4 0520 	rsb	r5, r4, #32
     5e0:	fa00 f205 	lsl.w	r2, r0, r5
     5e4:	ea4e 0e02 	orr.w	lr, lr, r2
     5e8:	fa20 f304 	lsr.w	r3, r0, r4
     5ec:	fa01 f205 	lsl.w	r2, r1, r5
     5f0:	ea43 0302 	orr.w	r3, r3, r2
     5f4:	fa21 f004 	lsr.w	r0, r1, r4
     5f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     5fc:	fa21 f204 	lsr.w	r2, r1, r4
     600:	ea20 0002 	bic.w	r0, r0, r2
     604:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
     608:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     60c:	bf08      	it	eq
     60e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     612:	bd70      	pop	{r4, r5, r6, pc}
     614:	f094 0f00 	teq	r4, #0
     618:	d10f      	bne.n	63a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x152>
     61a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
     61e:	0040      	lsls	r0, r0, #1
     620:	eb41 0101 	adc.w	r1, r1, r1
     624:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     628:	bf08      	it	eq
     62a:	3c01      	subeq	r4, #1
     62c:	d0f7      	beq.n	61e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x136>
     62e:	ea41 0106 	orr.w	r1, r1, r6
     632:	f095 0f00 	teq	r5, #0
     636:	bf18      	it	ne
     638:	4770      	bxne	lr
     63a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
     63e:	0052      	lsls	r2, r2, #1
     640:	eb43 0303 	adc.w	r3, r3, r3
     644:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
     648:	bf08      	it	eq
     64a:	3d01      	subeq	r5, #1
     64c:	d0f7      	beq.n	63e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x156>
     64e:	ea43 0306 	orr.w	r3, r3, r6
     652:	4770      	bx	lr
     654:	ea94 0f0c 	teq	r4, ip
     658:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     65c:	bf18      	it	ne
     65e:	ea95 0f0c 	teqne	r5, ip
     662:	d00c      	beq.n	67e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x196>
     664:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     668:	bf18      	it	ne
     66a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     66e:	d1d1      	bne.n	614 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x12c>
     670:	ea81 0103 	eor.w	r1, r1, r3
     674:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     678:	f04f 0000 	mov.w	r0, #0
     67c:	bd70      	pop	{r4, r5, r6, pc}
     67e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     682:	bf06      	itte	eq
     684:	4610      	moveq	r0, r2
     686:	4619      	moveq	r1, r3
     688:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     68c:	d019      	beq.n	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     68e:	ea94 0f0c 	teq	r4, ip
     692:	d102      	bne.n	69a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1b2>
     694:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
     698:	d113      	bne.n	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     69a:	ea95 0f0c 	teq	r5, ip
     69e:	d105      	bne.n	6ac <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c4>
     6a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
     6a4:	bf1c      	itt	ne
     6a6:	4610      	movne	r0, r2
     6a8:	4619      	movne	r1, r3
     6aa:	d10a      	bne.n	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     6ac:	ea81 0103 	eor.w	r1, r1, r3
     6b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     6b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     6b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     6bc:	f04f 0000 	mov.w	r0, #0
     6c0:	bd70      	pop	{r4, r5, r6, pc}
     6c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     6c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
     6ca:	bd70      	pop	{r4, r5, r6, pc}

000006cc <__aeabi_ddiv>:
     6cc:	b570      	push	{r4, r5, r6, lr}
     6ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
     6d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     6d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     6da:	bf1d      	ittte	ne
     6dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     6e0:	ea94 0f0c 	teqne	r4, ip
     6e4:	ea95 0f0c 	teqne	r5, ip
     6e8:	f000 f8a7 	bleq	83a <CONFIG_ISR_STACK_SIZE+0x3a>
     6ec:	eba4 0405 	sub.w	r4, r4, r5
     6f0:	ea81 0e03 	eor.w	lr, r1, r3
     6f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     6f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
     6fc:	f000 8088 	beq.w	810 <CONFIG_ISR_STACK_SIZE+0x10>
     700:	ea4f 3303 	mov.w	r3, r3, lsl #12
     704:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
     708:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
     70c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
     710:	ea4f 2202 	mov.w	r2, r2, lsl #8
     714:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
     718:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
     71c:	ea4f 2600 	mov.w	r6, r0, lsl #8
     720:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
     724:	429d      	cmp	r5, r3
     726:	bf08      	it	eq
     728:	4296      	cmpeq	r6, r2
     72a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
     72e:	f504 7440 	add.w	r4, r4, #768	; 0x300
     732:	d202      	bcs.n	73a <__aeabi_ddiv+0x6e>
     734:	085b      	lsrs	r3, r3, #1
     736:	ea4f 0232 	mov.w	r2, r2, rrx
     73a:	1ab6      	subs	r6, r6, r2
     73c:	eb65 0503 	sbc.w	r5, r5, r3
     740:	085b      	lsrs	r3, r3, #1
     742:	ea4f 0232 	mov.w	r2, r2, rrx
     746:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     74a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
     74e:	ebb6 0e02 	subs.w	lr, r6, r2
     752:	eb75 0e03 	sbcs.w	lr, r5, r3
     756:	bf22      	ittt	cs
     758:	1ab6      	subcs	r6, r6, r2
     75a:	4675      	movcs	r5, lr
     75c:	ea40 000c 	orrcs.w	r0, r0, ip
     760:	085b      	lsrs	r3, r3, #1
     762:	ea4f 0232 	mov.w	r2, r2, rrx
     766:	ebb6 0e02 	subs.w	lr, r6, r2
     76a:	eb75 0e03 	sbcs.w	lr, r5, r3
     76e:	bf22      	ittt	cs
     770:	1ab6      	subcs	r6, r6, r2
     772:	4675      	movcs	r5, lr
     774:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     778:	085b      	lsrs	r3, r3, #1
     77a:	ea4f 0232 	mov.w	r2, r2, rrx
     77e:	ebb6 0e02 	subs.w	lr, r6, r2
     782:	eb75 0e03 	sbcs.w	lr, r5, r3
     786:	bf22      	ittt	cs
     788:	1ab6      	subcs	r6, r6, r2
     78a:	4675      	movcs	r5, lr
     78c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     790:	085b      	lsrs	r3, r3, #1
     792:	ea4f 0232 	mov.w	r2, r2, rrx
     796:	ebb6 0e02 	subs.w	lr, r6, r2
     79a:	eb75 0e03 	sbcs.w	lr, r5, r3
     79e:	bf22      	ittt	cs
     7a0:	1ab6      	subcs	r6, r6, r2
     7a2:	4675      	movcs	r5, lr
     7a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     7a8:	ea55 0e06 	orrs.w	lr, r5, r6
     7ac:	d018      	beq.n	7e0 <__aeabi_ddiv+0x114>
     7ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
     7b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
     7b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
     7ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     7be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
     7c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
     7c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
     7ca:	d1c0      	bne.n	74e <__aeabi_ddiv+0x82>
     7cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     7d0:	d10b      	bne.n	7ea <__aeabi_ddiv+0x11e>
     7d2:	ea41 0100 	orr.w	r1, r1, r0
     7d6:	f04f 0000 	mov.w	r0, #0
     7da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
     7de:	e7b6      	b.n	74e <__aeabi_ddiv+0x82>
     7e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     7e4:	bf04      	itt	eq
     7e6:	4301      	orreq	r1, r0
     7e8:	2000      	moveq	r0, #0
     7ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     7ee:	bf88      	it	hi
     7f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     7f4:	f63f aeaf 	bhi.w	556 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6e>
     7f8:	ebb5 0c03 	subs.w	ip, r5, r3
     7fc:	bf04      	itt	eq
     7fe:	ebb6 0c02 	subseq.w	ip, r6, r2
     802:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     806:	f150 0000 	adcs.w	r0, r0, #0
     80a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     80e:	bd70      	pop	{r4, r5, r6, pc}
     810:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
     814:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
     818:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
     81c:	bfc2      	ittt	gt
     81e:	ebd4 050c 	rsbsgt	r5, r4, ip
     822:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     826:	bd70      	popgt	{r4, r5, r6, pc}
     828:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     82c:	f04f 0e00 	mov.w	lr, #0
     830:	3c01      	subs	r4, #1
     832:	e690      	b.n	556 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6e>
     834:	ea45 0e06 	orr.w	lr, r5, r6
     838:	e68d      	b.n	556 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6e>
     83a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     83e:	ea94 0f0c 	teq	r4, ip
     842:	bf08      	it	eq
     844:	ea95 0f0c 	teqeq	r5, ip
     848:	f43f af3b 	beq.w	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     84c:	ea94 0f0c 	teq	r4, ip
     850:	d10a      	bne.n	868 <CONFIG_ISR_STACK_SIZE+0x68>
     852:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     856:	f47f af34 	bne.w	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     85a:	ea95 0f0c 	teq	r5, ip
     85e:	f47f af25 	bne.w	6ac <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c4>
     862:	4610      	mov	r0, r2
     864:	4619      	mov	r1, r3
     866:	e72c      	b.n	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     868:	ea95 0f0c 	teq	r5, ip
     86c:	d106      	bne.n	87c <CONFIG_ISR_STACK_SIZE+0x7c>
     86e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     872:	f43f aefd 	beq.w	670 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x188>
     876:	4610      	mov	r0, r2
     878:	4619      	mov	r1, r3
     87a:	e722      	b.n	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     87c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     880:	bf18      	it	ne
     882:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     886:	f47f aec5 	bne.w	614 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x12c>
     88a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
     88e:	f47f af0d 	bne.w	6ac <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c4>
     892:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
     896:	f47f aeeb 	bne.w	670 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x188>
     89a:	e712      	b.n	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>

0000089c <__gedf2>:
     89c:	f04f 3cff 	mov.w	ip, #4294967295
     8a0:	e006      	b.n	8b0 <__cmpdf2+0x4>
     8a2:	bf00      	nop

000008a4 <__ledf2>:
     8a4:	f04f 0c01 	mov.w	ip, #1
     8a8:	e002      	b.n	8b0 <__cmpdf2+0x4>
     8aa:	bf00      	nop

000008ac <__cmpdf2>:
     8ac:	f04f 0c01 	mov.w	ip, #1
     8b0:	f84d cd04 	str.w	ip, [sp, #-4]!
     8b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     8b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     8bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     8c0:	bf18      	it	ne
     8c2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
     8c6:	d01b      	beq.n	900 <__cmpdf2+0x54>
     8c8:	b001      	add	sp, #4
     8ca:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
     8ce:	bf0c      	ite	eq
     8d0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
     8d4:	ea91 0f03 	teqne	r1, r3
     8d8:	bf02      	ittt	eq
     8da:	ea90 0f02 	teqeq	r0, r2
     8de:	2000      	moveq	r0, #0
     8e0:	4770      	bxeq	lr
     8e2:	f110 0f00 	cmn.w	r0, #0
     8e6:	ea91 0f03 	teq	r1, r3
     8ea:	bf58      	it	pl
     8ec:	4299      	cmppl	r1, r3
     8ee:	bf08      	it	eq
     8f0:	4290      	cmpeq	r0, r2
     8f2:	bf2c      	ite	cs
     8f4:	17d8      	asrcs	r0, r3, #31
     8f6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
     8fa:	f040 0001 	orr.w	r0, r0, #1
     8fe:	4770      	bx	lr
     900:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     904:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     908:	d102      	bne.n	910 <__cmpdf2+0x64>
     90a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
     90e:	d107      	bne.n	920 <__cmpdf2+0x74>
     910:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     914:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     918:	d1d6      	bne.n	8c8 <__cmpdf2+0x1c>
     91a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
     91e:	d0d3      	beq.n	8c8 <__cmpdf2+0x1c>
     920:	f85d 0b04 	ldr.w	r0, [sp], #4
     924:	4770      	bx	lr
     926:	bf00      	nop

00000928 <__aeabi_cdrcmple>:
     928:	4684      	mov	ip, r0
     92a:	4610      	mov	r0, r2
     92c:	4662      	mov	r2, ip
     92e:	468c      	mov	ip, r1
     930:	4619      	mov	r1, r3
     932:	4663      	mov	r3, ip
     934:	e000      	b.n	938 <__aeabi_cdcmpeq>
     936:	bf00      	nop

00000938 <__aeabi_cdcmpeq>:
     938:	b501      	push	{r0, lr}
     93a:	f7ff ffb7 	bl	8ac <__cmpdf2>
     93e:	2800      	cmp	r0, #0
     940:	bf48      	it	mi
     942:	f110 0f00 	cmnmi.w	r0, #0
     946:	bd01      	pop	{r0, pc}

00000948 <__aeabi_dcmpeq>:
     948:	f84d ed08 	str.w	lr, [sp, #-8]!
     94c:	f7ff fff4 	bl	938 <__aeabi_cdcmpeq>
     950:	bf0c      	ite	eq
     952:	2001      	moveq	r0, #1
     954:	2000      	movne	r0, #0
     956:	f85d fb08 	ldr.w	pc, [sp], #8
     95a:	bf00      	nop

0000095c <__aeabi_dcmplt>:
     95c:	f84d ed08 	str.w	lr, [sp, #-8]!
     960:	f7ff ffea 	bl	938 <__aeabi_cdcmpeq>
     964:	bf34      	ite	cc
     966:	2001      	movcc	r0, #1
     968:	2000      	movcs	r0, #0
     96a:	f85d fb08 	ldr.w	pc, [sp], #8
     96e:	bf00      	nop

00000970 <__aeabi_dcmple>:
     970:	f84d ed08 	str.w	lr, [sp, #-8]!
     974:	f7ff ffe0 	bl	938 <__aeabi_cdcmpeq>
     978:	bf94      	ite	ls
     97a:	2001      	movls	r0, #1
     97c:	2000      	movhi	r0, #0
     97e:	f85d fb08 	ldr.w	pc, [sp], #8
     982:	bf00      	nop

00000984 <__aeabi_dcmpge>:
     984:	f84d ed08 	str.w	lr, [sp, #-8]!
     988:	f7ff ffce 	bl	928 <__aeabi_cdrcmple>
     98c:	bf94      	ite	ls
     98e:	2001      	movls	r0, #1
     990:	2000      	movhi	r0, #0
     992:	f85d fb08 	ldr.w	pc, [sp], #8
     996:	bf00      	nop

00000998 <__aeabi_dcmpgt>:
     998:	f84d ed08 	str.w	lr, [sp, #-8]!
     99c:	f7ff ffc4 	bl	928 <__aeabi_cdrcmple>
     9a0:	bf34      	ite	cc
     9a2:	2001      	movcc	r0, #1
     9a4:	2000      	movcs	r0, #0
     9a6:	f85d fb08 	ldr.w	pc, [sp], #8
     9aa:	bf00      	nop

000009ac <__aeabi_d2iz>:
     9ac:	ea4f 0241 	mov.w	r2, r1, lsl #1
     9b0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
     9b4:	d215      	bcs.n	9e2 <__aeabi_d2iz+0x36>
     9b6:	d511      	bpl.n	9dc <__aeabi_d2iz+0x30>
     9b8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
     9bc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
     9c0:	d912      	bls.n	9e8 <__aeabi_d2iz+0x3c>
     9c2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     9c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     9ca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
     9ce:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     9d2:	fa23 f002 	lsr.w	r0, r3, r2
     9d6:	bf18      	it	ne
     9d8:	4240      	negne	r0, r0
     9da:	4770      	bx	lr
     9dc:	f04f 0000 	mov.w	r0, #0
     9e0:	4770      	bx	lr
     9e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
     9e6:	d105      	bne.n	9f4 <__aeabi_d2iz+0x48>
     9e8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
     9ec:	bf08      	it	eq
     9ee:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
     9f2:	4770      	bx	lr
     9f4:	f04f 0000 	mov.w	r0, #0
     9f8:	4770      	bx	lr
     9fa:	bf00      	nop

000009fc <__aeabi_uldivmod>:
     9fc:	b953      	cbnz	r3, a14 <__aeabi_uldivmod+0x18>
     9fe:	b94a      	cbnz	r2, a14 <__aeabi_uldivmod+0x18>
     a00:	2900      	cmp	r1, #0
     a02:	bf08      	it	eq
     a04:	2800      	cmpeq	r0, #0
     a06:	bf1c      	itt	ne
     a08:	f04f 31ff 	movne.w	r1, #4294967295
     a0c:	f04f 30ff 	movne.w	r0, #4294967295
     a10:	f000 b96c 	b.w	cec <__aeabi_idiv0>
     a14:	f1ad 0c08 	sub.w	ip, sp, #8
     a18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     a1c:	f000 f806 	bl	a2c <__udivmoddi4>
     a20:	f8dd e004 	ldr.w	lr, [sp, #4]
     a24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     a28:	b004      	add	sp, #16
     a2a:	4770      	bx	lr

00000a2c <__udivmoddi4>:
     a2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     a30:	9e08      	ldr	r6, [sp, #32]
     a32:	460d      	mov	r5, r1
     a34:	4604      	mov	r4, r0
     a36:	468e      	mov	lr, r1
     a38:	2b00      	cmp	r3, #0
     a3a:	f040 8082 	bne.w	b42 <__udivmoddi4+0x116>
     a3e:	428a      	cmp	r2, r1
     a40:	4617      	mov	r7, r2
     a42:	d946      	bls.n	ad2 <__udivmoddi4+0xa6>
     a44:	fab2 f282 	clz	r2, r2
     a48:	b14a      	cbz	r2, a5e <__udivmoddi4+0x32>
     a4a:	f1c2 0120 	rsb	r1, r2, #32
     a4e:	fa05 f302 	lsl.w	r3, r5, r2
     a52:	fa20 f101 	lsr.w	r1, r0, r1
     a56:	4097      	lsls	r7, r2
     a58:	ea41 0e03 	orr.w	lr, r1, r3
     a5c:	4094      	lsls	r4, r2
     a5e:	ea4f 4817 	mov.w	r8, r7, lsr #16
     a62:	0c23      	lsrs	r3, r4, #16
     a64:	fbbe fcf8 	udiv	ip, lr, r8
     a68:	b2b9      	uxth	r1, r7
     a6a:	fb08 ee1c 	mls	lr, r8, ip, lr
     a6e:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
     a72:	fb0c f001 	mul.w	r0, ip, r1
     a76:	4298      	cmp	r0, r3
     a78:	d90a      	bls.n	a90 <__udivmoddi4+0x64>
     a7a:	18fb      	adds	r3, r7, r3
     a7c:	f10c 35ff 	add.w	r5, ip, #4294967295
     a80:	f080 8116 	bcs.w	cb0 <__udivmoddi4+0x284>
     a84:	4298      	cmp	r0, r3
     a86:	f240 8113 	bls.w	cb0 <__udivmoddi4+0x284>
     a8a:	f1ac 0c02 	sub.w	ip, ip, #2
     a8e:	443b      	add	r3, r7
     a90:	1a1b      	subs	r3, r3, r0
     a92:	b2a4      	uxth	r4, r4
     a94:	fbb3 f0f8 	udiv	r0, r3, r8
     a98:	fb08 3310 	mls	r3, r8, r0, r3
     a9c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     aa0:	fb00 f101 	mul.w	r1, r0, r1
     aa4:	42a1      	cmp	r1, r4
     aa6:	d909      	bls.n	abc <__udivmoddi4+0x90>
     aa8:	193c      	adds	r4, r7, r4
     aaa:	f100 33ff 	add.w	r3, r0, #4294967295
     aae:	f080 8101 	bcs.w	cb4 <__udivmoddi4+0x288>
     ab2:	42a1      	cmp	r1, r4
     ab4:	f240 80fe 	bls.w	cb4 <__udivmoddi4+0x288>
     ab8:	3802      	subs	r0, #2
     aba:	443c      	add	r4, r7
     abc:	1a64      	subs	r4, r4, r1
     abe:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     ac2:	2100      	movs	r1, #0
     ac4:	b11e      	cbz	r6, ace <__udivmoddi4+0xa2>
     ac6:	40d4      	lsrs	r4, r2
     ac8:	2300      	movs	r3, #0
     aca:	e9c6 4300 	strd	r4, r3, [r6]
     ace:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     ad2:	b902      	cbnz	r2, ad6 <__udivmoddi4+0xaa>
     ad4:	deff      	udf	#255	; 0xff
     ad6:	fab2 f282 	clz	r2, r2
     ada:	2a00      	cmp	r2, #0
     adc:	d14f      	bne.n	b7e <__udivmoddi4+0x152>
     ade:	1bcb      	subs	r3, r1, r7
     ae0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     ae4:	fa1f f887 	uxth.w	r8, r7
     ae8:	2101      	movs	r1, #1
     aea:	fbb3 fcfe 	udiv	ip, r3, lr
     aee:	0c25      	lsrs	r5, r4, #16
     af0:	fb0e 331c 	mls	r3, lr, ip, r3
     af4:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     af8:	fb08 f30c 	mul.w	r3, r8, ip
     afc:	42ab      	cmp	r3, r5
     afe:	d907      	bls.n	b10 <__udivmoddi4+0xe4>
     b00:	197d      	adds	r5, r7, r5
     b02:	f10c 30ff 	add.w	r0, ip, #4294967295
     b06:	d202      	bcs.n	b0e <__udivmoddi4+0xe2>
     b08:	42ab      	cmp	r3, r5
     b0a:	f200 80e7 	bhi.w	cdc <__udivmoddi4+0x2b0>
     b0e:	4684      	mov	ip, r0
     b10:	1aed      	subs	r5, r5, r3
     b12:	b2a3      	uxth	r3, r4
     b14:	fbb5 f0fe 	udiv	r0, r5, lr
     b18:	fb0e 5510 	mls	r5, lr, r0, r5
     b1c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     b20:	fb08 f800 	mul.w	r8, r8, r0
     b24:	45a0      	cmp	r8, r4
     b26:	d907      	bls.n	b38 <__udivmoddi4+0x10c>
     b28:	193c      	adds	r4, r7, r4
     b2a:	f100 33ff 	add.w	r3, r0, #4294967295
     b2e:	d202      	bcs.n	b36 <__udivmoddi4+0x10a>
     b30:	45a0      	cmp	r8, r4
     b32:	f200 80d7 	bhi.w	ce4 <__udivmoddi4+0x2b8>
     b36:	4618      	mov	r0, r3
     b38:	eba4 0408 	sub.w	r4, r4, r8
     b3c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     b40:	e7c0      	b.n	ac4 <__udivmoddi4+0x98>
     b42:	428b      	cmp	r3, r1
     b44:	d908      	bls.n	b58 <__udivmoddi4+0x12c>
     b46:	2e00      	cmp	r6, #0
     b48:	f000 80af 	beq.w	caa <__udivmoddi4+0x27e>
     b4c:	2100      	movs	r1, #0
     b4e:	e9c6 0500 	strd	r0, r5, [r6]
     b52:	4608      	mov	r0, r1
     b54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     b58:	fab3 f183 	clz	r1, r3
     b5c:	2900      	cmp	r1, #0
     b5e:	d14b      	bne.n	bf8 <__udivmoddi4+0x1cc>
     b60:	42ab      	cmp	r3, r5
     b62:	d302      	bcc.n	b6a <__udivmoddi4+0x13e>
     b64:	4282      	cmp	r2, r0
     b66:	f200 80b7 	bhi.w	cd8 <__udivmoddi4+0x2ac>
     b6a:	1a84      	subs	r4, r0, r2
     b6c:	eb65 0303 	sbc.w	r3, r5, r3
     b70:	2001      	movs	r0, #1
     b72:	469e      	mov	lr, r3
     b74:	2e00      	cmp	r6, #0
     b76:	d0aa      	beq.n	ace <__udivmoddi4+0xa2>
     b78:	e9c6 4e00 	strd	r4, lr, [r6]
     b7c:	e7a7      	b.n	ace <__udivmoddi4+0xa2>
     b7e:	f1c2 0c20 	rsb	ip, r2, #32
     b82:	fa01 f302 	lsl.w	r3, r1, r2
     b86:	4097      	lsls	r7, r2
     b88:	fa20 f00c 	lsr.w	r0, r0, ip
     b8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     b90:	fa21 fc0c 	lsr.w	ip, r1, ip
     b94:	4318      	orrs	r0, r3
     b96:	fbbc f1fe 	udiv	r1, ip, lr
     b9a:	0c05      	lsrs	r5, r0, #16
     b9c:	fb0e cc11 	mls	ip, lr, r1, ip
     ba0:	fa1f f887 	uxth.w	r8, r7
     ba4:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
     ba8:	fb01 f308 	mul.w	r3, r1, r8
     bac:	42ab      	cmp	r3, r5
     bae:	fa04 f402 	lsl.w	r4, r4, r2
     bb2:	d909      	bls.n	bc8 <__udivmoddi4+0x19c>
     bb4:	197d      	adds	r5, r7, r5
     bb6:	f101 3cff 	add.w	ip, r1, #4294967295
     bba:	f080 808b 	bcs.w	cd4 <__udivmoddi4+0x2a8>
     bbe:	42ab      	cmp	r3, r5
     bc0:	f240 8088 	bls.w	cd4 <__udivmoddi4+0x2a8>
     bc4:	3902      	subs	r1, #2
     bc6:	443d      	add	r5, r7
     bc8:	1aeb      	subs	r3, r5, r3
     bca:	b285      	uxth	r5, r0
     bcc:	fbb3 f0fe 	udiv	r0, r3, lr
     bd0:	fb0e 3310 	mls	r3, lr, r0, r3
     bd4:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     bd8:	fb00 f308 	mul.w	r3, r0, r8
     bdc:	42ab      	cmp	r3, r5
     bde:	d907      	bls.n	bf0 <__udivmoddi4+0x1c4>
     be0:	197d      	adds	r5, r7, r5
     be2:	f100 3cff 	add.w	ip, r0, #4294967295
     be6:	d271      	bcs.n	ccc <__udivmoddi4+0x2a0>
     be8:	42ab      	cmp	r3, r5
     bea:	d96f      	bls.n	ccc <__udivmoddi4+0x2a0>
     bec:	3802      	subs	r0, #2
     bee:	443d      	add	r5, r7
     bf0:	1aeb      	subs	r3, r5, r3
     bf2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     bf6:	e778      	b.n	aea <__udivmoddi4+0xbe>
     bf8:	f1c1 0c20 	rsb	ip, r1, #32
     bfc:	408b      	lsls	r3, r1
     bfe:	fa22 f70c 	lsr.w	r7, r2, ip
     c02:	431f      	orrs	r7, r3
     c04:	fa20 f40c 	lsr.w	r4, r0, ip
     c08:	fa05 f301 	lsl.w	r3, r5, r1
     c0c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     c10:	fa25 f50c 	lsr.w	r5, r5, ip
     c14:	431c      	orrs	r4, r3
     c16:	0c23      	lsrs	r3, r4, #16
     c18:	fbb5 f9fe 	udiv	r9, r5, lr
     c1c:	fa1f f887 	uxth.w	r8, r7
     c20:	fb0e 5519 	mls	r5, lr, r9, r5
     c24:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
     c28:	fb09 fa08 	mul.w	sl, r9, r8
     c2c:	45aa      	cmp	sl, r5
     c2e:	fa02 f201 	lsl.w	r2, r2, r1
     c32:	fa00 f301 	lsl.w	r3, r0, r1
     c36:	d908      	bls.n	c4a <__udivmoddi4+0x21e>
     c38:	197d      	adds	r5, r7, r5
     c3a:	f109 30ff 	add.w	r0, r9, #4294967295
     c3e:	d247      	bcs.n	cd0 <__udivmoddi4+0x2a4>
     c40:	45aa      	cmp	sl, r5
     c42:	d945      	bls.n	cd0 <__udivmoddi4+0x2a4>
     c44:	f1a9 0902 	sub.w	r9, r9, #2
     c48:	443d      	add	r5, r7
     c4a:	eba5 050a 	sub.w	r5, r5, sl
     c4e:	b2a4      	uxth	r4, r4
     c50:	fbb5 f0fe 	udiv	r0, r5, lr
     c54:	fb0e 5510 	mls	r5, lr, r0, r5
     c58:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     c5c:	fb00 f808 	mul.w	r8, r0, r8
     c60:	45a0      	cmp	r8, r4
     c62:	d907      	bls.n	c74 <__udivmoddi4+0x248>
     c64:	193c      	adds	r4, r7, r4
     c66:	f100 35ff 	add.w	r5, r0, #4294967295
     c6a:	d22d      	bcs.n	cc8 <__udivmoddi4+0x29c>
     c6c:	45a0      	cmp	r8, r4
     c6e:	d92b      	bls.n	cc8 <__udivmoddi4+0x29c>
     c70:	3802      	subs	r0, #2
     c72:	443c      	add	r4, r7
     c74:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     c78:	eba4 0408 	sub.w	r4, r4, r8
     c7c:	fba0 8902 	umull	r8, r9, r0, r2
     c80:	454c      	cmp	r4, r9
     c82:	46c6      	mov	lr, r8
     c84:	464d      	mov	r5, r9
     c86:	d319      	bcc.n	cbc <__udivmoddi4+0x290>
     c88:	d016      	beq.n	cb8 <__udivmoddi4+0x28c>
     c8a:	b15e      	cbz	r6, ca4 <__udivmoddi4+0x278>
     c8c:	ebb3 020e 	subs.w	r2, r3, lr
     c90:	eb64 0405 	sbc.w	r4, r4, r5
     c94:	fa04 fc0c 	lsl.w	ip, r4, ip
     c98:	40ca      	lsrs	r2, r1
     c9a:	ea4c 0202 	orr.w	r2, ip, r2
     c9e:	40cc      	lsrs	r4, r1
     ca0:	e9c6 2400 	strd	r2, r4, [r6]
     ca4:	2100      	movs	r1, #0
     ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     caa:	4631      	mov	r1, r6
     cac:	4630      	mov	r0, r6
     cae:	e70e      	b.n	ace <__udivmoddi4+0xa2>
     cb0:	46ac      	mov	ip, r5
     cb2:	e6ed      	b.n	a90 <__udivmoddi4+0x64>
     cb4:	4618      	mov	r0, r3
     cb6:	e701      	b.n	abc <__udivmoddi4+0x90>
     cb8:	4543      	cmp	r3, r8
     cba:	d2e6      	bcs.n	c8a <__udivmoddi4+0x25e>
     cbc:	ebb8 0e02 	subs.w	lr, r8, r2
     cc0:	eb69 0507 	sbc.w	r5, r9, r7
     cc4:	3801      	subs	r0, #1
     cc6:	e7e0      	b.n	c8a <__udivmoddi4+0x25e>
     cc8:	4628      	mov	r0, r5
     cca:	e7d3      	b.n	c74 <__udivmoddi4+0x248>
     ccc:	4660      	mov	r0, ip
     cce:	e78f      	b.n	bf0 <__udivmoddi4+0x1c4>
     cd0:	4681      	mov	r9, r0
     cd2:	e7ba      	b.n	c4a <__udivmoddi4+0x21e>
     cd4:	4661      	mov	r1, ip
     cd6:	e777      	b.n	bc8 <__udivmoddi4+0x19c>
     cd8:	4608      	mov	r0, r1
     cda:	e74b      	b.n	b74 <__udivmoddi4+0x148>
     cdc:	f1ac 0c02 	sub.w	ip, ip, #2
     ce0:	443d      	add	r5, r7
     ce2:	e715      	b.n	b10 <__udivmoddi4+0xe4>
     ce4:	3802      	subs	r0, #2
     ce6:	443c      	add	r4, r7
     ce8:	e726      	b.n	b38 <__udivmoddi4+0x10c>
     cea:	bf00      	nop

00000cec <__aeabi_idiv0>:
     cec:	4770      	bx	lr
     cee:	bf00      	nop

00000cf0 <main>:
 *          Each case of switch is a state.
 *
 */

void main(void)
{
     cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     cf4:	f5ad 7d03 	sub.w	sp, sp, #524	; 0x20c
	int decpart = 0;

/**
 * @param lista List of products and price.
 */
	char lista[][40] = {"Coffee","Tuna sandwich","Beer","0.50","1.0","1.50"};
     cf8:	498b      	ldr	r1, [pc, #556]	; (f28 <main+0x238>)
	char lista2[][40] = {"With Sugar","No Sugar","With Mayonese","No Mayonese","Superbock","Heineken"};

/**
 * @param prices List with the price of the products.
 */
	double prices[] = {0.50,1,1.50};
     cfa:	4d8c      	ldr	r5, [pc, #560]	; (f2c <main+0x23c>)
	char lista[][40] = {"Coffee","Tuna sandwich","Beer","0.50","1.0","1.50"};
     cfc:	22f0      	movs	r2, #240	; 0xf0
     cfe:	a80a      	add	r0, sp, #40	; 0x28
     d00:	f004 ff00 	bl	5b04 <memcpy>
	char lista2[][40] = {"With Sugar","No Sugar","With Mayonese","No Mayonese","Superbock","Heineken"};
     d04:	498a      	ldr	r1, [pc, #552]	; (f30 <main+0x240>)
     d06:	22f0      	movs	r2, #240	; 0xf0
     d08:	a846      	add	r0, sp, #280	; 0x118
     d0a:	f004 fefb 	bl	5b04 <memcpy>
	double prices[] = {0.50,1,1.50};
     d0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
     d10:	ac04      	add	r4, sp, #16
     d12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
     d14:	e895 0003 	ldmia.w	r5, {r0, r1}
     d18:	e884 0003 	stmia.w	r4, {r0, r1}
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
     d1c:	4885      	ldr	r0, [pc, #532]	; (f34 <main+0x244>)
     d1e:	f003 fb4b 	bl	43b8 <z_impl_device_get_binding>
 * @param k Variable to print list2.
 */
	int extra;
	
  /* Processing */  
  gpio0_dev = device_get_binding(DT_LABEL(GPIO0_NID));
     d22:	4b85      	ldr	r3, [pc, #532]	; (f38 <main+0x248>)
     d24:	6018      	str	r0, [r3, #0]
  conf_buttons();
     d26:	f000 fad7 	bl	12d8 <conf_buttons>
	printk("\nVending machine just started\n\n");
     d2a:	4884      	ldr	r0, [pc, #528]	; (f3c <main+0x24c>)
     d2c:	f004 fe92 	bl	5a54 <printk>
	int prod = 0;
     d30:	2500      	movs	r5, #0
	char STATE = COINS;
     d32:	2701      	movs	r7, #1
	int decpart = 0;
     d34:	462c      	mov	r4, r5
	int intpart = 0;
     d36:	46ab      	mov	fp, r5
	double credit = 0.0; 
     d38:	f04f 0800 	mov.w	r8, #0
     d3c:	f04f 0900 	mov.w	r9, #0
        

		while (1) {                        
                        /* States */                      
                        switch(STATE){
     d40:	1e7b      	subs	r3, r7, #1
     d42:	2b04      	cmp	r3, #4
     d44:	f200 826c 	bhi.w	1220 <CONFIG_FPROTECT_BLOCK_SIZE+0x220>
     d48:	e8df f013 	tbh	[pc, r3, lsl #1]
     d4c:	01120005 	.word	0x01120005
     d50:	01f8019c 	.word	0x01f8019c
     d54:	021b      	.short	0x021b
                                case COINS:
                                    intpart = (int) credit;
     d56:	4649      	mov	r1, r9
     d58:	4640      	mov	r0, r8
     d5a:	f7ff fe27 	bl	9ac <__aeabi_d2iz>
     d5e:	4683      	mov	fp, r0
                                    decpart = (credit - intpart) * 10;
     d60:	f7ff fb20 	bl	3a4 <__aeabi_i2d>
     d64:	4602      	mov	r2, r0
     d66:	460b      	mov	r3, r1
     d68:	4640      	mov	r0, r8
     d6a:	4649      	mov	r1, r9
     d6c:	f7ff f9cc 	bl	108 <__aeabi_dsub>
                                  if(f5 == 1){
     d70:	4e73      	ldr	r6, [pc, #460]	; (f40 <main+0x250>)
                                    decpart = (credit - intpart) * 10;
     d72:	4b74      	ldr	r3, [pc, #464]	; (f44 <main+0x254>)
     d74:	2200      	movs	r2, #0
     d76:	f7ff fb7f 	bl	478 <__aeabi_dmul>
     d7a:	f7ff fe17 	bl	9ac <__aeabi_d2iz>
                                  if(f5 == 1){
     d7e:	6833      	ldr	r3, [r6, #0]
     d80:	2b01      	cmp	r3, #1
                                    decpart = (credit - intpart) * 10;
     d82:	4604      	mov	r4, r0
                                  if(f5 == 1){
     d84:	d125      	bne.n	dd2 <main+0xe2>
                                    credit += 0.1;
     d86:	a364      	add	r3, pc, #400	; (adr r3, f18 <main+0x228>)
     d88:	e9d3 2300 	ldrd	r2, r3, [r3]
     d8c:	4640      	mov	r0, r8
     d8e:	4649      	mov	r1, r9
     d90:	f7ff f9bc 	bl	10c <__adddf3>
     d94:	4689      	mov	r9, r1
     d96:	4680      	mov	r8, r0
                                    intpart = (int) credit;
     d98:	f7ff fe08 	bl	9ac <__aeabi_d2iz>
     d9c:	4683      	mov	fp, r0
                                    decpart = (credit - intpart) * 10;
     d9e:	f7ff fb01 	bl	3a4 <__aeabi_i2d>
     da2:	4602      	mov	r2, r0
     da4:	460b      	mov	r3, r1
     da6:	4640      	mov	r0, r8
     da8:	4649      	mov	r1, r9
     daa:	f7ff f9ad 	bl	108 <__aeabi_dsub>
     dae:	4b65      	ldr	r3, [pc, #404]	; (f44 <main+0x254>)
     db0:	2200      	movs	r2, #0
     db2:	f7ff fb61 	bl	478 <__aeabi_dmul>
     db6:	f7ff fdf9 	bl	9ac <__aeabi_d2iz>
                                    printf("\33[2K\rcredit = %d.%d EUR", intpart, decpart);
     dba:	4659      	mov	r1, fp
     dbc:	4602      	mov	r2, r0
                                    decpart = (credit - intpart) * 10;
     dbe:	4604      	mov	r4, r0
                                    printf("\33[2K\rcredit = %d.%d EUR", intpart, decpart);
     dc0:	4861      	ldr	r0, [pc, #388]	; (f48 <main+0x258>)
     dc2:	f001 fd8b 	bl	28dc <printf>
                                    STATE = COINS;
                                    f5 = 0;
     dc6:	2300      	movs	r3, #0
                                    k_msleep(SLEEP);
     dc8:	f44f 7096 	mov.w	r0, #300	; 0x12c
                                    f5 = 0;
     dcc:	6033      	str	r3, [r6, #0]
                                    k_msleep(SLEEP);
     dce:	f004 fcf3 	bl	57b8 <k_msleep>
                                  }
                                  if(f6 == 1){
     dd2:	4e5e      	ldr	r6, [pc, #376]	; (f4c <main+0x25c>)
     dd4:	6833      	ldr	r3, [r6, #0]
     dd6:	2b01      	cmp	r3, #1
     dd8:	d125      	bne.n	e26 <main+0x136>
                                    credit += 0.2;
     dda:	a351      	add	r3, pc, #324	; (adr r3, f20 <main+0x230>)
     ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
     de0:	4640      	mov	r0, r8
     de2:	4649      	mov	r1, r9
     de4:	f7ff f992 	bl	10c <__adddf3>
     de8:	4689      	mov	r9, r1
     dea:	4680      	mov	r8, r0
                                    intpart = (int) credit;
     dec:	f7ff fdde 	bl	9ac <__aeabi_d2iz>
     df0:	4683      	mov	fp, r0
                                    decpart = (credit - intpart) * 10;
     df2:	f7ff fad7 	bl	3a4 <__aeabi_i2d>
     df6:	4602      	mov	r2, r0
     df8:	460b      	mov	r3, r1
     dfa:	4640      	mov	r0, r8
     dfc:	4649      	mov	r1, r9
     dfe:	f7ff f983 	bl	108 <__aeabi_dsub>
     e02:	4b50      	ldr	r3, [pc, #320]	; (f44 <main+0x254>)
     e04:	2200      	movs	r2, #0
     e06:	f7ff fb37 	bl	478 <__aeabi_dmul>
     e0a:	f7ff fdcf 	bl	9ac <__aeabi_d2iz>
                                    printf("\33[2K\rcredit = %d.%d EUR", intpart, decpart);
     e0e:	4659      	mov	r1, fp
     e10:	4602      	mov	r2, r0
                                    decpart = (credit - intpart) * 10;
     e12:	4604      	mov	r4, r0
                                    printf("\33[2K\rcredit = %d.%d EUR", intpart, decpart);
     e14:	484c      	ldr	r0, [pc, #304]	; (f48 <main+0x258>)
     e16:	f001 fd61 	bl	28dc <printf>
                                    STATE = COINS;
                                    f6 = 0;
     e1a:	2300      	movs	r3, #0
                                    k_msleep(SLEEP);
     e1c:	f44f 7096 	mov.w	r0, #300	; 0x12c
                                    f6 = 0;
     e20:	6033      	str	r3, [r6, #0]
                                    k_msleep(SLEEP);
     e22:	f004 fcc9 	bl	57b8 <k_msleep>
                                  }
                                  if(f7 == 1){
     e26:	4e4a      	ldr	r6, [pc, #296]	; (f50 <main+0x260>)
     e28:	6833      	ldr	r3, [r6, #0]
     e2a:	2b01      	cmp	r3, #1
     e2c:	d124      	bne.n	e78 <main+0x188>
                                    credit += 0.5;
     e2e:	4b49      	ldr	r3, [pc, #292]	; (f54 <main+0x264>)
     e30:	2200      	movs	r2, #0
     e32:	4640      	mov	r0, r8
     e34:	4649      	mov	r1, r9
     e36:	f7ff f969 	bl	10c <__adddf3>
     e3a:	4689      	mov	r9, r1
     e3c:	4680      	mov	r8, r0
                                    intpart = (int) credit;
     e3e:	f7ff fdb5 	bl	9ac <__aeabi_d2iz>
     e42:	4683      	mov	fp, r0
                                    decpart = (credit - intpart) * 10;
     e44:	f7ff faae 	bl	3a4 <__aeabi_i2d>
     e48:	4602      	mov	r2, r0
     e4a:	460b      	mov	r3, r1
     e4c:	4640      	mov	r0, r8
     e4e:	4649      	mov	r1, r9
     e50:	f7ff f95a 	bl	108 <__aeabi_dsub>
     e54:	4b3b      	ldr	r3, [pc, #236]	; (f44 <main+0x254>)
     e56:	2200      	movs	r2, #0
     e58:	f7ff fb0e 	bl	478 <__aeabi_dmul>
     e5c:	f7ff fda6 	bl	9ac <__aeabi_d2iz>
                                    printf("\33[2K\rcredit = %d.%d EUR", intpart, decpart);
     e60:	4659      	mov	r1, fp
     e62:	4602      	mov	r2, r0
                                    decpart = (credit - intpart) * 10;
     e64:	4604      	mov	r4, r0
                                    printf("\33[2K\rcredit = %d.%d EUR", intpart, decpart);
     e66:	4838      	ldr	r0, [pc, #224]	; (f48 <main+0x258>)
     e68:	f001 fd38 	bl	28dc <printf>
                                    STATE = COINS;
                                    f7 = 0;
     e6c:	2300      	movs	r3, #0
                                    k_msleep(SLEEP);
     e6e:	f44f 7096 	mov.w	r0, #300	; 0x12c
                                    f7 = 0;
     e72:	6033      	str	r3, [r6, #0]
                                    k_msleep(SLEEP);
     e74:	f004 fca0 	bl	57b8 <k_msleep>
                                  }
                                  if(f8 == 1){
     e78:	4e37      	ldr	r6, [pc, #220]	; (f58 <main+0x268>)
     e7a:	6833      	ldr	r3, [r6, #0]
     e7c:	2b01      	cmp	r3, #1
     e7e:	d124      	bne.n	eca <main+0x1da>
                                    credit += 1;
     e80:	4b36      	ldr	r3, [pc, #216]	; (f5c <main+0x26c>)
     e82:	2200      	movs	r2, #0
     e84:	4640      	mov	r0, r8
     e86:	4649      	mov	r1, r9
     e88:	f7ff f940 	bl	10c <__adddf3>
     e8c:	4689      	mov	r9, r1
     e8e:	4680      	mov	r8, r0
                                    intpart = (int) credit;
     e90:	f7ff fd8c 	bl	9ac <__aeabi_d2iz>
     e94:	4683      	mov	fp, r0
                                    decpart = (credit - intpart) * 10;
     e96:	f7ff fa85 	bl	3a4 <__aeabi_i2d>
     e9a:	4602      	mov	r2, r0
     e9c:	460b      	mov	r3, r1
     e9e:	4640      	mov	r0, r8
     ea0:	4649      	mov	r1, r9
     ea2:	f7ff f931 	bl	108 <__aeabi_dsub>
     ea6:	4b27      	ldr	r3, [pc, #156]	; (f44 <main+0x254>)
     ea8:	2200      	movs	r2, #0
     eaa:	f7ff fae5 	bl	478 <__aeabi_dmul>
     eae:	f7ff fd7d 	bl	9ac <__aeabi_d2iz>
                                    printf("\33[2K\rcredit = %d.%d EUR", intpart, decpart);
     eb2:	4659      	mov	r1, fp
     eb4:	4602      	mov	r2, r0
                                    decpart = (credit - intpart) * 10;
     eb6:	4604      	mov	r4, r0
                                    printf("\33[2K\rcredit = %d.%d EUR", intpart, decpart);
     eb8:	4823      	ldr	r0, [pc, #140]	; (f48 <main+0x258>)
     eba:	f001 fd0f 	bl	28dc <printf>
                                    STATE = COINS;
                                    f8 = 0;
     ebe:	2300      	movs	r3, #0
                                    k_msleep(SLEEP);
     ec0:	f44f 7096 	mov.w	r0, #300	; 0x12c
                                    f8 = 0;
     ec4:	6033      	str	r3, [r6, #0]
                                    k_msleep(SLEEP);
     ec6:	f004 fc77 	bl	57b8 <k_msleep>
                                  } 
                                  if((gpio_pin_get_dt(&button1) > 0) | (gpio_pin_get_dt(&button2) > 0)){
     eca:	4825      	ldr	r0, [pc, #148]	; (f60 <main+0x270>)
     ecc:	f004 fc5e 	bl	578c <gpio_pin_get_dt>
     ed0:	4606      	mov	r6, r0
     ed2:	4824      	ldr	r0, [pc, #144]	; (f64 <main+0x274>)
     ed4:	f004 fc5a 	bl	578c <gpio_pin_get_dt>
     ed8:	2e00      	cmp	r6, #0
     eda:	dc01      	bgt.n	ee0 <main+0x1f0>
     edc:	2800      	cmp	r0, #0
     ede:	dd19      	ble.n	f14 <main+0x224>
                                    //printf("\n\nYour credit = %d.%d\n", intpart, decpart);
                                    printf("\n\nProduct: %s - Price: %s EUR",lista[prod],lista[prod+3]);
     ee0:	2128      	movs	r1, #40	; 0x28
     ee2:	4369      	muls	r1, r5
     ee4:	ab0a      	add	r3, sp, #40	; 0x28
     ee6:	f101 0278 	add.w	r2, r1, #120	; 0x78
     eea:	441a      	add	r2, r3
     eec:	4419      	add	r1, r3
     eee:	481e      	ldr	r0, [pc, #120]	; (f68 <main+0x278>)
     ef0:	f001 fcf4 	bl	28dc <printf>
                                    STATE = LIST;
                                    k_msleep(SLEEP);
     ef4:	f44f 7096 	mov.w	r0, #300	; 0x12c
     ef8:	f004 fc5e 	bl	57b8 <k_msleep>
                                    STATE = LIST;
     efc:	2602      	movs	r6, #2
                                  }
                                  if(gpio_pin_get_dt(&button4) > 0){
     efe:	481b      	ldr	r0, [pc, #108]	; (f6c <main+0x27c>)
     f00:	f004 fc44 	bl	578c <gpio_pin_get_dt>
                                    STATE = RETURN;
     f04:	2800      	cmp	r0, #0
     f06:	bfc8      	it	gt
     f08:	2604      	movgt	r6, #4
                                      STATE = SELECT;
                                  }
                                  break;
                        }

			k_msleep(SLEEP_TIME_MS);
     f0a:	2001      	movs	r0, #1
     f0c:	f004 fc54 	bl	57b8 <k_msleep>
                        switch(STATE){
     f10:	4637      	mov	r7, r6
     f12:	e715      	b.n	d40 <main+0x50>
     f14:	463e      	mov	r6, r7
     f16:	e7f2      	b.n	efe <main+0x20e>
     f18:	9999999a 	.word	0x9999999a
     f1c:	3fb99999 	.word	0x3fb99999
     f20:	9999999a 	.word	0x9999999a
     f24:	3fc99999 	.word	0x3fc99999
     f28:	000064a0 	.word	0x000064a0
     f2c:	00006680 	.word	0x00006680
     f30:	00006590 	.word	0x00006590
     f34:	0000688c 	.word	0x0000688c
     f38:	20000338 	.word	0x20000338
     f3c:	00006893 	.word	0x00006893
     f40:	20000328 	.word	0x20000328
     f44:	40240000 	.word	0x40240000
     f48:	000068b3 	.word	0x000068b3
     f4c:	2000032c 	.word	0x2000032c
     f50:	20000330 	.word	0x20000330
     f54:	3fe00000 	.word	0x3fe00000
     f58:	20000334 	.word	0x20000334
     f5c:	3ff00000 	.word	0x3ff00000
     f60:	000066a8 	.word	0x000066a8
     f64:	000066b0 	.word	0x000066b0
     f68:	000068cb 	.word	0x000068cb
     f6c:	000066c0 	.word	0x000066c0
                                  if((f5 == 1) | (f6 == 1) | (f7 == 1) | (f8 == 1))
     f70:	49bc      	ldr	r1, [pc, #752]	; (1264 <CONFIG_FPROTECT_BLOCK_SIZE+0x264>)
     f72:	4ebd      	ldr	r6, [pc, #756]	; (1268 <CONFIG_FPROTECT_BLOCK_SIZE+0x268>)
     f74:	680b      	ldr	r3, [r1, #0]
     f76:	6832      	ldr	r2, [r6, #0]
     f78:	2a01      	cmp	r2, #1
     f7a:	bf18      	it	ne
     f7c:	2b01      	cmpne	r3, #1
     f7e:	4abb      	ldr	r2, [pc, #748]	; (126c <CONFIG_FPROTECT_BLOCK_SIZE+0x26c>)
     f80:	6812      	ldr	r2, [r2, #0]
     f82:	bf0c      	ite	eq
     f84:	2301      	moveq	r3, #1
     f86:	2300      	movne	r3, #0
     f88:	2a01      	cmp	r2, #1
     f8a:	bf08      	it	eq
     f8c:	f043 0301 	orreq.w	r3, r3, #1
     f90:	b91b      	cbnz	r3, f9a <main+0x2aa>
     f92:	4bb7      	ldr	r3, [pc, #732]	; (1270 <CONFIG_FPROTECT_BLOCK_SIZE+0x270>)
     f94:	681b      	ldr	r3, [r3, #0]
     f96:	2b01      	cmp	r3, #1
     f98:	d168      	bne.n	106c <CONFIG_FPROTECT_BLOCK_SIZE+0x6c>
                                    printf("\n");
     f9a:	48b6      	ldr	r0, [pc, #728]	; (1274 <CONFIG_FPROTECT_BLOCK_SIZE+0x274>)
     f9c:	f001 fc9e 	bl	28dc <printf>
                                    f5 = 0; f6 = 0; f7 = 0; f8 = 0;
     fa0:	4ab2      	ldr	r2, [pc, #712]	; (126c <CONFIG_FPROTECT_BLOCK_SIZE+0x26c>)
     fa2:	49b0      	ldr	r1, [pc, #704]	; (1264 <CONFIG_FPROTECT_BLOCK_SIZE+0x264>)
     fa4:	2300      	movs	r3, #0
     fa6:	6013      	str	r3, [r2, #0]
     fa8:	4ab1      	ldr	r2, [pc, #708]	; (1270 <CONFIG_FPROTECT_BLOCK_SIZE+0x270>)
     faa:	6033      	str	r3, [r6, #0]
     fac:	600b      	str	r3, [r1, #0]
     fae:	6013      	str	r3, [r2, #0]
                                    STATE = COINS;
     fb0:	2601      	movs	r6, #1
                                  if(gpio_pin_get_dt(&button1) > 0){
     fb2:	48b1      	ldr	r0, [pc, #708]	; (1278 <CONFIG_FPROTECT_BLOCK_SIZE+0x278>)
     fb4:	f004 fbea 	bl	578c <gpio_pin_get_dt>
     fb8:	2800      	cmp	r0, #0
     fba:	dd12      	ble.n	fe2 <main+0x2f2>
                                    prod++;
     fbc:	3501      	adds	r5, #1
                                      prod = 0;
     fbe:	2d03      	cmp	r5, #3
     fc0:	bfa8      	it	ge
     fc2:	2500      	movge	r5, #0
                                    printf("\33[2K\rProduct: %s - Preco: %s EUR",lista[prod],lista[prod+3]);
     fc4:	2128      	movs	r1, #40	; 0x28
     fc6:	4369      	muls	r1, r5
     fc8:	ab0a      	add	r3, sp, #40	; 0x28
     fca:	f101 0278 	add.w	r2, r1, #120	; 0x78
     fce:	441a      	add	r2, r3
     fd0:	4419      	add	r1, r3
     fd2:	48aa      	ldr	r0, [pc, #680]	; (127c <CONFIG_FPROTECT_BLOCK_SIZE+0x27c>)
     fd4:	f001 fc82 	bl	28dc <printf>
                                    k_msleep(SLEEP);
     fd8:	f44f 7096 	mov.w	r0, #300	; 0x12c
     fdc:	f004 fbec 	bl	57b8 <k_msleep>
                                    STATE = LIST;
     fe0:	463e      	mov	r6, r7
                                  if(gpio_pin_get_dt(&button2) > 0){
     fe2:	48a7      	ldr	r0, [pc, #668]	; (1280 <CONFIG_FPROTECT_BLOCK_SIZE+0x280>)
     fe4:	f004 fbd2 	bl	578c <gpio_pin_get_dt>
     fe8:	2800      	cmp	r0, #0
     fea:	dd12      	ble.n	1012 <CONFIG_FPROTECT_BLOCK_SIZE+0x12>
                                    prod--;
     fec:	3d01      	subs	r5, #1
                                      prod = 2;
     fee:	1c6b      	adds	r3, r5, #1
     ff0:	bf08      	it	eq
     ff2:	2502      	moveq	r5, #2
                                    printf("\33[2K\rProduct: %s - Preco: %s EUR",lista[prod],lista[prod+3]);
     ff4:	2128      	movs	r1, #40	; 0x28
     ff6:	4369      	muls	r1, r5
     ff8:	ab0a      	add	r3, sp, #40	; 0x28
     ffa:	f101 0278 	add.w	r2, r1, #120	; 0x78
     ffe:	441a      	add	r2, r3
    1000:	4419      	add	r1, r3
    1002:	489e      	ldr	r0, [pc, #632]	; (127c <CONFIG_FPROTECT_BLOCK_SIZE+0x27c>)
    1004:	f001 fc6a 	bl	28dc <printf>
                                    k_msleep(SLEEP);
    1008:	f44f 7096 	mov.w	r0, #300	; 0x12c
    100c:	f004 fbd4 	bl	57b8 <k_msleep>
                                    STATE = LIST;
    1010:	463e      	mov	r6, r7
                                  if(gpio_pin_get_dt(&button3) > 0)
    1012:	489c      	ldr	r0, [pc, #624]	; (1284 <CONFIG_FPROTECT_BLOCK_SIZE+0x284>)
    1014:	f004 fbba 	bl	578c <gpio_pin_get_dt>
    1018:	2800      	cmp	r0, #0
    101a:	dd17      	ble.n	104c <CONFIG_FPROTECT_BLOCK_SIZE+0x4c>
                                    if(lista[prod]==lista[0])
    101c:	2628      	movs	r6, #40	; 0x28
    101e:	436e      	muls	r6, r5
    1020:	d104      	bne.n	102c <CONFIG_FPROTECT_BLOCK_SIZE+0x2c>
                                      printf("\n%s",lista2[extra]);
    1022:	4899      	ldr	r0, [pc, #612]	; (1288 <CONFIG_FPROTECT_BLOCK_SIZE+0x288>)
    1024:	a946      	add	r1, sp, #280	; 0x118
    1026:	f001 fc59 	bl	28dc <printf>
                                      extra = 0;
    102a:	46b2      	mov	sl, r6
                                    if(lista[prod]==lista[1])
    102c:	ab0a      	add	r3, sp, #40	; 0x28
    102e:	441e      	add	r6, r3
    1030:	ab14      	add	r3, sp, #80	; 0x50
    1032:	429e      	cmp	r6, r3
    1034:	d11c      	bne.n	1070 <CONFIG_FPROTECT_BLOCK_SIZE+0x70>
                                      printf("\n%s",lista2[extra]);
    1036:	4894      	ldr	r0, [pc, #592]	; (1288 <CONFIG_FPROTECT_BLOCK_SIZE+0x288>)
    1038:	a95a      	add	r1, sp, #360	; 0x168
    103a:	f001 fc4f 	bl	28dc <printf>
                                      extra = 2;
    103e:	f04f 0a02 	mov.w	sl, #2
                                    k_msleep(SLEEP);
    1042:	f44f 7096 	mov.w	r0, #300	; 0x12c
    1046:	f004 fbb7 	bl	57b8 <k_msleep>
                                    STATE = CHOOSE;
    104a:	2605      	movs	r6, #5
                                  if(gpio_pin_get_dt(&button4) > 0 && credit > 0){
    104c:	488f      	ldr	r0, [pc, #572]	; (128c <CONFIG_FPROTECT_BLOCK_SIZE+0x28c>)
    104e:	f004 fb9d 	bl	578c <gpio_pin_get_dt>
    1052:	2800      	cmp	r0, #0
    1054:	f77f af59 	ble.w	f0a <main+0x21a>
    1058:	2200      	movs	r2, #0
    105a:	2300      	movs	r3, #0
    105c:	4640      	mov	r0, r8
    105e:	4649      	mov	r1, r9
    1060:	f7ff fc9a 	bl	998 <__aeabi_dcmpgt>
                                    STATE = RETURN;
    1064:	2800      	cmp	r0, #0
    1066:	bf18      	it	ne
    1068:	2604      	movne	r6, #4
    106a:	e74e      	b.n	f0a <main+0x21a>
    106c:	463e      	mov	r6, r7
    106e:	e7a0      	b.n	fb2 <main+0x2c2>
                                    if(lista[prod]==lista[2])
    1070:	ab1e      	add	r3, sp, #120	; 0x78
    1072:	429e      	cmp	r6, r3
    1074:	d1e5      	bne.n	1042 <CONFIG_FPROTECT_BLOCK_SIZE+0x42>
                                      printf("\n%s",lista2[extra]);
    1076:	4884      	ldr	r0, [pc, #528]	; (1288 <CONFIG_FPROTECT_BLOCK_SIZE+0x288>)
    1078:	a96e      	add	r1, sp, #440	; 0x1b8
    107a:	f001 fc2f 	bl	28dc <printf>
                                      extra = 4;
    107e:	f04f 0a04 	mov.w	sl, #4
    1082:	e7de      	b.n	1042 <CONFIG_FPROTECT_BLOCK_SIZE+0x42>
                                  if(credit - prices[prod] < 0)
    1084:	ab82      	add	r3, sp, #520	; 0x208
    1086:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
    108a:	e953 237e 	ldrd	r2, r3, [r3, #-504]	; 0x1f8
    108e:	4640      	mov	r0, r8
    1090:	4649      	mov	r1, r9
    1092:	e9cd 2302 	strd	r2, r3, [sp, #8]
    1096:	f7ff f837 	bl	108 <__aeabi_dsub>
    109a:	2200      	movs	r2, #0
    109c:	2300      	movs	r3, #0
    109e:	4606      	mov	r6, r0
    10a0:	460f      	mov	r7, r1
    10a2:	f7ff fc5b 	bl	95c <__aeabi_dcmplt>
    10a6:	b328      	cbz	r0, 10f4 <CONFIG_FPROTECT_BLOCK_SIZE+0xf4>
                                    need = prices[prod] - credit;
    10a8:	4642      	mov	r2, r8
    10aa:	464b      	mov	r3, r9
    10ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    10b0:	f7ff f82a 	bl	108 <__aeabi_dsub>
    10b4:	4606      	mov	r6, r0
    10b6:	460f      	mov	r7, r1
                                    int intpart2 = (int) need;
    10b8:	f7ff fc78 	bl	9ac <__aeabi_d2iz>
    10bc:	9002      	str	r0, [sp, #8]
                                    int decpart2 = (need - intpart2) * 10;
    10be:	f7ff f971 	bl	3a4 <__aeabi_i2d>
    10c2:	4602      	mov	r2, r0
    10c4:	460b      	mov	r3, r1
    10c6:	4630      	mov	r0, r6
    10c8:	4639      	mov	r1, r7
    10ca:	f7ff f81d 	bl	108 <__aeabi_dsub>
    10ce:	4b70      	ldr	r3, [pc, #448]	; (1290 <CONFIG_FPROTECT_BLOCK_SIZE+0x290>)
    10d0:	2200      	movs	r2, #0
    10d2:	f7ff f9d1 	bl	478 <__aeabi_dmul>
    10d6:	f7ff fc69 	bl	9ac <__aeabi_d2iz>
                                    printf("\n\nInsuficient credit: %d.%d\n\nYou need more: %d.%d EUR\n",intpart,decpart,intpart2,decpart2);
    10da:	9b02      	ldr	r3, [sp, #8]
    10dc:	9000      	str	r0, [sp, #0]
    10de:	4622      	mov	r2, r4
    10e0:	4659      	mov	r1, fp
    10e2:	486c      	ldr	r0, [pc, #432]	; (1294 <CONFIG_FPROTECT_BLOCK_SIZE+0x294>)
    10e4:	f001 fbfa 	bl	28dc <printf>
                                    k_msleep(SLEEP);
    10e8:	f44f 7096 	mov.w	r0, #300	; 0x12c
    10ec:	f004 fb64 	bl	57b8 <k_msleep>
                                    STATE = COINS;
    10f0:	2601      	movs	r6, #1
    10f2:	e70a      	b.n	f0a <main+0x21a>
                                    printf("\n\n%s selected\n",lista[prod]);
    10f4:	2128      	movs	r1, #40	; 0x28
    10f6:	eb0d 0301 	add.w	r3, sp, r1
    10fa:	fb01 3105 	mla	r1, r1, r5, r3
    10fe:	4866      	ldr	r0, [pc, #408]	; (1298 <CONFIG_FPROTECT_BLOCK_SIZE+0x298>)
    1100:	f001 fbec 	bl	28dc <printf>
                                    intpart = (int) credit;
    1104:	4630      	mov	r0, r6
    1106:	4639      	mov	r1, r7
    1108:	f7ff fc50 	bl	9ac <__aeabi_d2iz>
    110c:	4683      	mov	fp, r0
                                    decpart = (credit - intpart) * 10;
    110e:	f7ff f949 	bl	3a4 <__aeabi_i2d>
    1112:	4602      	mov	r2, r0
    1114:	460b      	mov	r3, r1
    1116:	4630      	mov	r0, r6
    1118:	4639      	mov	r1, r7
    111a:	f7fe fff5 	bl	108 <__aeabi_dsub>
    111e:	4b5c      	ldr	r3, [pc, #368]	; (1290 <CONFIG_FPROTECT_BLOCK_SIZE+0x290>)
    1120:	2200      	movs	r2, #0
    1122:	f7ff f9a9 	bl	478 <__aeabi_dmul>
    1126:	f7ff fc41 	bl	9ac <__aeabi_d2iz>
    112a:	4604      	mov	r4, r0
                                    k_msleep(SLEEP);
    112c:	f44f 7096 	mov.w	r0, #300	; 0x12c
                                    credit = credit - prices[prod];
    1130:	46b0      	mov	r8, r6
                                    k_msleep(SLEEP);
    1132:	f004 fb41 	bl	57b8 <k_msleep>
                                    credit = credit - prices[prod];
    1136:	46b9      	mov	r9, r7
                                    STATE = RETURN;
    1138:	2604      	movs	r6, #4
    113a:	e6e6      	b.n	f0a <main+0x21a>
                                  if(credit <= 0)
    113c:	2200      	movs	r2, #0
    113e:	2300      	movs	r3, #0
    1140:	4640      	mov	r0, r8
    1142:	4649      	mov	r1, r9
    1144:	f7ff fc14 	bl	970 <__aeabi_dcmple>
    1148:	b158      	cbz	r0, 1162 <CONFIG_FPROTECT_BLOCK_SIZE+0x162>
                                    printf("\nNo credit to return\n\n");
    114a:	4854      	ldr	r0, [pc, #336]	; (129c <CONFIG_FPROTECT_BLOCK_SIZE+0x29c>)
    114c:	f001 fbc6 	bl	28dc <printf>
                                    k_msleep(200);
    1150:	20c8      	movs	r0, #200	; 0xc8
                                    k_msleep(SLEEP);
    1152:	f004 fb31 	bl	57b8 <k_msleep>
                                    STATE = COINS;
    1156:	2601      	movs	r6, #1
                                    credit = 0;
    1158:	f04f 0800 	mov.w	r8, #0
    115c:	f04f 0900 	mov.w	r9, #0
    1160:	e6d3      	b.n	f0a <main+0x21a>
                                  if(credit > 0){
    1162:	2200      	movs	r2, #0
    1164:	2300      	movs	r3, #0
    1166:	4640      	mov	r0, r8
    1168:	4649      	mov	r1, r9
    116a:	f7ff fc15 	bl	998 <__aeabi_dcmpgt>
    116e:	2800      	cmp	r0, #0
    1170:	d056      	beq.n	1220 <CONFIG_FPROTECT_BLOCK_SIZE+0x220>
                                    printf("\nCredit returned: %d.%d EUR\n\n",intpart,decpart);
    1172:	484b      	ldr	r0, [pc, #300]	; (12a0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2a0>)
    1174:	4622      	mov	r2, r4
    1176:	4659      	mov	r1, fp
    1178:	f001 fbb0 	bl	28dc <printf>
                                    k_msleep(SLEEP);
    117c:	f44f 7096 	mov.w	r0, #300	; 0x12c
    1180:	e7e7      	b.n	1152 <CONFIG_FPROTECT_BLOCK_SIZE+0x152>
                                  if(lista[prod] == lista[0])
    1182:	2328      	movs	r3, #40	; 0x28
    1184:	436b      	muls	r3, r5
    1186:	9302      	str	r3, [sp, #8]
    1188:	d11c      	bne.n	11c4 <CONFIG_FPROTECT_BLOCK_SIZE+0x1c4>
                                    if((gpio_pin_get_dt(&button1) > 0) | (gpio_pin_get_dt(&button2) > 0))
    118a:	483b      	ldr	r0, [pc, #236]	; (1278 <CONFIG_FPROTECT_BLOCK_SIZE+0x278>)
    118c:	f004 fafe 	bl	578c <gpio_pin_get_dt>
    1190:	4606      	mov	r6, r0
    1192:	483b      	ldr	r0, [pc, #236]	; (1280 <CONFIG_FPROTECT_BLOCK_SIZE+0x280>)
    1194:	f004 fafa 	bl	578c <gpio_pin_get_dt>
    1198:	2e00      	cmp	r6, #0
    119a:	dc01      	bgt.n	11a0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1a0>
    119c:	2800      	cmp	r0, #0
    119e:	dd13      	ble.n	11c8 <CONFIG_FPROTECT_BLOCK_SIZE+0x1c8>
                                      extra++;
    11a0:	f10a 0a01 	add.w	sl, sl, #1
                                        extra = 0;
    11a4:	f1ba 0f02 	cmp.w	sl, #2
    11a8:	bfa8      	it	ge
    11aa:	f04f 0a00 	movge.w	sl, #0
                                      printf("\33[2K\r%s",lista2[extra]);
    11ae:	ab46      	add	r3, sp, #280	; 0x118
    11b0:	2128      	movs	r1, #40	; 0x28
    11b2:	483c      	ldr	r0, [pc, #240]	; (12a4 <CONFIG_FPROTECT_BLOCK_SIZE+0x2a4>)
    11b4:	fb01 310a 	mla	r1, r1, sl, r3
    11b8:	f001 fb90 	bl	28dc <printf>
                                      k_msleep(SLEEP);
    11bc:	f44f 7096 	mov.w	r0, #300	; 0x12c
    11c0:	f004 fafa 	bl	57b8 <k_msleep>
    11c4:	463e      	mov	r6, r7
    11c6:	e006      	b.n	11d6 <CONFIG_FPROTECT_BLOCK_SIZE+0x1d6>
                                    else if(gpio_pin_get_dt(&button3) > 0)
    11c8:	482e      	ldr	r0, [pc, #184]	; (1284 <CONFIG_FPROTECT_BLOCK_SIZE+0x284>)
    11ca:	f004 fadf 	bl	578c <gpio_pin_get_dt>
                                      STATE = SELECT;
    11ce:	2800      	cmp	r0, #0
    11d0:	bfd4      	ite	le
    11d2:	463e      	movle	r6, r7
    11d4:	2603      	movgt	r6, #3
                                  if(lista[prod] == lista[1])
    11d6:	9b02      	ldr	r3, [sp, #8]
    11d8:	aa0a      	add	r2, sp, #40	; 0x28
    11da:	4413      	add	r3, r2
    11dc:	461a      	mov	r2, r3
    11de:	ab14      	add	r3, sp, #80	; 0x50
    11e0:	429a      	cmp	r2, r3
    11e2:	d11f      	bne.n	1224 <CONFIG_FPROTECT_BLOCK_SIZE+0x224>
                                    if((gpio_pin_get_dt(&button1) > 0) | (gpio_pin_get_dt(&button2) > 0))
    11e4:	4824      	ldr	r0, [pc, #144]	; (1278 <CONFIG_FPROTECT_BLOCK_SIZE+0x278>)
    11e6:	f004 fad1 	bl	578c <gpio_pin_get_dt>
    11ea:	9002      	str	r0, [sp, #8]
    11ec:	4824      	ldr	r0, [pc, #144]	; (1280 <CONFIG_FPROTECT_BLOCK_SIZE+0x280>)
    11ee:	f004 facd 	bl	578c <gpio_pin_get_dt>
    11f2:	9b02      	ldr	r3, [sp, #8]
    11f4:	2b00      	cmp	r3, #0
    11f6:	dc01      	bgt.n	11fc <CONFIG_FPROTECT_BLOCK_SIZE+0x1fc>
    11f8:	2800      	cmp	r0, #0
    11fa:	dd2b      	ble.n	1254 <CONFIG_FPROTECT_BLOCK_SIZE+0x254>
                                      extra++;
    11fc:	f10a 0a01 	add.w	sl, sl, #1
                                        extra = 2;
    1200:	f1ba 0f04 	cmp.w	sl, #4
    1204:	bfa8      	it	ge
    1206:	f04f 0a02 	movge.w	sl, #2
                                      printf("\33[2K\r%s",lista2[extra]);
    120a:	ab46      	add	r3, sp, #280	; 0x118
    120c:	2128      	movs	r1, #40	; 0x28
    120e:	4825      	ldr	r0, [pc, #148]	; (12a4 <CONFIG_FPROTECT_BLOCK_SIZE+0x2a4>)
    1210:	fb01 310a 	mla	r1, r1, sl, r3
    1214:	f001 fb62 	bl	28dc <printf>
                                      k_msleep(SLEEP);
    1218:	f44f 7096 	mov.w	r0, #300	; 0x12c
    121c:	f004 facc 	bl	57b8 <k_msleep>
    1220:	463e      	mov	r6, r7
    1222:	e672      	b.n	f0a <main+0x21a>
                                  if(lista[prod] == lista[2])
    1224:	ab1e      	add	r3, sp, #120	; 0x78
    1226:	429a      	cmp	r2, r3
    1228:	f47f ae6f 	bne.w	f0a <main+0x21a>
                                    if((gpio_pin_get_dt(&button1) > 0) | (gpio_pin_get_dt(&button2) > 0))
    122c:	4812      	ldr	r0, [pc, #72]	; (1278 <CONFIG_FPROTECT_BLOCK_SIZE+0x278>)
    122e:	f004 faad 	bl	578c <gpio_pin_get_dt>
    1232:	9002      	str	r0, [sp, #8]
    1234:	4812      	ldr	r0, [pc, #72]	; (1280 <CONFIG_FPROTECT_BLOCK_SIZE+0x280>)
    1236:	f004 faa9 	bl	578c <gpio_pin_get_dt>
    123a:	9b02      	ldr	r3, [sp, #8]
    123c:	2b00      	cmp	r3, #0
    123e:	dc01      	bgt.n	1244 <CONFIG_FPROTECT_BLOCK_SIZE+0x244>
    1240:	2800      	cmp	r0, #0
    1242:	dd07      	ble.n	1254 <CONFIG_FPROTECT_BLOCK_SIZE+0x254>
                                      extra++;
    1244:	f10a 0a01 	add.w	sl, sl, #1
                                        extra = 4;
    1248:	f1ba 0f06 	cmp.w	sl, #6
    124c:	bfa8      	it	ge
    124e:	f04f 0a04 	movge.w	sl, #4
    1252:	e7da      	b.n	120a <CONFIG_FPROTECT_BLOCK_SIZE+0x20a>
                                    else if(gpio_pin_get_dt(&button3) > 0)
    1254:	480b      	ldr	r0, [pc, #44]	; (1284 <CONFIG_FPROTECT_BLOCK_SIZE+0x284>)
    1256:	f004 fa99 	bl	578c <gpio_pin_get_dt>
                                      STATE = SELECT;
    125a:	2800      	cmp	r0, #0
    125c:	bfc8      	it	gt
    125e:	2603      	movgt	r6, #3
    1260:	e653      	b.n	f0a <main+0x21a>
    1262:	bf00      	nop
    1264:	20000328 	.word	0x20000328
    1268:	2000032c 	.word	0x2000032c
    126c:	20000330 	.word	0x20000330
    1270:	20000334 	.word	0x20000334
    1274:	00006987 	.word	0x00006987
    1278:	000066a8 	.word	0x000066a8
    127c:	000068e9 	.word	0x000068e9
    1280:	000066b0 	.word	0x000066b0
    1284:	000066b8 	.word	0x000066b8
    1288:	0000690a 	.word	0x0000690a
    128c:	000066c0 	.word	0x000066c0
    1290:	40240000 	.word	0x40240000
    1294:	0000690e 	.word	0x0000690e
    1298:	00006945 	.word	0x00006945
    129c:	00006954 	.word	0x00006954
    12a0:	0000696b 	.word	0x0000696b
    12a4:	00006989 	.word	0x00006989

000012a8 <button5_pressed>:
    f5 = 1;
    12a8:	4b01      	ldr	r3, [pc, #4]	; (12b0 <button5_pressed+0x8>)
    12aa:	2201      	movs	r2, #1
    12ac:	601a      	str	r2, [r3, #0]
}
    12ae:	4770      	bx	lr
    12b0:	20000328 	.word	0x20000328

000012b4 <button6_pressed>:
    f6 = 1;
    12b4:	4b01      	ldr	r3, [pc, #4]	; (12bc <button6_pressed+0x8>)
    12b6:	2201      	movs	r2, #1
    12b8:	601a      	str	r2, [r3, #0]
}
    12ba:	4770      	bx	lr
    12bc:	2000032c 	.word	0x2000032c

000012c0 <button7_pressed>:
    f7 = 1;
    12c0:	4b01      	ldr	r3, [pc, #4]	; (12c8 <button7_pressed+0x8>)
    12c2:	2201      	movs	r2, #1
    12c4:	601a      	str	r2, [r3, #0]
}
    12c6:	4770      	bx	lr
    12c8:	20000330 	.word	0x20000330

000012cc <button8_pressed>:
    f8 = 1;
    12cc:	4b01      	ldr	r3, [pc, #4]	; (12d4 <button8_pressed+0x8>)
    12ce:	2201      	movs	r2, #1
    12d0:	601a      	str	r2, [r3, #0]
}
    12d2:	4770      	bx	lr
    12d4:	20000334 	.word	0x20000334

000012d8 <conf_buttons>:
*          
*
*/

void conf_buttons()
{
    12d8:	b510      	push	{r4, lr}
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&port, *(uintptr_t *)&pin, *(uintptr_t *)&flags, K_SYSCALL_GPIO_PIN_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_configure(port, pin, flags);
    12da:	4c4f      	ldr	r4, [pc, #316]	; (1418 <conf_buttons+0x140>)
    12dc:	f240 1211 	movw	r2, #273	; 0x111
    12e0:	210b      	movs	r1, #11
    12e2:	4620      	mov	r0, r4
    12e4:	f004 fa30 	bl	5748 <z_impl_gpio_pin_configure>

int ret;

        // button 1
	      ret = gpio_pin_configure_dt(&button1, GPIO_INPUT);
	      ret = gpio_pin_interrupt_configure_dt(&button1, GPIO_INT_EDGE_TO_ACTIVE);
    12e8:	484c      	ldr	r0, [pc, #304]	; (141c <conf_buttons+0x144>)
    12ea:	f004 fa7b 	bl	57e4 <gpio_pin_interrupt_configure_dt.constprop.0>
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
    12ee:	494c      	ldr	r1, [pc, #304]	; (1420 <conf_buttons+0x148>)
    12f0:	4b4c      	ldr	r3, [pc, #304]	; (1424 <conf_buttons+0x14c>)
    12f2:	604b      	str	r3, [r1, #4]

	      gpio_init_callback(&button1_cb_data, button1_pressed, BIT(button1.pin));
	      gpio_add_callback(button1.port, &button1_cb_data);
    12f4:	4620      	mov	r0, r4
	callback->pin_mask = pin_mask;
    12f6:	f44f 6300 	mov.w	r3, #2048	; 0x800
    12fa:	608b      	str	r3, [r1, #8]
    12fc:	f004 fa3e 	bl	577c <gpio_add_callback>
    1300:	f240 1211 	movw	r2, #273	; 0x111
    1304:	210c      	movs	r1, #12
    1306:	4620      	mov	r0, r4
    1308:	f004 fa1e 	bl	5748 <z_impl_gpio_pin_configure>

        // button 2
        ret = gpio_pin_configure_dt(&button2, GPIO_INPUT);
	      ret = gpio_pin_interrupt_configure_dt(&button2, GPIO_INT_EDGE_TO_ACTIVE);
    130c:	4846      	ldr	r0, [pc, #280]	; (1428 <conf_buttons+0x150>)
    130e:	f004 fa69 	bl	57e4 <gpio_pin_interrupt_configure_dt.constprop.0>
	callback->handler = handler;
    1312:	4946      	ldr	r1, [pc, #280]	; (142c <conf_buttons+0x154>)
    1314:	4b46      	ldr	r3, [pc, #280]	; (1430 <conf_buttons+0x158>)
    1316:	604b      	str	r3, [r1, #4]

	      gpio_init_callback(&button2_cb_data, button2_pressed, BIT(button2.pin));
	      gpio_add_callback(button2.port, &button2_cb_data);
    1318:	4620      	mov	r0, r4
	callback->pin_mask = pin_mask;
    131a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    131e:	608b      	str	r3, [r1, #8]
    1320:	f004 fa2c 	bl	577c <gpio_add_callback>
    1324:	f240 1211 	movw	r2, #273	; 0x111
    1328:	2118      	movs	r1, #24
    132a:	4620      	mov	r0, r4
    132c:	f004 fa0c 	bl	5748 <z_impl_gpio_pin_configure>

        // button 3
        ret = gpio_pin_configure_dt(&button3, GPIO_INPUT);
	      ret = gpio_pin_interrupt_configure_dt(&button3, GPIO_INT_EDGE_TO_ACTIVE);
    1330:	4840      	ldr	r0, [pc, #256]	; (1434 <conf_buttons+0x15c>)
    1332:	f004 fa57 	bl	57e4 <gpio_pin_interrupt_configure_dt.constprop.0>
	callback->handler = handler;
    1336:	4940      	ldr	r1, [pc, #256]	; (1438 <conf_buttons+0x160>)
    1338:	4b40      	ldr	r3, [pc, #256]	; (143c <conf_buttons+0x164>)
    133a:	604b      	str	r3, [r1, #4]

	      gpio_init_callback(&button3_cb_data, button3_pressed, BIT(button3.pin));
	      gpio_add_callback(button3.port, &button3_cb_data);
    133c:	4620      	mov	r0, r4
	callback->pin_mask = pin_mask;
    133e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    1342:	608b      	str	r3, [r1, #8]
    1344:	f004 fa1a 	bl	577c <gpio_add_callback>
    1348:	f240 1211 	movw	r2, #273	; 0x111
    134c:	2119      	movs	r1, #25
    134e:	4620      	mov	r0, r4
    1350:	f004 f9fa 	bl	5748 <z_impl_gpio_pin_configure>

        // button 4
        ret = gpio_pin_configure_dt(&button4, GPIO_INPUT);
	      ret = gpio_pin_interrupt_configure_dt(&button4, GPIO_INT_EDGE_TO_ACTIVE);
    1354:	483a      	ldr	r0, [pc, #232]	; (1440 <conf_buttons+0x168>)
    1356:	f004 fa45 	bl	57e4 <gpio_pin_interrupt_configure_dt.constprop.0>
	callback->handler = handler;
    135a:	493a      	ldr	r1, [pc, #232]	; (1444 <conf_buttons+0x16c>)
    135c:	4b3a      	ldr	r3, [pc, #232]	; (1448 <conf_buttons+0x170>)
    135e:	604b      	str	r3, [r1, #4]

	      gpio_init_callback(&button4_cb_data, button4_pressed, BIT(button4.pin));
	      gpio_add_callback(button4.port, &button4_cb_data);
    1360:	4620      	mov	r0, r4

        // button 5
	      ret = gpio_pin_configure(gpio0_dev, SW4_NODE, GPIO_INPUT | GPIO_PULL_UP);
    1362:	4c3a      	ldr	r4, [pc, #232]	; (144c <conf_buttons+0x174>)
	callback->pin_mask = pin_mask;
    1364:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    1368:	608b      	str	r3, [r1, #8]
	      gpio_add_callback(button4.port, &button4_cb_data);
    136a:	f004 fa07 	bl	577c <gpio_add_callback>
	      ret = gpio_pin_configure(gpio0_dev, SW4_NODE, GPIO_INPUT | GPIO_PULL_UP);
    136e:	6820      	ldr	r0, [r4, #0]
    1370:	f44f 7288 	mov.w	r2, #272	; 0x110
    1374:	2103      	movs	r1, #3
    1376:	f004 f9e7 	bl	5748 <z_impl_gpio_pin_configure>
        ret = gpio_pin_interrupt_configure(gpio0_dev, SW4_NODE, GPIO_INT_EDGE_TO_INACTIVE);
    137a:	6820      	ldr	r0, [r4, #0]
	return z_impl_gpio_pin_interrupt_configure(port, pin, flags);
    137c:	f44f 3270 	mov.w	r2, #245760	; 0x3c000
    1380:	2103      	movs	r1, #3
    1382:	f004 f9cd 	bl	5720 <z_impl_gpio_pin_interrupt_configure>
	callback->handler = handler;
    1386:	4932      	ldr	r1, [pc, #200]	; (1450 <conf_buttons+0x178>)
    1388:	4b32      	ldr	r3, [pc, #200]	; (1454 <conf_buttons+0x17c>)
    138a:	604b      	str	r3, [r1, #4]

        gpio_init_callback(&button5_cb_data, button5_pressed, BIT(SW4_NODE));
        gpio_add_callback(gpio0_dev, &button5_cb_data);
    138c:	6820      	ldr	r0, [r4, #0]
	callback->pin_mask = pin_mask;
    138e:	2308      	movs	r3, #8
    1390:	608b      	str	r3, [r1, #8]
    1392:	f004 f9f3 	bl	577c <gpio_add_callback>

        // button 6
	      ret = gpio_pin_configure(gpio0_dev, SW5_NODE, GPIO_INPUT | GPIO_PULL_UP);
    1396:	6820      	ldr	r0, [r4, #0]
	return z_impl_gpio_pin_configure(port, pin, flags);
    1398:	f44f 7288 	mov.w	r2, #272	; 0x110
    139c:	2104      	movs	r1, #4
    139e:	f004 f9d3 	bl	5748 <z_impl_gpio_pin_configure>
        ret = gpio_pin_interrupt_configure(gpio0_dev, SW5_NODE, GPIO_INT_EDGE_TO_INACTIVE);
    13a2:	6820      	ldr	r0, [r4, #0]
	return z_impl_gpio_pin_interrupt_configure(port, pin, flags);
    13a4:	f44f 3270 	mov.w	r2, #245760	; 0x3c000
    13a8:	2104      	movs	r1, #4
    13aa:	f004 f9b9 	bl	5720 <z_impl_gpio_pin_interrupt_configure>
	callback->handler = handler;
    13ae:	492a      	ldr	r1, [pc, #168]	; (1458 <conf_buttons+0x180>)
    13b0:	4b2a      	ldr	r3, [pc, #168]	; (145c <conf_buttons+0x184>)
    13b2:	604b      	str	r3, [r1, #4]

        gpio_init_callback(&button6_cb_data, button6_pressed, BIT(SW5_NODE));
        gpio_add_callback(gpio0_dev, &button6_cb_data);
    13b4:	6820      	ldr	r0, [r4, #0]
	callback->pin_mask = pin_mask;
    13b6:	2310      	movs	r3, #16
    13b8:	608b      	str	r3, [r1, #8]
    13ba:	f004 f9df 	bl	577c <gpio_add_callback>

        // button 7
	      ret = gpio_pin_configure(gpio0_dev, SW6_NODE, GPIO_INPUT | GPIO_PULL_UP);
    13be:	6820      	ldr	r0, [r4, #0]
	return z_impl_gpio_pin_configure(port, pin, flags);
    13c0:	f44f 7288 	mov.w	r2, #272	; 0x110
    13c4:	211c      	movs	r1, #28
    13c6:	f004 f9bf 	bl	5748 <z_impl_gpio_pin_configure>
        ret = gpio_pin_interrupt_configure(gpio0_dev, SW6_NODE, GPIO_INT_EDGE_TO_INACTIVE);
    13ca:	6820      	ldr	r0, [r4, #0]
	return z_impl_gpio_pin_interrupt_configure(port, pin, flags);
    13cc:	f44f 3270 	mov.w	r2, #245760	; 0x3c000
    13d0:	211c      	movs	r1, #28
    13d2:	f004 f9a5 	bl	5720 <z_impl_gpio_pin_interrupt_configure>
	callback->handler = handler;
    13d6:	4922      	ldr	r1, [pc, #136]	; (1460 <conf_buttons+0x188>)
    13d8:	4b22      	ldr	r3, [pc, #136]	; (1464 <conf_buttons+0x18c>)
    13da:	604b      	str	r3, [r1, #4]

        gpio_init_callback(&button7_cb_data, button7_pressed, BIT(SW6_NODE));
        gpio_add_callback(gpio0_dev, &button7_cb_data);
    13dc:	6820      	ldr	r0, [r4, #0]
	callback->pin_mask = pin_mask;
    13de:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    13e2:	608b      	str	r3, [r1, #8]
    13e4:	f004 f9ca 	bl	577c <gpio_add_callback>

        // button 8
	      ret = gpio_pin_configure(gpio0_dev, SW7_NODE, GPIO_INPUT | GPIO_PULL_UP);
    13e8:	6820      	ldr	r0, [r4, #0]
	return z_impl_gpio_pin_configure(port, pin, flags);
    13ea:	f44f 7288 	mov.w	r2, #272	; 0x110
    13ee:	211d      	movs	r1, #29
    13f0:	f004 f9aa 	bl	5748 <z_impl_gpio_pin_configure>
        ret = gpio_pin_interrupt_configure(gpio0_dev, SW7_NODE, GPIO_INT_EDGE_TO_INACTIVE);
    13f4:	6820      	ldr	r0, [r4, #0]
	return z_impl_gpio_pin_interrupt_configure(port, pin, flags);
    13f6:	211d      	movs	r1, #29
    13f8:	f44f 3270 	mov.w	r2, #245760	; 0x3c000
    13fc:	f004 f990 	bl	5720 <z_impl_gpio_pin_interrupt_configure>
	callback->handler = handler;
    1400:	4919      	ldr	r1, [pc, #100]	; (1468 <conf_buttons+0x190>)
    1402:	4b1a      	ldr	r3, [pc, #104]	; (146c <conf_buttons+0x194>)

        gpio_init_callback(&button8_cb_data, button8_pressed, BIT(SW7_NODE));
        gpio_add_callback(gpio0_dev, &button8_cb_data);
    1404:	6820      	ldr	r0, [r4, #0]
    1406:	604b      	str	r3, [r1, #4]
}
    1408:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	callback->pin_mask = pin_mask;
    140c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
    1410:	608b      	str	r3, [r1, #8]
        gpio_add_callback(gpio0_dev, &button8_cb_data);
    1412:	f004 b9b3 	b.w	577c <gpio_add_callback>
    1416:	bf00      	nop
    1418:	000062a0 	.word	0x000062a0
    141c:	000066a8 	.word	0x000066a8
    1420:	200002c8 	.word	0x200002c8
    1424:	000057b7 	.word	0x000057b7
    1428:	000066b0 	.word	0x000066b0
    142c:	200002d4 	.word	0x200002d4
    1430:	000057e3 	.word	0x000057e3
    1434:	000066b8 	.word	0x000066b8
    1438:	200002e0 	.word	0x200002e0
    143c:	000057df 	.word	0x000057df
    1440:	000066c0 	.word	0x000066c0
    1444:	200002ec 	.word	0x200002ec
    1448:	000057e1 	.word	0x000057e1
    144c:	20000338 	.word	0x20000338
    1450:	200002f8 	.word	0x200002f8
    1454:	000012a9 	.word	0x000012a9
    1458:	20000304 	.word	0x20000304
    145c:	000012b5 	.word	0x000012b5
    1460:	20000310 	.word	0x20000310
    1464:	000012c1 	.word	0x000012c1
    1468:	2000031c 	.word	0x2000031c
    146c:	000012cd 	.word	0x000012cd

00001470 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    1470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1474:	b091      	sub	sp, #68	; 0x44
    1476:	468b      	mov	fp, r1
    1478:	9002      	str	r0, [sp, #8]
    147a:	4692      	mov	sl, r2
    147c:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    147e:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    1480:	f89a 0000 	ldrb.w	r0, [sl]
    1484:	b908      	cbnz	r0, 148a <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
    1486:	4628      	mov	r0, r5
    1488:	e35e      	b.n	1b48 <cbvprintf+0x6d8>
		if (*fp != '%') {
    148a:	2825      	cmp	r0, #37	; 0x25
    148c:	f10a 0701 	add.w	r7, sl, #1
    1490:	d007      	beq.n	14a2 <cbvprintf+0x32>
			OUTC('%');
    1492:	9b02      	ldr	r3, [sp, #8]
    1494:	4659      	mov	r1, fp
    1496:	4798      	blx	r3
    1498:	2800      	cmp	r0, #0
    149a:	f2c0 8355 	blt.w	1b48 <cbvprintf+0x6d8>
    149e:	3501      	adds	r5, #1
			break;
    14a0:	e210      	b.n	18c4 <cbvprintf+0x454>
		} state = {
    14a2:	2218      	movs	r2, #24
    14a4:	2100      	movs	r1, #0
    14a6:	a80a      	add	r0, sp, #40	; 0x28
    14a8:	f004 fb37 	bl	5b1a <memset>
	if (*sp == '%') {
    14ac:	f89a 3001 	ldrb.w	r3, [sl, #1]
    14b0:	2b25      	cmp	r3, #37	; 0x25
    14b2:	d078      	beq.n	15a6 <cbvprintf+0x136>
    14b4:	2200      	movs	r2, #0
    14b6:	4694      	mov	ip, r2
    14b8:	4616      	mov	r6, r2
    14ba:	4696      	mov	lr, r2
    14bc:	4610      	mov	r0, r2
    14be:	4639      	mov	r1, r7
		switch (*sp) {
    14c0:	f817 3b01 	ldrb.w	r3, [r7], #1
    14c4:	2b2b      	cmp	r3, #43	; 0x2b
    14c6:	f000 809d 	beq.w	1604 <cbvprintf+0x194>
    14ca:	f200 8094 	bhi.w	15f6 <cbvprintf+0x186>
    14ce:	2b20      	cmp	r3, #32
    14d0:	f000 809b 	beq.w	160a <cbvprintf+0x19a>
    14d4:	2b23      	cmp	r3, #35	; 0x23
    14d6:	f000 809a 	beq.w	160e <cbvprintf+0x19e>
    14da:	b128      	cbz	r0, 14e8 <cbvprintf+0x78>
    14dc:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    14e0:	f040 0004 	orr.w	r0, r0, #4
    14e4:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    14e8:	f1be 0f00 	cmp.w	lr, #0
    14ec:	d005      	beq.n	14fa <cbvprintf+0x8a>
    14ee:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    14f2:	f040 0008 	orr.w	r0, r0, #8
    14f6:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    14fa:	b12e      	cbz	r6, 1508 <cbvprintf+0x98>
    14fc:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    1500:	f040 0010 	orr.w	r0, r0, #16
    1504:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    1508:	f1bc 0f00 	cmp.w	ip, #0
    150c:	d005      	beq.n	151a <cbvprintf+0xaa>
    150e:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    1512:	f040 0020 	orr.w	r0, r0, #32
    1516:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    151a:	b12a      	cbz	r2, 1528 <cbvprintf+0xb8>
    151c:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    1520:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    1524:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
    1528:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    152c:	f002 0044 	and.w	r0, r2, #68	; 0x44
    1530:	2844      	cmp	r0, #68	; 0x44
    1532:	d103      	bne.n	153c <cbvprintf+0xcc>
		conv->flag_zero = false;
    1534:	f36f 1286 	bfc	r2, #6, #1
    1538:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
    153c:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
    1540:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
    1542:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    1546:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
    154a:	d17b      	bne.n	1644 <cbvprintf+0x1d4>
		conv->width_star = true;
    154c:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    1550:	f042 0201 	orr.w	r2, r2, #1
    1554:	1c4b      	adds	r3, r1, #1
    1556:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
    155a:	781a      	ldrb	r2, [r3, #0]
    155c:	2a2e      	cmp	r2, #46	; 0x2e
    155e:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    1562:	bf0c      	ite	eq
    1564:	2101      	moveq	r1, #1
    1566:	2100      	movne	r1, #0
    1568:	f361 0241 	bfi	r2, r1, #1, #1
    156c:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
    1570:	d174      	bne.n	165c <cbvprintf+0x1ec>
	if (*sp == '*') {
    1572:	785a      	ldrb	r2, [r3, #1]
    1574:	2a2a      	cmp	r2, #42	; 0x2a
    1576:	d06a      	beq.n	164e <cbvprintf+0x1de>
    1578:	3301      	adds	r3, #1
	size_t val = 0;
    157a:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
    157c:	260a      	movs	r6, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    157e:	4618      	mov	r0, r3
    1580:	f810 2b01 	ldrb.w	r2, [r0], #1
    1584:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    1588:	2f09      	cmp	r7, #9
    158a:	f240 808e 	bls.w	16aa <cbvprintf+0x23a>
	conv->unsupported |= ((conv->prec_value < 0)
    158e:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
    1592:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
    1594:	f3c2 0040 	ubfx	r0, r2, #1, #1
    1598:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
    159c:	f361 0241 	bfi	r2, r1, #1, #1
    15a0:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
    15a4:	e05a      	b.n	165c <cbvprintf+0x1ec>
		conv->specifier = *sp++;
    15a6:	f10a 0702 	add.w	r7, sl, #2
    15aa:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
    15ae:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    15b2:	07d9      	lsls	r1, r3, #31
    15b4:	f140 8149 	bpl.w	184a <cbvprintf+0x3da>
			width = va_arg(ap, int);
    15b8:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
    15bc:	f1b9 0f00 	cmp.w	r9, #0
    15c0:	da07      	bge.n	15d2 <cbvprintf+0x162>
				conv->flag_dash = true;
    15c2:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    15c6:	f042 0204 	orr.w	r2, r2, #4
    15ca:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				width = -width;
    15ce:	f1c9 0900 	rsb	r9, r9, #0
		if (conv->prec_star) {
    15d2:	075a      	lsls	r2, r3, #29
    15d4:	f140 8142 	bpl.w	185c <cbvprintf+0x3ec>
			int arg = va_arg(ap, int);
    15d8:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
    15dc:	f1b8 0f00 	cmp.w	r8, #0
    15e0:	f280 8141 	bge.w	1866 <cbvprintf+0x3f6>
				conv->prec_present = false;
    15e4:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    15e8:	f36f 0341 	bfc	r3, #1, #1
    15ec:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
    15f0:	f04f 38ff 	mov.w	r8, #4294967295
    15f4:	e137      	b.n	1866 <cbvprintf+0x3f6>
		switch (*sp) {
    15f6:	2b2d      	cmp	r3, #45	; 0x2d
    15f8:	d00c      	beq.n	1614 <cbvprintf+0x1a4>
    15fa:	2b30      	cmp	r3, #48	; 0x30
    15fc:	f47f af6d 	bne.w	14da <cbvprintf+0x6a>
			conv->flag_zero = true;
    1600:	2201      	movs	r2, #1
	} while (loop);
    1602:	e75c      	b.n	14be <cbvprintf+0x4e>
			conv->flag_plus = true;
    1604:	f04f 0e01 	mov.w	lr, #1
    1608:	e759      	b.n	14be <cbvprintf+0x4e>
			conv->flag_space = true;
    160a:	2601      	movs	r6, #1
    160c:	e757      	b.n	14be <cbvprintf+0x4e>
			conv->flag_hash = true;
    160e:	f04f 0c01 	mov.w	ip, #1
    1612:	e754      	b.n	14be <cbvprintf+0x4e>
		switch (*sp) {
    1614:	2001      	movs	r0, #1
    1616:	e752      	b.n	14be <cbvprintf+0x4e>
		val = 10U * val + *sp++ - '0';
    1618:	fb0c 0202 	mla	r2, ip, r2, r0
    161c:	3a30      	subs	r2, #48	; 0x30
    161e:	4633      	mov	r3, r6
    1620:	461e      	mov	r6, r3
    1622:	f816 0b01 	ldrb.w	r0, [r6], #1
    1626:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    162a:	2f09      	cmp	r7, #9
    162c:	d9f4      	bls.n	1618 <cbvprintf+0x1a8>
	if (sp != wp) {
    162e:	4299      	cmp	r1, r3
    1630:	d093      	beq.n	155a <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
    1632:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
    1636:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
    1638:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
    163a:	f362 0141 	bfi	r1, r2, #1, #1
    163e:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
    1642:	e78a      	b.n	155a <cbvprintf+0xea>
    1644:	460b      	mov	r3, r1
	size_t val = 0;
    1646:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    1648:	f04f 0c0a 	mov.w	ip, #10
    164c:	e7e8      	b.n	1620 <cbvprintf+0x1b0>
		conv->prec_star = true;
    164e:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    1652:	f042 0204 	orr.w	r2, r2, #4
    1656:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
		return ++sp;
    165a:	3302      	adds	r3, #2
	switch (*sp) {
    165c:	461f      	mov	r7, r3
    165e:	f817 2b01 	ldrb.w	r2, [r7], #1
    1662:	2a6c      	cmp	r2, #108	; 0x6c
    1664:	d041      	beq.n	16ea <cbvprintf+0x27a>
    1666:	d825      	bhi.n	16b4 <cbvprintf+0x244>
    1668:	2a68      	cmp	r2, #104	; 0x68
    166a:	d02b      	beq.n	16c4 <cbvprintf+0x254>
    166c:	2a6a      	cmp	r2, #106	; 0x6a
    166e:	d046      	beq.n	16fe <cbvprintf+0x28e>
    1670:	2a4c      	cmp	r2, #76	; 0x4c
    1672:	d04c      	beq.n	170e <cbvprintf+0x29e>
    1674:	461f      	mov	r7, r3
	conv->specifier = *sp++;
    1676:	f817 2b01 	ldrb.w	r2, [r7], #1
    167a:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    167e:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
    1682:	2a78      	cmp	r2, #120	; 0x78
    1684:	f200 80d9 	bhi.w	183a <cbvprintf+0x3ca>
    1688:	2a57      	cmp	r2, #87	; 0x57
    168a:	d84d      	bhi.n	1728 <cbvprintf+0x2b8>
    168c:	2a41      	cmp	r2, #65	; 0x41
    168e:	d003      	beq.n	1698 <cbvprintf+0x228>
    1690:	3a45      	subs	r2, #69	; 0x45
    1692:	2a02      	cmp	r2, #2
    1694:	f200 80d1 	bhi.w	183a <cbvprintf+0x3ca>
		conv->specifier_cat = SPECIFIER_FP;
    1698:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    169c:	2204      	movs	r2, #4
    169e:	f362 0302 	bfi	r3, r2, #0, #3
    16a2:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
    16a6:	2301      	movs	r3, #1
			break;
    16a8:	e09e      	b.n	17e8 <cbvprintf+0x378>
		val = 10U * val + *sp++ - '0';
    16aa:	fb06 2101 	mla	r1, r6, r1, r2
    16ae:	3930      	subs	r1, #48	; 0x30
    16b0:	4603      	mov	r3, r0
    16b2:	e764      	b.n	157e <cbvprintf+0x10e>
	switch (*sp) {
    16b4:	2a74      	cmp	r2, #116	; 0x74
    16b6:	d026      	beq.n	1706 <cbvprintf+0x296>
    16b8:	2a7a      	cmp	r2, #122	; 0x7a
    16ba:	d1db      	bne.n	1674 <cbvprintf+0x204>
		conv->length_mod = LENGTH_Z;
    16bc:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    16c0:	2206      	movs	r2, #6
    16c2:	e00d      	b.n	16e0 <cbvprintf+0x270>
		if (*++sp == 'h') {
    16c4:	785a      	ldrb	r2, [r3, #1]
    16c6:	2a68      	cmp	r2, #104	; 0x68
    16c8:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    16cc:	d106      	bne.n	16dc <cbvprintf+0x26c>
			conv->length_mod = LENGTH_HH;
    16ce:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    16d0:	f361 02c6 	bfi	r2, r1, #3, #4
    16d4:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
    16d8:	1c9f      	adds	r7, r3, #2
    16da:	e7cc      	b.n	1676 <cbvprintf+0x206>
			conv->length_mod = LENGTH_H;
    16dc:	4613      	mov	r3, r2
    16de:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
    16e0:	f362 03c6 	bfi	r3, r2, #3, #4
    16e4:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
    16e8:	e7c5      	b.n	1676 <cbvprintf+0x206>
		if (*++sp == 'l') {
    16ea:	785a      	ldrb	r2, [r3, #1]
    16ec:	2a6c      	cmp	r2, #108	; 0x6c
    16ee:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    16f2:	d101      	bne.n	16f8 <cbvprintf+0x288>
			conv->length_mod = LENGTH_LL;
    16f4:	2104      	movs	r1, #4
    16f6:	e7eb      	b.n	16d0 <cbvprintf+0x260>
			conv->length_mod = LENGTH_L;
    16f8:	4613      	mov	r3, r2
    16fa:	2203      	movs	r2, #3
    16fc:	e7f0      	b.n	16e0 <cbvprintf+0x270>
		conv->length_mod = LENGTH_J;
    16fe:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    1702:	2205      	movs	r2, #5
    1704:	e7ec      	b.n	16e0 <cbvprintf+0x270>
		conv->length_mod = LENGTH_T;
    1706:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    170a:	2207      	movs	r2, #7
    170c:	e7e8      	b.n	16e0 <cbvprintf+0x270>
		conv->unsupported = true;
    170e:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    1712:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
    1716:	f023 0302 	bic.w	r3, r3, #2
    171a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    171e:	f043 0302 	orr.w	r3, r3, #2
    1722:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
    1726:	e7a6      	b.n	1676 <cbvprintf+0x206>
    1728:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
    172c:	2920      	cmp	r1, #32
    172e:	f200 8084 	bhi.w	183a <cbvprintf+0x3ca>
    1732:	a001      	add	r0, pc, #4	; (adr r0, 1738 <cbvprintf+0x2c8>)
    1734:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
    1738:	000017fd 	.word	0x000017fd
    173c:	0000183b 	.word	0x0000183b
    1740:	0000183b 	.word	0x0000183b
    1744:	0000183b 	.word	0x0000183b
    1748:	0000183b 	.word	0x0000183b
    174c:	0000183b 	.word	0x0000183b
    1750:	0000183b 	.word	0x0000183b
    1754:	0000183b 	.word	0x0000183b
    1758:	0000183b 	.word	0x0000183b
    175c:	00001699 	.word	0x00001699
    1760:	0000183b 	.word	0x0000183b
    1764:	000017fd 	.word	0x000017fd
    1768:	000017bd 	.word	0x000017bd
    176c:	00001699 	.word	0x00001699
    1770:	00001699 	.word	0x00001699
    1774:	00001699 	.word	0x00001699
    1778:	0000183b 	.word	0x0000183b
    177c:	000017bd 	.word	0x000017bd
    1780:	0000183b 	.word	0x0000183b
    1784:	0000183b 	.word	0x0000183b
    1788:	0000183b 	.word	0x0000183b
    178c:	0000183b 	.word	0x0000183b
    1790:	00001805 	.word	0x00001805
    1794:	000017fd 	.word	0x000017fd
    1798:	00001821 	.word	0x00001821
    179c:	0000183b 	.word	0x0000183b
    17a0:	0000183b 	.word	0x0000183b
    17a4:	00001821 	.word	0x00001821
    17a8:	0000183b 	.word	0x0000183b
    17ac:	000017fd 	.word	0x000017fd
    17b0:	0000183b 	.word	0x0000183b
    17b4:	0000183b 	.word	0x0000183b
    17b8:	000017fd 	.word	0x000017fd
		conv->specifier_cat = SPECIFIER_SINT;
    17bc:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
    17c0:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
    17c2:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    17c6:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    17ca:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    17cc:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
    17d0:	bf02      	ittt	eq
    17d2:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
    17d6:	f041 0101 	orreq.w	r1, r1, #1
    17da:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
    17de:	2a63      	cmp	r2, #99	; 0x63
    17e0:	d131      	bne.n	1846 <cbvprintf+0x3d6>
			unsupported = (conv->length_mod != LENGTH_NONE);
    17e2:	3b00      	subs	r3, #0
    17e4:	bf18      	it	ne
    17e6:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    17e8:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    17ec:	f3c2 0140 	ubfx	r1, r2, #1, #1
    17f0:	430b      	orrs	r3, r1
    17f2:	f363 0241 	bfi	r2, r3, #1, #1
    17f6:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
    17fa:	e6d8      	b.n	15ae <cbvprintf+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
    17fc:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
    1800:	2002      	movs	r0, #2
    1802:	e7de      	b.n	17c2 <cbvprintf+0x352>
		conv->specifier_cat = SPECIFIER_PTR;
    1804:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    1808:	f003 0378 	and.w	r3, r3, #120	; 0x78
    180c:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
    1810:	2103      	movs	r1, #3
    1812:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    1816:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
    1818:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    181c:	4143      	adcs	r3, r0
    181e:	e7e3      	b.n	17e8 <cbvprintf+0x378>
		conv->specifier_cat = SPECIFIER_PTR;
    1820:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    1824:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
    1826:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    182a:	f361 0202 	bfi	r2, r1, #0, #3
    182e:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
    1832:	bf14      	ite	ne
    1834:	2301      	movne	r3, #1
    1836:	2300      	moveq	r3, #0
    1838:	e7d6      	b.n	17e8 <cbvprintf+0x378>
		conv->invalid = true;
    183a:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    183e:	f043 0301 	orr.w	r3, r3, #1
    1842:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
    1846:	2300      	movs	r3, #0
    1848:	e7ce      	b.n	17e8 <cbvprintf+0x378>
		} else if (conv->width_present) {
    184a:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
    184e:	2a00      	cmp	r2, #0
			width = conv->width_value;
    1850:	bfb4      	ite	lt
    1852:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
		int width = -1;
    1856:	f04f 39ff 	movge.w	r9, #4294967295
    185a:	e6ba      	b.n	15d2 <cbvprintf+0x162>
		} else if (conv->prec_present) {
    185c:	079b      	lsls	r3, r3, #30
    185e:	f57f aec7 	bpl.w	15f0 <cbvprintf+0x180>
			precision = conv->prec_value;
    1862:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
			= (enum length_mod_enum)conv->length_mod;
    1866:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
		conv->pad0_value = 0;
    186a:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    186c:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
    1870:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
		enum specifier_cat_enum specifier_cat
    1874:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    1878:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    187a:	f3c2 02c3 	ubfx	r2, r2, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    187e:	d136      	bne.n	18ee <cbvprintf+0x47e>
			switch (length_mod) {
    1880:	1ed3      	subs	r3, r2, #3
    1882:	2b04      	cmp	r3, #4
    1884:	d820      	bhi.n	18c8 <cbvprintf+0x458>
    1886:	e8df f003 	tbb	[pc, r3]
    188a:	0703      	.short	0x0703
    188c:	1f07      	.short	0x1f07
    188e:	1f          	.byte	0x1f
    188f:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
    1890:	f854 0b04 	ldr.w	r0, [r4], #4
				value->sint = (short)value->sint;
    1894:	17c1      	asrs	r1, r0, #31
    1896:	e004      	b.n	18a2 <cbvprintf+0x432>
					(sint_value_type)va_arg(ap, intmax_t);
    1898:	3407      	adds	r4, #7
    189a:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
    189e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
				value->sint = (short)value->sint;
    18a2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
    18a6:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    18aa:	f013 0603 	ands.w	r6, r3, #3
    18ae:	d054      	beq.n	195a <cbvprintf+0x4ea>
			OUTS(sp, fp);
    18b0:	9802      	ldr	r0, [sp, #8]
    18b2:	463b      	mov	r3, r7
    18b4:	4652      	mov	r2, sl
    18b6:	4659      	mov	r1, fp
    18b8:	f003 ffe6 	bl	5888 <outs>
    18bc:	2800      	cmp	r0, #0
    18be:	f2c0 8143 	blt.w	1b48 <cbvprintf+0x6d8>
    18c2:	4405      	add	r5, r0
			continue;
    18c4:	46ba      	mov	sl, r7
    18c6:	e5db      	b.n	1480 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    18c8:	f854 0b04 	ldr.w	r0, [r4], #4
			if (length_mod == LENGTH_HH) {
    18cc:	2a01      	cmp	r2, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
    18ce:	ea4f 71e0 	mov.w	r1, r0, asr #31
    18d2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
    18d6:	d105      	bne.n	18e4 <cbvprintf+0x474>
				value->uint = (unsigned char)value->uint;
    18d8:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
    18dc:	930a      	str	r3, [sp, #40]	; 0x28
    18de:	2300      	movs	r3, #0
    18e0:	930b      	str	r3, [sp, #44]	; 0x2c
    18e2:	e7e0      	b.n	18a6 <cbvprintf+0x436>
			} else if (length_mod == LENGTH_H) {
    18e4:	2a02      	cmp	r2, #2
    18e6:	d1de      	bne.n	18a6 <cbvprintf+0x436>
				value->sint = (short)value->sint;
    18e8:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
    18ec:	e7d2      	b.n	1894 <cbvprintf+0x424>
		} else if (specifier_cat == SPECIFIER_UINT) {
    18ee:	2b02      	cmp	r3, #2
    18f0:	d123      	bne.n	193a <cbvprintf+0x4ca>
			switch (length_mod) {
    18f2:	1ed3      	subs	r3, r2, #3
    18f4:	2b04      	cmp	r3, #4
    18f6:	d813      	bhi.n	1920 <cbvprintf+0x4b0>
    18f8:	e8df f003 	tbb	[pc, r3]
    18fc:	120a0a03 	.word	0x120a0a03
    1900:	12          	.byte	0x12
    1901:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
    1902:	6820      	ldr	r0, [r4, #0]
    1904:	900a      	str	r0, [sp, #40]	; 0x28
    1906:	2100      	movs	r1, #0
    1908:	1d23      	adds	r3, r4, #4
    190a:	910b      	str	r1, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
    190c:	461c      	mov	r4, r3
    190e:	e7ca      	b.n	18a6 <cbvprintf+0x436>
					(uint_value_type)va_arg(ap,
    1910:	3407      	adds	r4, #7
    1912:	f024 0307 	bic.w	r3, r4, #7
				value->uint =
    1916:	e8f3 0102 	ldrd	r0, r1, [r3], #8
    191a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
				break;
    191e:	e7f5      	b.n	190c <cbvprintf+0x49c>
					(uint_value_type)va_arg(ap, size_t);
    1920:	f854 3b04 	ldr.w	r3, [r4], #4
    1924:	930a      	str	r3, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
    1926:	2a01      	cmp	r2, #1
					(uint_value_type)va_arg(ap, size_t);
    1928:	f04f 0300 	mov.w	r3, #0
    192c:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
    192e:	d0d3      	beq.n	18d8 <cbvprintf+0x468>
			} else if (length_mod == LENGTH_H) {
    1930:	2a02      	cmp	r2, #2
    1932:	d1b8      	bne.n	18a6 <cbvprintf+0x436>
				value->uint = (unsigned short)value->uint;
    1934:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    1938:	e7d0      	b.n	18dc <cbvprintf+0x46c>
		} else if (specifier_cat == SPECIFIER_FP) {
    193a:	2b04      	cmp	r3, #4
    193c:	d107      	bne.n	194e <cbvprintf+0x4de>
			if (length_mod == LENGTH_UPPER_L) {
    193e:	3407      	adds	r4, #7
    1940:	f024 0407 	bic.w	r4, r4, #7
    1944:	e8f4 0102 	ldrd	r0, r1, [r4], #8
				value->ldbl = va_arg(ap, long double);
    1948:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    194c:	e7ab      	b.n	18a6 <cbvprintf+0x436>
		} else if (specifier_cat == SPECIFIER_PTR) {
    194e:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
    1950:	bf04      	itt	eq
    1952:	f854 3b04 	ldreq.w	r3, [r4], #4
    1956:	930a      	streq	r3, [sp, #40]	; 0x28
    1958:	e7a5      	b.n	18a6 <cbvprintf+0x436>
		switch (conv->specifier) {
    195a:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    195e:	2878      	cmp	r0, #120	; 0x78
    1960:	d8b0      	bhi.n	18c4 <cbvprintf+0x454>
    1962:	2862      	cmp	r0, #98	; 0x62
    1964:	d822      	bhi.n	19ac <cbvprintf+0x53c>
    1966:	2825      	cmp	r0, #37	; 0x25
    1968:	f43f ad93 	beq.w	1492 <cbvprintf+0x22>
    196c:	2858      	cmp	r0, #88	; 0x58
    196e:	d1a9      	bne.n	18c4 <cbvprintf+0x454>
			bps = encode_uint(value->uint, conv, buf, bpe);
    1970:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    1974:	9300      	str	r3, [sp, #0]
    1976:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    197a:	ab04      	add	r3, sp, #16
    197c:	aa0c      	add	r2, sp, #48	; 0x30
    197e:	f003 ff38 	bl	57f2 <encode_uint>
    1982:	4682      	mov	sl, r0
			if (precision >= 0) {
    1984:	f1b8 0f00 	cmp.w	r8, #0
    1988:	f10d 0026 	add.w	r0, sp, #38	; 0x26
    198c:	db0c      	blt.n	19a8 <cbvprintf+0x538>
				conv->flag_zero = false;
    198e:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
    1992:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
    1996:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    199a:	4598      	cmp	r8, r3
				conv->flag_zero = false;
    199c:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
    19a0:	d902      	bls.n	19a8 <cbvprintf+0x538>
					conv->pad0_value = precision - (int)len;
    19a2:	eba8 0303 	sub.w	r3, r8, r3
    19a6:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
    19a8:	4680      	mov	r8, r0
    19aa:	e03d      	b.n	1a28 <cbvprintf+0x5b8>
    19ac:	3863      	subs	r0, #99	; 0x63
    19ae:	2815      	cmp	r0, #21
    19b0:	d888      	bhi.n	18c4 <cbvprintf+0x454>
    19b2:	a101      	add	r1, pc, #4	; (adr r1, 19b8 <cbvprintf+0x548>)
    19b4:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
    19b8:	00001a39 	.word	0x00001a39
    19bc:	00001a9d 	.word	0x00001a9d
    19c0:	000018c5 	.word	0x000018c5
    19c4:	000018c5 	.word	0x000018c5
    19c8:	000018c5 	.word	0x000018c5
    19cc:	000018c5 	.word	0x000018c5
    19d0:	00001a9d 	.word	0x00001a9d
    19d4:	000018c5 	.word	0x000018c5
    19d8:	000018c5 	.word	0x000018c5
    19dc:	000018c5 	.word	0x000018c5
    19e0:	000018c5 	.word	0x000018c5
    19e4:	00001afb 	.word	0x00001afb
    19e8:	00001ac9 	.word	0x00001ac9
    19ec:	00001acd 	.word	0x00001acd
    19f0:	000018c5 	.word	0x000018c5
    19f4:	000018c5 	.word	0x000018c5
    19f8:	00001a11 	.word	0x00001a11
    19fc:	000018c5 	.word	0x000018c5
    1a00:	00001ac9 	.word	0x00001ac9
    1a04:	000018c5 	.word	0x000018c5
    1a08:	000018c5 	.word	0x000018c5
    1a0c:	00001ac9 	.word	0x00001ac9
			if (precision >= 0) {
    1a10:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
    1a14:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
    1a18:	db0a      	blt.n	1a30 <cbvprintf+0x5c0>
				len = strnlen(bps, precision);
    1a1a:	4641      	mov	r1, r8
    1a1c:	4650      	mov	r0, sl
    1a1e:	f004 f85c 	bl	5ada <strnlen>
			bpe = bps + len;
    1a22:	eb0a 0800 	add.w	r8, sl, r0
		char sign = 0;
    1a26:	2600      	movs	r6, #0
		if (bps == NULL) {
    1a28:	f1ba 0f00 	cmp.w	sl, #0
    1a2c:	d10c      	bne.n	1a48 <cbvprintf+0x5d8>
    1a2e:	e749      	b.n	18c4 <cbvprintf+0x454>
				len = strlen(bps);
    1a30:	4650      	mov	r0, sl
    1a32:	f004 f84b 	bl	5acc <strlen>
    1a36:	e7f4      	b.n	1a22 <cbvprintf+0x5b2>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    1a38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1a3a:	f88d 3010 	strb.w	r3, [sp, #16]
			break;
    1a3e:	2600      	movs	r6, #0
			bpe = buf + 1;
    1a40:	f10d 0811 	add.w	r8, sp, #17
			bps = buf;
    1a44:	f10d 0a10 	add.w	sl, sp, #16
		size_t nj_len = (bpe - bps);
    1a48:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
    1a4c:	b106      	cbz	r6, 1a50 <cbvprintf+0x5e0>
			nj_len += 1U;
    1a4e:	3301      	adds	r3, #1
		if (conv->altform_0c) {
    1a50:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    1a54:	06d0      	lsls	r0, r2, #27
    1a56:	d56b      	bpl.n	1b30 <cbvprintf+0x6c0>
			nj_len += 2U;
    1a58:	3302      	adds	r3, #2
		if (conv->pad_fp) {
    1a5a:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
    1a5c:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
    1a5e:	bf48      	it	mi
    1a60:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
    1a62:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
    1a64:	bf48      	it	mi
    1a66:	189b      	addmi	r3, r3, r2
		if (width > 0) {
    1a68:	f1b9 0f00 	cmp.w	r9, #0
    1a6c:	dd79      	ble.n	1b62 <cbvprintf+0x6f2>
			if (!conv->flag_dash) {
    1a6e:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
    1a72:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
    1a76:	f3c2 0380 	ubfx	r3, r2, #2, #1
    1a7a:	9303      	str	r3, [sp, #12]
    1a7c:	0753      	lsls	r3, r2, #29
    1a7e:	d470      	bmi.n	1b62 <cbvprintf+0x6f2>
				if (conv->flag_zero) {
    1a80:	0650      	lsls	r0, r2, #25
    1a82:	d564      	bpl.n	1b4e <cbvprintf+0x6de>
					if (sign != 0) {
    1a84:	b146      	cbz	r6, 1a98 <cbvprintf+0x628>
						OUTC(sign);
    1a86:	9b02      	ldr	r3, [sp, #8]
    1a88:	4659      	mov	r1, fp
    1a8a:	4630      	mov	r0, r6
    1a8c:	4798      	blx	r3
    1a8e:	2800      	cmp	r0, #0
    1a90:	db5a      	blt.n	1b48 <cbvprintf+0x6d8>
						sign = 0;
    1a92:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
    1a94:	3501      	adds	r5, #1
						sign = 0;
    1a96:	461e      	mov	r6, r3
					pad = '0';
    1a98:	2330      	movs	r3, #48	; 0x30
    1a9a:	e059      	b.n	1b50 <cbvprintf+0x6e0>
			if (conv->flag_plus) {
    1a9c:	071e      	lsls	r6, r3, #28
    1a9e:	d411      	bmi.n	1ac4 <cbvprintf+0x654>
				sign = ' ';
    1aa0:	f013 0610 	ands.w	r6, r3, #16
    1aa4:	bf18      	it	ne
    1aa6:	2620      	movne	r6, #32
			sint = value->sint;
    1aa8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
    1aac:	2a00      	cmp	r2, #0
    1aae:	f173 0100 	sbcs.w	r1, r3, #0
    1ab2:	f6bf af5d 	bge.w	1970 <cbvprintf+0x500>
				value->uint = (uint_value_type)-sint;
    1ab6:	4252      	negs	r2, r2
    1ab8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    1abc:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				sign = '-';
    1ac0:	262d      	movs	r6, #45	; 0x2d
    1ac2:	e755      	b.n	1970 <cbvprintf+0x500>
				sign = '+';
    1ac4:	262b      	movs	r6, #43	; 0x2b
    1ac6:	e7ef      	b.n	1aa8 <cbvprintf+0x638>
		switch (conv->specifier) {
    1ac8:	2600      	movs	r6, #0
    1aca:	e751      	b.n	1970 <cbvprintf+0x500>
			if (value->ptr != NULL) {
    1acc:	980a      	ldr	r0, [sp, #40]	; 0x28
    1ace:	b348      	cbz	r0, 1b24 <cbvprintf+0x6b4>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    1ad0:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    1ad4:	9300      	str	r3, [sp, #0]
    1ad6:	aa0c      	add	r2, sp, #48	; 0x30
    1ad8:	ab04      	add	r3, sp, #16
    1ada:	2100      	movs	r1, #0
    1adc:	f003 fe89 	bl	57f2 <encode_uint>
				conv->altform_0c = true;
    1ae0:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
    1ae4:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    1ae8:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    1aec:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    1af0:	4682      	mov	sl, r0
				conv->altform_0c = true;
    1af2:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
		char sign = 0;
    1af6:	2600      	movs	r6, #0
				goto prec_int_pad0;
    1af8:	e744      	b.n	1984 <cbvprintf+0x514>
				store_count(conv, value->ptr, count);
    1afa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
    1afc:	2a07      	cmp	r2, #7
    1afe:	f63f aee1 	bhi.w	18c4 <cbvprintf+0x454>
    1b02:	e8df f002 	tbb	[pc, r2]
    1b06:	040d      	.short	0x040d
    1b08:	08080d06 	.word	0x08080d06
    1b0c:	0d0d      	.short	0x0d0d
		*(signed char *)dp = (signed char)count;
    1b0e:	701d      	strb	r5, [r3, #0]
		break;
    1b10:	e6d8      	b.n	18c4 <cbvprintf+0x454>
		*(short *)dp = (short)count;
    1b12:	801d      	strh	r5, [r3, #0]
		break;
    1b14:	e6d6      	b.n	18c4 <cbvprintf+0x454>
		*(intmax_t *)dp = (intmax_t)count;
    1b16:	4628      	mov	r0, r5
    1b18:	17e9      	asrs	r1, r5, #31
    1b1a:	e9c3 0100 	strd	r0, r1, [r3]
		break;
    1b1e:	e6d1      	b.n	18c4 <cbvprintf+0x454>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    1b20:	601d      	str	r5, [r3, #0]
		break;
    1b22:	e6cf      	b.n	18c4 <cbvprintf+0x454>
			bpe = bps + 5;
    1b24:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 1bec <cbvprintf+0x77c>
    1b28:	4606      	mov	r6, r0
			bps = "(nil)";
    1b2a:	f1a8 0a05 	sub.w	sl, r8, #5
    1b2e:	e78b      	b.n	1a48 <cbvprintf+0x5d8>
		} else if (conv->altform_0) {
    1b30:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
    1b32:	bf48      	it	mi
    1b34:	3301      	addmi	r3, #1
    1b36:	e790      	b.n	1a5a <cbvprintf+0x5ea>
					OUTC(pad);
    1b38:	4618      	mov	r0, r3
    1b3a:	9303      	str	r3, [sp, #12]
    1b3c:	4659      	mov	r1, fp
    1b3e:	9b02      	ldr	r3, [sp, #8]
    1b40:	4798      	blx	r3
    1b42:	2800      	cmp	r0, #0
    1b44:	9b03      	ldr	r3, [sp, #12]
    1b46:	da04      	bge.n	1b52 <cbvprintf+0x6e2>
#undef OUTS
#undef OUTC
}
    1b48:	b011      	add	sp, #68	; 0x44
    1b4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    1b4e:	2320      	movs	r3, #32
    1b50:	444d      	add	r5, r9
    1b52:	464a      	mov	r2, r9
				while (width-- > 0) {
    1b54:	2a00      	cmp	r2, #0
    1b56:	eba5 0109 	sub.w	r1, r5, r9
    1b5a:	f109 39ff 	add.w	r9, r9, #4294967295
    1b5e:	dceb      	bgt.n	1b38 <cbvprintf+0x6c8>
    1b60:	460d      	mov	r5, r1
		if (sign != 0) {
    1b62:	b136      	cbz	r6, 1b72 <cbvprintf+0x702>
			OUTC(sign);
    1b64:	9b02      	ldr	r3, [sp, #8]
    1b66:	4659      	mov	r1, fp
    1b68:	4630      	mov	r0, r6
    1b6a:	4798      	blx	r3
    1b6c:	2800      	cmp	r0, #0
    1b6e:	dbeb      	blt.n	1b48 <cbvprintf+0x6d8>
    1b70:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    1b72:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    1b76:	06d9      	lsls	r1, r3, #27
    1b78:	d401      	bmi.n	1b7e <cbvprintf+0x70e>
    1b7a:	071a      	lsls	r2, r3, #28
    1b7c:	d506      	bpl.n	1b8c <cbvprintf+0x71c>
				OUTC('0');
    1b7e:	9b02      	ldr	r3, [sp, #8]
    1b80:	4659      	mov	r1, fp
    1b82:	2030      	movs	r0, #48	; 0x30
    1b84:	4798      	blx	r3
    1b86:	2800      	cmp	r0, #0
    1b88:	dbde      	blt.n	1b48 <cbvprintf+0x6d8>
    1b8a:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    1b8c:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    1b90:	06db      	lsls	r3, r3, #27
    1b92:	d507      	bpl.n	1ba4 <cbvprintf+0x734>
				OUTC(conv->specifier);
    1b94:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    1b98:	9b02      	ldr	r3, [sp, #8]
    1b9a:	4659      	mov	r1, fp
    1b9c:	4798      	blx	r3
    1b9e:	2800      	cmp	r0, #0
    1ba0:	dbd2      	blt.n	1b48 <cbvprintf+0x6d8>
    1ba2:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    1ba4:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    1ba6:	442e      	add	r6, r5
    1ba8:	1b73      	subs	r3, r6, r5
    1baa:	2b00      	cmp	r3, #0
    1bac:	dc16      	bgt.n	1bdc <cbvprintf+0x76c>
			OUTS(bps, bpe);
    1bae:	9802      	ldr	r0, [sp, #8]
    1bb0:	4643      	mov	r3, r8
    1bb2:	4652      	mov	r2, sl
    1bb4:	4659      	mov	r1, fp
    1bb6:	f003 fe67 	bl	5888 <outs>
    1bba:	2800      	cmp	r0, #0
    1bbc:	dbc4      	blt.n	1b48 <cbvprintf+0x6d8>
    1bbe:	4405      	add	r5, r0
		while (width > 0) {
    1bc0:	44a9      	add	r9, r5
    1bc2:	eba9 0305 	sub.w	r3, r9, r5
    1bc6:	2b00      	cmp	r3, #0
    1bc8:	f77f ae7c 	ble.w	18c4 <cbvprintf+0x454>
			OUTC(' ');
    1bcc:	9b02      	ldr	r3, [sp, #8]
    1bce:	4659      	mov	r1, fp
    1bd0:	2020      	movs	r0, #32
    1bd2:	4798      	blx	r3
    1bd4:	2800      	cmp	r0, #0
    1bd6:	dbb7      	blt.n	1b48 <cbvprintf+0x6d8>
    1bd8:	3501      	adds	r5, #1
			--width;
    1bda:	e7f2      	b.n	1bc2 <cbvprintf+0x752>
				OUTC('0');
    1bdc:	9b02      	ldr	r3, [sp, #8]
    1bde:	4659      	mov	r1, fp
    1be0:	2030      	movs	r0, #48	; 0x30
    1be2:	4798      	blx	r3
    1be4:	2800      	cmp	r0, #0
    1be6:	dbaf      	blt.n	1b48 <cbvprintf+0x6d8>
    1be8:	3501      	adds	r5, #1
    1bea:	e7dd      	b.n	1ba8 <cbvprintf+0x738>
    1bec:	00006996 	.word	0x00006996

00001bf0 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    1bf0:	4801      	ldr	r0, [pc, #4]	; (1bf8 <nrf_cc3xx_platform_abort_init+0x8>)
    1bf2:	f003 bc03 	b.w	53fc <nrf_cc3xx_platform_set_abort>
    1bf6:	bf00      	nop
    1bf8:	000066c8 	.word	0x000066c8

00001bfc <mutex_unlock_platform>:
    }
}

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1bfc:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    1bfe:	b1d0      	cbz	r0, 1c36 <mutex_unlock_platform+0x3a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    1c00:	6843      	ldr	r3, [r0, #4]
    1c02:	2b04      	cmp	r3, #4
    1c04:	d111      	bne.n	1c2a <mutex_unlock_platform+0x2e>
 * @return true if @a new_value is written, false otherwise.
 */
static inline bool atomic_cas(atomic_t *target, atomic_val_t old_value,
			  atomic_val_t new_value)
{
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    1c06:	2200      	movs	r2, #0
    1c08:	6803      	ldr	r3, [r0, #0]
    1c0a:	f3bf 8f5b 	dmb	ish
    1c0e:	e853 1f00 	ldrex	r1, [r3]
    1c12:	2901      	cmp	r1, #1
    1c14:	d103      	bne.n	1c1e <mutex_unlock_platform+0x22>
    1c16:	e843 2000 	strex	r0, r2, [r3]
    1c1a:	2800      	cmp	r0, #0
    1c1c:	d1f7      	bne.n	1c0e <mutex_unlock_platform+0x12>
    1c1e:	f3bf 8f5b 	dmb	ish
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    1c22:	4807      	ldr	r0, [pc, #28]	; (1c40 <mutex_unlock_platform+0x44>)
    1c24:	bf08      	it	eq
    1c26:	4610      	moveq	r0, r2
        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    }
}
    1c28:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    1c2a:	b13b      	cbz	r3, 1c3c <mutex_unlock_platform+0x40>
        p_mutex = (struct k_mutex *)mutex->mutex;
    1c2c:	6800      	ldr	r0, [r0, #0]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke1(*(uintptr_t *)&mutex, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
    1c2e:	f002 fd97 	bl	4760 <z_impl_k_mutex_unlock>
        return NRF_CC3XX_PLATFORM_SUCCESS;
    1c32:	2000      	movs	r0, #0
    1c34:	e7f8      	b.n	1c28 <mutex_unlock_platform+0x2c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    1c36:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    1c3a:	e7f5      	b.n	1c28 <mutex_unlock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    1c3c:	4801      	ldr	r0, [pc, #4]	; (1c44 <mutex_unlock_platform+0x48>)
    1c3e:	e7f3      	b.n	1c28 <mutex_unlock_platform+0x2c>
    1c40:	ffff8fe9 	.word	0xffff8fe9
    1c44:	ffff8fea 	.word	0xffff8fea

00001c48 <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1c48:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    1c4a:	4604      	mov	r4, r0
    1c4c:	b918      	cbnz	r0, 1c56 <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
    1c4e:	4b0d      	ldr	r3, [pc, #52]	; (1c84 <mutex_free_platform+0x3c>)
    1c50:	480d      	ldr	r0, [pc, #52]	; (1c88 <mutex_free_platform+0x40>)
    1c52:	685b      	ldr	r3, [r3, #4]
    1c54:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    1c56:	6861      	ldr	r1, [r4, #4]
    1c58:	2908      	cmp	r1, #8
    1c5a:	d00d      	beq.n	1c78 <mutex_free_platform+0x30>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    1c5c:	f031 0304 	bics.w	r3, r1, #4
    1c60:	d00a      	beq.n	1c78 <mutex_free_platform+0x30>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    1c62:	f011 0102 	ands.w	r1, r1, #2
    1c66:	d008      	beq.n	1c7a <mutex_free_platform+0x32>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    1c68:	4808      	ldr	r0, [pc, #32]	; (1c8c <mutex_free_platform+0x44>)
    1c6a:	4621      	mov	r1, r4
    1c6c:	f004 f9ae 	bl	5fcc <k_mem_slab_free>
        mutex->mutex = NULL;
    1c70:	2300      	movs	r3, #0
    1c72:	6023      	str	r3, [r4, #0]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    1c74:	2300      	movs	r3, #0
    1c76:	6063      	str	r3, [r4, #4]
}
    1c78:	bd10      	pop	{r4, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    1c7a:	6820      	ldr	r0, [r4, #0]
    1c7c:	2214      	movs	r2, #20
    1c7e:	f003 ff4c 	bl	5b1a <memset>
    1c82:	e7f7      	b.n	1c74 <mutex_free_platform+0x2c>
    1c84:	200000dc 	.word	0x200000dc
    1c88:	00006997 	.word	0x00006997
    1c8c:	2000033c 	.word	0x2000033c

00001c90 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1c90:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    1c92:	4604      	mov	r4, r0
    1c94:	b918      	cbnz	r0, 1c9e <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
    1c96:	4b16      	ldr	r3, [pc, #88]	; (1cf0 <mutex_init_platform+0x60>)
    1c98:	4816      	ldr	r0, [pc, #88]	; (1cf4 <mutex_init_platform+0x64>)
    1c9a:	685b      	ldr	r3, [r3, #4]
    1c9c:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    1c9e:	6863      	ldr	r3, [r4, #4]
    1ca0:	2b04      	cmp	r3, #4
    1ca2:	d023      	beq.n	1cec <mutex_init_platform+0x5c>
    1ca4:	2b08      	cmp	r3, #8
    1ca6:	d021      	beq.n	1cec <mutex_init_platform+0x5c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    1ca8:	b9cb      	cbnz	r3, 1cde <mutex_init_platform+0x4e>
    1caa:	6823      	ldr	r3, [r4, #0]
    1cac:	b9bb      	cbnz	r3, 1cde <mutex_init_platform+0x4e>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    1cae:	4812      	ldr	r0, [pc, #72]	; (1cf8 <mutex_init_platform+0x68>)
    1cb0:	f04f 32ff 	mov.w	r2, #4294967295
    1cb4:	f04f 33ff 	mov.w	r3, #4294967295
    1cb8:	4621      	mov	r1, r4
    1cba:	f002 fca3 	bl	4604 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    1cbe:	b908      	cbnz	r0, 1cc4 <mutex_init_platform+0x34>
    1cc0:	6823      	ldr	r3, [r4, #0]
    1cc2:	b91b      	cbnz	r3, 1ccc <mutex_init_platform+0x3c>
            platform_abort_apis.abort_fn(
    1cc4:	4b0a      	ldr	r3, [pc, #40]	; (1cf0 <mutex_init_platform+0x60>)
    1cc6:	480d      	ldr	r0, [pc, #52]	; (1cfc <mutex_init_platform+0x6c>)
    1cc8:	685b      	ldr	r3, [r3, #4]
    1cca:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    1ccc:	6820      	ldr	r0, [r4, #0]
    1cce:	2214      	movs	r2, #20
    1cd0:	2100      	movs	r1, #0
    1cd2:	f003 ff22 	bl	5b1a <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    1cd6:	6863      	ldr	r3, [r4, #4]
    1cd8:	f043 0302 	orr.w	r3, r3, #2
    1cdc:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
    1cde:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    1ce0:	f004 f99d 	bl	601e <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    1ce4:	6863      	ldr	r3, [r4, #4]
    1ce6:	f043 0301 	orr.w	r3, r3, #1
    1cea:	6063      	str	r3, [r4, #4]
}
    1cec:	bd10      	pop	{r4, pc}
    1cee:	bf00      	nop
    1cf0:	200000dc 	.word	0x200000dc
    1cf4:	00006997 	.word	0x00006997
    1cf8:	2000033c 	.word	0x2000033c
    1cfc:	000069bd 	.word	0x000069bd

00001d00 <mutex_lock_platform>:
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1d00:	b508      	push	{r3, lr}
    if(mutex == NULL) {
    1d02:	b308      	cbz	r0, 1d48 <mutex_lock_platform+0x48>
    switch (mutex->flags) {
    1d04:	6843      	ldr	r3, [r0, #4]
    1d06:	2b04      	cmp	r3, #4
    1d08:	d110      	bne.n	1d2c <mutex_lock_platform+0x2c>
    1d0a:	2201      	movs	r2, #1
    1d0c:	6803      	ldr	r3, [r0, #0]
    1d0e:	f3bf 8f5b 	dmb	ish
    1d12:	e853 1f00 	ldrex	r1, [r3]
    1d16:	2900      	cmp	r1, #0
    1d18:	d103      	bne.n	1d22 <mutex_lock_platform+0x22>
    1d1a:	e843 2000 	strex	r0, r2, [r3]
    1d1e:	2800      	cmp	r0, #0
    1d20:	d1f7      	bne.n	1d12 <mutex_lock_platform+0x12>
    1d22:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
    1d26:	d10b      	bne.n	1d40 <mutex_lock_platform+0x40>
    1d28:	2000      	movs	r0, #0
}
    1d2a:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    1d2c:	b153      	cbz	r3, 1d44 <mutex_lock_platform+0x44>
        p_mutex = (struct k_mutex *)mutex->mutex;
    1d2e:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    1d30:	f04f 32ff 	mov.w	r2, #4294967295
    1d34:	f04f 33ff 	mov.w	r3, #4294967295
    1d38:	f002 fc94 	bl	4664 <z_impl_k_mutex_lock>
        if (ret == 0) {
    1d3c:	2800      	cmp	r0, #0
    1d3e:	d0f3      	beq.n	1d28 <mutex_lock_platform+0x28>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    1d40:	4803      	ldr	r0, [pc, #12]	; (1d50 <mutex_lock_platform+0x50>)
    1d42:	e7f2      	b.n	1d2a <mutex_lock_platform+0x2a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    1d44:	4803      	ldr	r0, [pc, #12]	; (1d54 <mutex_lock_platform+0x54>)
    1d46:	e7f0      	b.n	1d2a <mutex_lock_platform+0x2a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    1d48:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    1d4c:	e7ed      	b.n	1d2a <mutex_lock_platform+0x2a>
    1d4e:	bf00      	nop
    1d50:	ffff8fe9 	.word	0xffff8fe9
    1d54:	ffff8fea 	.word	0xffff8fea

00001d58 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    1d58:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    1d5a:	4906      	ldr	r1, [pc, #24]	; (1d74 <nrf_cc3xx_platform_mutex_init+0x1c>)
    1d5c:	4806      	ldr	r0, [pc, #24]	; (1d78 <nrf_cc3xx_platform_mutex_init+0x20>)
    1d5e:	2340      	movs	r3, #64	; 0x40
    1d60:	2214      	movs	r2, #20
    1d62:	f004 f918 	bl	5f96 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
    1d66:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    1d6a:	4904      	ldr	r1, [pc, #16]	; (1d7c <nrf_cc3xx_platform_mutex_init+0x24>)
    1d6c:	4804      	ldr	r0, [pc, #16]	; (1d80 <nrf_cc3xx_platform_mutex_init+0x28>)
    1d6e:	f003 bba7 	b.w	54c0 <nrf_cc3xx_platform_set_mutexes>
    1d72:	bf00      	nop
    1d74:	20000358 	.word	0x20000358
    1d78:	2000033c 	.word	0x2000033c
    1d7c:	000066e0 	.word	0x000066e0
    1d80:	000066d0 	.word	0x000066d0

00001d84 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    1d84:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1d88:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    1d8c:	f019 0808 	ands.w	r8, r9, #8
{
    1d90:	4604      	mov	r4, r0
    1d92:	4693      	mov	fp, r2
	if (processing) {
    1d94:	d00d      	beq.n	1db2 <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
    1d96:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    1d98:	bf0c      	ite	eq
    1d9a:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    1d9e:	f049 0920 	orrne.w	r9, r9, #32
    1da2:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    1da6:	f38b 8811 	msr	BASEPRI, fp
    1daa:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    1dae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1db2:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
    1db6:	2902      	cmp	r1, #2
    1db8:	d107      	bne.n	1dca <process_event+0x46>
			evt = process_recheck(mgr);
    1dba:	4620      	mov	r0, r4
    1dbc:	f003 fd9d 	bl	58fa <process_recheck>
		if (evt == EVT_NOP) {
    1dc0:	2800      	cmp	r0, #0
    1dc2:	d0f0      	beq.n	1da6 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
    1dc4:	2801      	cmp	r0, #1
    1dc6:	8b23      	ldrh	r3, [r4, #24]
    1dc8:	d150      	bne.n	1e6c <process_event+0xe8>
			res = mgr->last_res;
    1dca:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1dcc:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    1dce:	2f00      	cmp	r7, #0
    1dd0:	da15      	bge.n	1dfe <process_event+0x7a>
		*clients = mgr->clients;
    1dd2:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1dd4:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
    1dd8:	e9c4 8800 	strd	r8, r8, [r4]
    1ddc:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    1de0:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
    1de2:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1de4:	8b21      	ldrh	r1, [r4, #24]
    1de6:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    1dea:	45ca      	cmp	sl, r9
    1dec:	d002      	beq.n	1df4 <process_event+0x70>
		if (do_monitors
    1dee:	68a3      	ldr	r3, [r4, #8]
    1df0:	2b00      	cmp	r3, #0
    1df2:	d15c      	bne.n	1eae <process_event+0x12a>
		    || !sys_slist_is_empty(&clients)
    1df4:	b90d      	cbnz	r5, 1dfa <process_event+0x76>
		    || (transit != NULL)) {
    1df6:	2e00      	cmp	r6, #0
    1df8:	d074      	beq.n	1ee4 <process_event+0x160>
    1dfa:	2300      	movs	r3, #0
    1dfc:	e058      	b.n	1eb0 <process_event+0x12c>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1dfe:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    1e02:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    1e04:	2a01      	cmp	r2, #1
    1e06:	d820      	bhi.n	1e4a <process_event+0xc6>
		*clients = mgr->clients;
    1e08:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    1e0c:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    1e0e:	6825      	ldr	r5, [r4, #0]
	list->head = NULL;
    1e10:	b289      	uxth	r1, r1
	list->tail = NULL;
    1e12:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    1e16:	d10c      	bne.n	1e32 <process_event+0xae>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    1e18:	2d00      	cmp	r5, #0
    1e1a:	462b      	mov	r3, r5
    1e1c:	bf38      	it	cc
    1e1e:	2300      	movcc	r3, #0
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    1e20:	b12b      	cbz	r3, 1e2e <process_event+0xaa>
				mgr->refs += 1U;
    1e22:	8b62      	ldrh	r2, [r4, #26]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    1e24:	681b      	ldr	r3, [r3, #0]
    1e26:	3201      	adds	r2, #1
    1e28:	8362      	strh	r2, [r4, #26]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    1e2a:	2b00      	cmp	r3, #0
    1e2c:	d1f8      	bne.n	1e20 <process_event+0x9c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1e2e:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    1e32:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    1e34:	4620      	mov	r0, r4
    1e36:	f003 fd60 	bl	58fa <process_recheck>
    1e3a:	4606      	mov	r6, r0
    1e3c:	2800      	cmp	r0, #0
    1e3e:	d0d1      	beq.n	1de4 <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1e40:	8b23      	ldrh	r3, [r4, #24]
    1e42:	f043 0320 	orr.w	r3, r3, #32
    1e46:	8323      	strh	r3, [r4, #24]
    1e48:	e7cb      	b.n	1de2 <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
    1e4a:	2b04      	cmp	r3, #4
    1e4c:	d10c      	bne.n	1e68 <process_event+0xe4>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1e4e:	f021 0107 	bic.w	r1, r1, #7
    1e52:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
    1e54:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    1e56:	4620      	mov	r0, r4
    1e58:	f003 fd4f 	bl	58fa <process_recheck>
    1e5c:	4605      	mov	r5, r0
    1e5e:	2800      	cmp	r0, #0
    1e60:	d0bf      	beq.n	1de2 <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1e62:	f041 0120 	orr.w	r1, r1, #32
    1e66:	8321      	strh	r1, [r4, #24]
    1e68:	2500      	movs	r5, #0
    1e6a:	e7ba      	b.n	1de2 <process_event+0x5e>
		} else if (evt == EVT_START) {
    1e6c:	2803      	cmp	r0, #3
    1e6e:	d109      	bne.n	1e84 <process_event+0x100>
			transit = mgr->transitions->start;
    1e70:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1e72:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
    1e76:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1e78:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
    1e7c:	8323      	strh	r3, [r4, #24]
}
    1e7e:	2500      	movs	r5, #0
		res = 0;
    1e80:	462f      	mov	r7, r5
    1e82:	e7af      	b.n	1de4 <process_event+0x60>
		} else if (evt == EVT_STOP) {
    1e84:	2804      	cmp	r0, #4
    1e86:	d106      	bne.n	1e96 <process_event+0x112>
			transit = mgr->transitions->stop;
    1e88:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1e8a:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
    1e8e:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1e90:	f043 0304 	orr.w	r3, r3, #4
    1e94:	e7f2      	b.n	1e7c <process_event+0xf8>
		} else if (evt == EVT_RESET) {
    1e96:	2805      	cmp	r0, #5
    1e98:	d106      	bne.n	1ea8 <process_event+0x124>
			transit = mgr->transitions->reset;
    1e9a:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1e9c:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
    1ea0:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1ea2:	f043 0305 	orr.w	r3, r3, #5
    1ea6:	e7e9      	b.n	1e7c <process_event+0xf8>
    1ea8:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    1eaa:	462e      	mov	r6, r5
    1eac:	e7e8      	b.n	1e80 <process_event+0xfc>
				   && !sys_slist_is_empty(&mgr->monitors);
    1eae:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    1eb0:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    1eb4:	8321      	strh	r1, [r4, #24]
    1eb6:	f38b 8811 	msr	BASEPRI, fp
    1eba:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    1ebe:	bb03      	cbnz	r3, 1f02 <process_event+0x17e>
	while (!sys_slist_is_empty(list)) {
    1ec0:	2d00      	cmp	r5, #0
    1ec2:	d133      	bne.n	1f2c <process_event+0x1a8>
			if (transit != NULL) {
    1ec4:	b116      	cbz	r6, 1ecc <process_event+0x148>
				transit(mgr, transition_complete);
    1ec6:	4921      	ldr	r1, [pc, #132]	; (1f4c <process_event+0x1c8>)
    1ec8:	4620      	mov	r0, r4
    1eca:	47b0      	blx	r6
	__asm__ volatile(
    1ecc:	f04f 0320 	mov.w	r3, #32
    1ed0:	f3ef 8b11 	mrs	fp, BASEPRI
    1ed4:	f383 8812 	msr	BASEPRI_MAX, r3
    1ed8:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    1edc:	8b23      	ldrh	r3, [r4, #24]
    1ede:	f023 0308 	bic.w	r3, r3, #8
    1ee2:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    1ee4:	8b23      	ldrh	r3, [r4, #24]
    1ee6:	06da      	lsls	r2, r3, #27
    1ee8:	d528      	bpl.n	1f3c <process_event+0x1b8>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    1eea:	f023 0310 	bic.w	r3, r3, #16
    1eee:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
    1ef0:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    1ef2:	f8b4 9018 	ldrh.w	r9, [r4, #24]
    1ef6:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
    1efa:	2900      	cmp	r1, #0
    1efc:	f47f af5b 	bne.w	1db6 <process_event+0x32>
out:
    1f00:	e751      	b.n	1da6 <process_event+0x22>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    1f02:	68a1      	ldr	r1, [r4, #8]
    1f04:	2900      	cmp	r1, #0
    1f06:	d0db      	beq.n	1ec0 <process_event+0x13c>
	return node->next;
    1f08:	680b      	ldr	r3, [r1, #0]
		mon->callback(mgr, mon, state, res);
    1f0a:	f8d1 b004 	ldr.w	fp, [r1, #4]
    1f0e:	2b00      	cmp	r3, #0
    1f10:	bf38      	it	cc
    1f12:	2300      	movcc	r3, #0
    1f14:	4699      	mov	r9, r3
    1f16:	4652      	mov	r2, sl
    1f18:	463b      	mov	r3, r7
    1f1a:	4620      	mov	r0, r4
    1f1c:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    1f1e:	f1b9 0f00 	cmp.w	r9, #0
    1f22:	d0cd      	beq.n	1ec0 <process_event+0x13c>
    1f24:	f8d9 3000 	ldr.w	r3, [r9]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    1f28:	4649      	mov	r1, r9
    1f2a:	e7ee      	b.n	1f0a <process_event+0x186>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    1f2c:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    1f2e:	463b      	mov	r3, r7
    1f30:	4652      	mov	r2, sl
    1f32:	4620      	mov	r0, r4
    1f34:	682d      	ldr	r5, [r5, #0]
    1f36:	f003 fcfc 	bl	5932 <notify_one>
    1f3a:	e7c1      	b.n	1ec0 <process_event+0x13c>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    1f3c:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    1f40:	bf1e      	ittt	ne
    1f42:	f023 0320 	bicne.w	r3, r3, #32
    1f46:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
    1f48:	2102      	movne	r1, #2
    1f4a:	e7d2      	b.n	1ef2 <process_event+0x16e>
    1f4c:	0000595f 	.word	0x0000595f

00001f50 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    1f50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1f54:	4605      	mov	r5, r0
    1f56:	f04f 0320 	mov.w	r3, #32
    1f5a:	f3ef 8611 	mrs	r6, BASEPRI
    1f5e:	f383 8812 	msr	BASEPRI_MAX, r3
    1f62:	f3bf 8f6f 	isb	sy
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    1f66:	4b10      	ldr	r3, [pc, #64]	; (1fa8 <pm_state_notify+0x58>)
    1f68:	681c      	ldr	r4, [r3, #0]
    1f6a:	2c00      	cmp	r4, #0
    1f6c:	bf38      	it	cc
    1f6e:	2400      	movcc	r4, #0
    1f70:	b19c      	cbz	r4, 1f9a <pm_state_notify+0x4a>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_power_states[_current_cpu->id].state);
    1f72:	4f0e      	ldr	r7, [pc, #56]	; (1fac <pm_state_notify+0x5c>)
    1f74:	f8df 8038 	ldr.w	r8, [pc, #56]	; 1fb0 <pm_state_notify+0x60>
    1f78:	f04f 090c 	mov.w	r9, #12
			callback = notifier->state_exit;
    1f7c:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    1f80:	2d00      	cmp	r5, #0
    1f82:	bf08      	it	eq
    1f84:	4613      	moveq	r3, r2
		if (callback) {
    1f86:	b12b      	cbz	r3, 1f94 <pm_state_notify+0x44>
			callback(z_power_states[_current_cpu->id].state);
    1f88:	f898 2014 	ldrb.w	r2, [r8, #20]
    1f8c:	fb09 f202 	mul.w	r2, r9, r2
    1f90:	5cb8      	ldrb	r0, [r7, r2]
    1f92:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    1f94:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    1f96:	2c00      	cmp	r4, #0
    1f98:	d1f0      	bne.n	1f7c <pm_state_notify+0x2c>
	__asm__ volatile(
    1f9a:	f386 8811 	msr	BASEPRI, r6
    1f9e:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    1fa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1fa6:	bf00      	nop
    1fa8:	20000858 	.word	0x20000858
    1fac:	20000864 	.word	0x20000864
    1fb0:	200009c0 	.word	0x200009c0

00001fb4 <atomic_test_and_set_bit.constprop.0>:
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    1fb4:	f000 031f 	and.w	r3, r0, #31
    1fb8:	2201      	movs	r2, #1
    1fba:	409a      	lsls	r2, r3
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    1fbc:	4b0a      	ldr	r3, [pc, #40]	; (1fe8 <atomic_test_and_set_bit.constprop.0+0x34>)
    1fbe:	f3bf 8f5b 	dmb	ish
	atomic_val_t old;

	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    1fc2:	0940      	lsrs	r0, r0, #5
    1fc4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1fc8:	e850 3f00 	ldrex	r3, [r0]
    1fcc:	ea43 0102 	orr.w	r1, r3, r2
    1fd0:	e840 1c00 	strex	ip, r1, [r0]
    1fd4:	f1bc 0f00 	cmp.w	ip, #0
    1fd8:	d1f6      	bne.n	1fc8 <atomic_test_and_set_bit.constprop.0+0x14>
    1fda:	f3bf 8f5b 	dmb	ish

	return (old & mask) != 0;
    1fde:	421a      	tst	r2, r3
}
    1fe0:	bf14      	ite	ne
    1fe2:	2001      	movne	r0, #1
    1fe4:	2000      	moveq	r0, #0
    1fe6:	4770      	bx	lr
    1fe8:	20000870 	.word	0x20000870

00001fec <pm_system_resume>:

void pm_system_resume(void)
{
    1fec:	b530      	push	{r4, r5, lr}
	uint8_t id = _current_cpu->id;
    1fee:	4b1d      	ldr	r3, [pc, #116]	; (2064 <pm_system_resume+0x78>)
    1ff0:	7d1d      	ldrb	r5, [r3, #20]
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1ff2:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
    1ff6:	f005 031f 	and.w	r3, r5, #31
    1ffa:	2201      	movs	r2, #1
    1ffc:	409a      	lsls	r2, r3
    1ffe:	4b1a      	ldr	r3, [pc, #104]	; (2068 <pm_system_resume+0x7c>)
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    2000:	0969      	lsrs	r1, r5, #5
{
    2002:	b085      	sub	sp, #20
    2004:	43d0      	mvns	r0, r2
    2006:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    200a:	e853 1f00 	ldrex	r1, [r3]
    200e:	ea01 0400 	and.w	r4, r1, r0
    2012:	e843 4c00 	strex	ip, r4, [r3]
    2016:	f1bc 0f00 	cmp.w	ip, #0
    201a:	d1f6      	bne.n	200a <pm_system_resume+0x1e>
    201c:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    2020:	4211      	tst	r1, r2
    2022:	d017      	beq.n	2054 <pm_system_resume+0x68>
		exit_pos_ops(z_power_states[id]);
    2024:	4c11      	ldr	r4, [pc, #68]	; (206c <pm_system_resume+0x80>)
    2026:	220c      	movs	r2, #12
    2028:	fb02 4205 	mla	r2, r2, r5, r4
    202c:	ca07      	ldmia	r2, {r0, r1, r2}
    202e:	ab01      	add	r3, sp, #4
    2030:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
    2034:	4a0e      	ldr	r2, [pc, #56]	; (2070 <pm_system_resume+0x84>)
    2036:	b17a      	cbz	r2, 2058 <pm_system_resume+0x6c>
		pm_power_state_exit_post_ops(info);
    2038:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    203c:	f003 fd89 	bl	5b52 <pm_power_state_exit_post_ops>
		pm_state_notify(false);
    2040:	2000      	movs	r0, #0
    2042:	f7ff ff85 	bl	1f50 <pm_state_notify>
		z_power_states[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    2046:	230c      	movs	r3, #12
    2048:	436b      	muls	r3, r5
    204a:	2200      	movs	r2, #0
    204c:	18e1      	adds	r1, r4, r3
    204e:	50e2      	str	r2, [r4, r3]
    2050:	e9c1 2201 	strd	r2, r2, [r1, #4]
			0, 0};
	}
}
    2054:	b005      	add	sp, #20
    2056:	bd30      	pop	{r4, r5, pc}
    2058:	f382 8811 	msr	BASEPRI, r2
    205c:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    2060:	e7ee      	b.n	2040 <pm_system_resume+0x54>
    2062:	bf00      	nop
    2064:	200009c0 	.word	0x200009c0
    2068:	20000860 	.word	0x20000860
    206c:	20000864 	.word	0x20000864
    2070:	00005b53 	.word	0x00005b53

00002074 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
    2074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	bool ret = true;
	uint8_t id = _current_cpu->id;
    2078:	4b37      	ldr	r3, [pc, #220]	; (2158 <pm_system_suspend+0xe4>)
    207a:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 2170 <pm_system_suspend+0xfc>
    207e:	7d1c      	ldrb	r4, [r3, #20]
{
    2080:	b088      	sub	sp, #32
    2082:	4607      	mov	r7, r0

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_and_set_bit(z_power_states_forced, id)) {
    2084:	4620      	mov	r0, r4
    2086:	f7ff ff95 	bl	1fb4 <atomic_test_and_set_bit.constprop.0>
    208a:	b960      	cbnz	r0, 20a6 <pm_system_suspend+0x32>
		z_power_states[id] = pm_policy_next_state(id, ticks);
    208c:	466e      	mov	r6, sp
    208e:	463a      	mov	r2, r7
    2090:	4621      	mov	r1, r4
    2092:	4630      	mov	r0, r6
    2094:	f003 fceb 	bl	5a6e <pm_policy_next_state>
    2098:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    209c:	250c      	movs	r5, #12
    209e:	fb05 8504 	mla	r5, r5, r4, r8
    20a2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	}

	if (z_power_states[id].state == PM_STATE_ACTIVE) {
    20a6:	230c      	movs	r3, #12
    20a8:	4363      	muls	r3, r4
    20aa:	eb08 0203 	add.w	r2, r8, r3
    20ae:	f818 0003 	ldrb.w	r0, [r8, r3]
    20b2:	0965      	lsrs	r5, r4, #5
    20b4:	f004 061f 	and.w	r6, r4, #31
    20b8:	b3c8      	cbz	r0, 212e <pm_system_suspend+0xba>
				   z_power_states[id].state);
		ret = false;
		goto end;
	}

	if (ticks != K_TICKS_FOREVER) {
    20ba:	1c7b      	adds	r3, r7, #1
    20bc:	d00f      	beq.n	20de <pm_system_suspend+0x6a>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    20be:	f8d2 e008 	ldr.w	lr, [r2, #8]
    20c2:	4826      	ldr	r0, [pc, #152]	; (215c <pm_system_suspend+0xe8>)
    20c4:	4a26      	ldr	r2, [pc, #152]	; (2160 <pm_system_suspend+0xec>)
    20c6:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
    20ca:	2100      	movs	r1, #0
    20cc:	2300      	movs	r3, #0
    20ce:	fbec 010e 	umlal	r0, r1, ip, lr
    20d2:	f7fe fc93 	bl	9fc <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
    20d6:	2101      	movs	r1, #1
    20d8:	1a38      	subs	r0, r7, r0
    20da:	f004 f87c 	bl	61d6 <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    20de:	f002 fbdf 	bl	48a0 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
    20e2:	2001      	movs	r0, #1
    20e4:	f7ff ff34 	bl	1f50 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    20e8:	f3bf 8f5b 	dmb	ish
    20ec:	4b1d      	ldr	r3, [pc, #116]	; (2164 <pm_system_suspend+0xf0>)
 *
 * @return N/A
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    20ee:	2201      	movs	r2, #1
    20f0:	40b2      	lsls	r2, r6
    20f2:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    20f6:	e853 1f00 	ldrex	r1, [r3]
    20fa:	4311      	orrs	r1, r2
    20fc:	e843 1000 	strex	r0, r1, [r3]
    2100:	2800      	cmp	r0, #0
    2102:	d1f8      	bne.n	20f6 <pm_system_suspend+0x82>
    2104:	f3bf 8f5b 	dmb	ish
	atomic_set_bit(z_post_ops_required, id);
	pm_state_set(z_power_states[id]);
    2108:	230c      	movs	r3, #12
    210a:	fb03 8404 	mla	r4, r3, r4, r8
    210e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
    2112:	ab05      	add	r3, sp, #20
    2114:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
    2118:	4a13      	ldr	r2, [pc, #76]	; (2168 <pm_system_suspend+0xf4>)
    211a:	b11a      	cbz	r2, 2124 <pm_system_suspend+0xb0>
		pm_power_state_set(info);
    211c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    2120:	f003 fd04 	bl	5b2c <pm_power_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_power_states[id].state);
	pm_system_resume();
    2124:	f7ff ff62 	bl	1fec <pm_system_resume>
	k_sched_unlock();
    2128:	f002 fd94 	bl	4c54 <k_sched_unlock>
	bool ret = true;
    212c:	2001      	movs	r0, #1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    212e:	4a0f      	ldr	r2, [pc, #60]	; (216c <pm_system_suspend+0xf8>)
    2130:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
    2134:	2301      	movs	r3, #1
    2136:	40b3      	lsls	r3, r6
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    2138:	43db      	mvns	r3, r3
    213a:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    213e:	e855 2f00 	ldrex	r2, [r5]
    2142:	401a      	ands	r2, r3
    2144:	e845 2100 	strex	r1, r2, [r5]
    2148:	2900      	cmp	r1, #0
    214a:	d1f8      	bne.n	213e <pm_system_suspend+0xca>
    214c:	f3bf 8f5b 	dmb	ish
				   z_power_states[id].state);

end:
	atomic_clear_bit(z_power_states_forced, id);
	return ret;
}
    2150:	b008      	add	sp, #32
    2152:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2156:	bf00      	nop
    2158:	200009c0 	.word	0x200009c0
    215c:	000f423f 	.word	0x000f423f
    2160:	000f4240 	.word	0x000f4240
    2164:	20000860 	.word	0x20000860
    2168:	00005b2d 	.word	0x00005b2d
    216c:	20000870 	.word	0x20000870
    2170:	20000864 	.word	0x20000864

00002174 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    2174:	680b      	ldr	r3, [r1, #0]
    2176:	3301      	adds	r3, #1
    2178:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    217a:	4b01      	ldr	r3, [pc, #4]	; (2180 <char_out+0xc>)
    217c:	681b      	ldr	r3, [r3, #0]
    217e:	4718      	bx	r3
    2180:	20000020 	.word	0x20000020

00002184 <__printk_hook_install>:
	_char_out = fn;
    2184:	4b01      	ldr	r3, [pc, #4]	; (218c <__printk_hook_install+0x8>)
    2186:	6018      	str	r0, [r3, #0]
}
    2188:	4770      	bx	lr
    218a:	bf00      	nop
    218c:	20000020 	.word	0x20000020

00002190 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
    2190:	b507      	push	{r0, r1, r2, lr}
    2192:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
    2194:	2100      	movs	r1, #0
{
    2196:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
    2198:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
    219a:	4803      	ldr	r0, [pc, #12]	; (21a8 <vprintk+0x18>)
    219c:	a901      	add	r1, sp, #4
    219e:	f7ff f967 	bl	1470 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
    21a2:	b003      	add	sp, #12
    21a4:	f85d fb04 	ldr.w	pc, [sp], #4
    21a8:	00002175 	.word	0x00002175

000021ac <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    21ac:	b508      	push	{r3, lr}
	__asm__ volatile(
    21ae:	f04f 0220 	mov.w	r2, #32
    21b2:	f3ef 8311 	mrs	r3, BASEPRI
    21b6:	f382 8812 	msr	BASEPRI_MAX, r2
    21ba:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
    21be:	f000 fbe3 	bl	2988 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    21c2:	4803      	ldr	r0, [pc, #12]	; (21d0 <sys_reboot+0x24>)
    21c4:	f003 fc46 	bl	5a54 <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    21c8:	f000 f80a 	bl	21e0 <arch_cpu_idle>
    21cc:	e7fc      	b.n	21c8 <sys_reboot+0x1c>
    21ce:	bf00      	nop
    21d0:	000069ea 	.word	0x000069ea

000021d4 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    21d4:	4901      	ldr	r1, [pc, #4]	; (21dc <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    21d6:	2210      	movs	r2, #16
	str	r2, [r1]
    21d8:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    21da:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    21dc:	e000ed10 	.word	0xe000ed10

000021e0 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    21e0:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    21e2:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    21e4:	f380 8811 	msr	BASEPRI, r0
	isb
    21e8:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    21ec:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    21f0:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    21f2:	b662      	cpsie	i
	isb
    21f4:	f3bf 8f6f 	isb	sy

	bx	lr
    21f8:	4770      	bx	lr
    21fa:	bf00      	nop

000021fc <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    21fc:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    21fe:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    2200:	f381 8811 	msr	BASEPRI, r1

	wfe
    2204:	bf20      	wfe

	msr	BASEPRI, r0
    2206:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    220a:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    220c:	4770      	bx	lr
    220e:	bf00      	nop

00002210 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    2210:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    2212:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    2214:	4a0b      	ldr	r2, [pc, #44]	; (2244 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    2216:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    2218:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    221a:	bf1e      	ittt	ne
	movne	r1, #0
    221c:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    221e:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    2220:	f003 feb2 	blne	5f88 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    2224:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    2226:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    222a:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    222e:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    2232:	4905      	ldr	r1, [pc, #20]	; (2248 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    2234:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    2236:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    2238:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    223a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    223e:	4903      	ldr	r1, [pc, #12]	; (224c <_isr_wrapper+0x3c>)
	bx r1
    2240:	4708      	bx	r1
    2242:	0000      	.short	0x0000
	ldr r2, =_kernel
    2244:	200009c0 	.word	0x200009c0
	ldr r1, =_sw_isr_table
    2248:	00006300 	.word	0x00006300
	ldr r1, =z_arm_int_exit
    224c:	0000243d 	.word	0x0000243d

00002250 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    2250:	bf30      	wfi
    b z_SysNmiOnReset
    2252:	f7ff bffd 	b.w	2250 <z_SysNmiOnReset>
    2256:	bf00      	nop

00002258 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    2258:	4912      	ldr	r1, [pc, #72]	; (22a4 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    225a:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    225c:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    2260:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    2262:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    2266:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    226a:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    226c:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    2270:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    2274:	4f0c      	ldr	r7, [pc, #48]	; (22a8 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    2276:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    227a:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    227c:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    227e:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    2280:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    2282:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    2284:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    2286:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    228a:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    228c:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    228e:	f000 fa75 	bl	277c <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    2292:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    2296:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    229a:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    229e:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    22a2:	4770      	bx	lr
    ldr r1, =_kernel
    22a4:	200009c0 	.word	0x200009c0
    ldr v4, =_SCS_ICSR
    22a8:	e000ed04 	.word	0xe000ed04

000022ac <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    22ac:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    22b0:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    22b2:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    22b6:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    22ba:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    22bc:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    22c0:	2902      	cmp	r1, #2
    beq _oops
    22c2:	d0ff      	beq.n	22c4 <_oops>

000022c4 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    22c4:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    22c6:	f003 fbe3 	bl	5a90 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    22ca:	bd01      	pop	{r0, pc}

000022cc <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    22cc:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    22ce:	2b00      	cmp	r3, #0
    22d0:	db08      	blt.n	22e4 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    22d2:	2201      	movs	r2, #1
    22d4:	f000 001f 	and.w	r0, r0, #31
    22d8:	fa02 f000 	lsl.w	r0, r2, r0
    22dc:	095b      	lsrs	r3, r3, #5
    22de:	4a02      	ldr	r2, [pc, #8]	; (22e8 <arch_irq_enable+0x1c>)
    22e0:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    22e4:	4770      	bx	lr
    22e6:	bf00      	nop
    22e8:	e000e100 	.word	0xe000e100

000022ec <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    22ec:	4b05      	ldr	r3, [pc, #20]	; (2304 <arch_irq_is_enabled+0x18>)
    22ee:	0942      	lsrs	r2, r0, #5
    22f0:	f000 001f 	and.w	r0, r0, #31
    22f4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    22f8:	2301      	movs	r3, #1
    22fa:	fa03 f000 	lsl.w	r0, r3, r0
}
    22fe:	4010      	ands	r0, r2
    2300:	4770      	bx	lr
    2302:	bf00      	nop
    2304:	e000e100 	.word	0xe000e100

00002308 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    2308:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    230a:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    230c:	bfa8      	it	ge
    230e:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
    2312:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2316:	bfb8      	it	lt
    2318:	4b06      	ldrlt	r3, [pc, #24]	; (2334 <z_arm_irq_priority_set+0x2c>)
    231a:	ea4f 1141 	mov.w	r1, r1, lsl #5
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    231e:	bfac      	ite	ge
    2320:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2324:	f000 000f 	andlt.w	r0, r0, #15
    2328:	b2c9      	uxtb	r1, r1
    232a:	bfb4      	ite	lt
    232c:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    232e:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
    2332:	4770      	bx	lr
    2334:	e000ed14 	.word	0xe000ed14

00002338 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    2338:	4a0b      	ldr	r2, [pc, #44]	; (2368 <z_arm_prep_c+0x30>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    233a:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    233c:	4b0b      	ldr	r3, [pc, #44]	; (236c <z_arm_prep_c+0x34>)
    233e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    2342:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    2344:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2348:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    234c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    2350:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    2354:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    2358:	f002 f8b6 	bl	44c8 <z_bss_zero>
	z_data_copy();
    235c:	f002 ffda 	bl	5314 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    2360:	f000 f9a0 	bl	26a4 <z_arm_interrupt_init>
	z_cstart();
    2364:	f002 f8ba 	bl	44dc <z_cstart>
    2368:	00000000 	.word	0x00000000
    236c:	e000ed00 	.word	0xe000ed00

00002370 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    2370:	4a09      	ldr	r2, [pc, #36]	; (2398 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    2372:	490a      	ldr	r1, [pc, #40]	; (239c <arch_swap+0x2c>)
	_current->arch.basepri = key;
    2374:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    2376:	6809      	ldr	r1, [r1, #0]
    2378:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    237a:	4909      	ldr	r1, [pc, #36]	; (23a0 <arch_swap+0x30>)
	_current->arch.basepri = key;
    237c:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    237e:	684b      	ldr	r3, [r1, #4]
    2380:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    2384:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
    2386:	2300      	movs	r3, #0
    2388:	f383 8811 	msr	BASEPRI, r3
    238c:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    2390:	6893      	ldr	r3, [r2, #8]
}
    2392:	6f98      	ldr	r0, [r3, #120]	; 0x78
    2394:	4770      	bx	lr
    2396:	bf00      	nop
    2398:	200009c0 	.word	0x200009c0
    239c:	00006800 	.word	0x00006800
    23a0:	e000ed00 	.word	0xe000ed00

000023a4 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    23a4:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    23a8:	9b00      	ldr	r3, [sp, #0]
    23aa:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    23ae:	490a      	ldr	r1, [pc, #40]	; (23d8 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    23b0:	9b01      	ldr	r3, [sp, #4]
    23b2:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    23b6:	9b02      	ldr	r3, [sp, #8]
    23b8:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    23bc:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    23c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    23c4:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    23c8:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    23cc:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    23ce:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    23d0:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    23d2:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    23d4:	4770      	bx	lr
    23d6:	bf00      	nop
    23d8:	00005a79 	.word	0x00005a79

000023dc <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    23dc:	4a0b      	ldr	r2, [pc, #44]	; (240c <z_check_thread_stack_fail+0x30>)
{
    23de:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    23e0:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    23e2:	b190      	cbz	r0, 240a <z_check_thread_stack_fail+0x2e>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    23e4:	f113 0f16 	cmn.w	r3, #22
    23e8:	6e40      	ldr	r0, [r0, #100]	; 0x64
    23ea:	d005      	beq.n	23f8 <z_check_thread_stack_fail+0x1c>
    23ec:	f1a0 0220 	sub.w	r2, r0, #32
    23f0:	429a      	cmp	r2, r3
    23f2:	d806      	bhi.n	2402 <z_check_thread_stack_fail+0x26>
    23f4:	4283      	cmp	r3, r0
    23f6:	d204      	bcs.n	2402 <z_check_thread_stack_fail+0x26>
    23f8:	4281      	cmp	r1, r0
    23fa:	bf2c      	ite	cs
    23fc:	2100      	movcs	r1, #0
    23fe:	2101      	movcc	r1, #1
    2400:	e000      	b.n	2404 <z_check_thread_stack_fail+0x28>
    2402:	2100      	movs	r1, #0
    2404:	2900      	cmp	r1, #0
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    2406:	bf08      	it	eq
    2408:	2000      	moveq	r0, #0
}
    240a:	4770      	bx	lr
    240c:	200009c0 	.word	0x200009c0

00002410 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    2410:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    2412:	4b09      	ldr	r3, [pc, #36]	; (2438 <arch_switch_to_main_thread+0x28>)
    2414:	6098      	str	r0, [r3, #8]
{
    2416:	460d      	mov	r5, r1
    2418:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    241a:	f000 f9af 	bl	277c <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    241e:	4620      	mov	r0, r4
    2420:	f385 8809 	msr	PSP, r5
    2424:	2100      	movs	r1, #0
    2426:	b663      	cpsie	if
    2428:	f381 8811 	msr	BASEPRI, r1
    242c:	f3bf 8f6f 	isb	sy
    2430:	2200      	movs	r2, #0
    2432:	2300      	movs	r3, #0
    2434:	f003 fb20 	bl	5a78 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    2438:	200009c0 	.word	0x200009c0

0000243c <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    243c:	4b04      	ldr	r3, [pc, #16]	; (2450 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    243e:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    2440:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    2442:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    2444:	d003      	beq.n	244e <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    2446:	4903      	ldr	r1, [pc, #12]	; (2454 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    2448:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    244c:	600a      	str	r2, [r1, #0]

0000244e <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    244e:	4770      	bx	lr
	ldr r3, =_kernel
    2450:	200009c0 	.word	0x200009c0
	ldr r1, =_SCS_ICSR
    2454:	e000ed04 	.word	0xe000ed04

00002458 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    2458:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    245c:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    2460:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    2462:	4672      	mov	r2, lr
	bl z_arm_fault
    2464:	f000 f892 	bl	258c <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    2468:	bd01      	pop	{r0, pc}
    246a:	bf00      	nop

0000246c <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    246c:	2000      	movs	r0, #0
    msr CONTROL, r0
    246e:	f380 8814 	msr	CONTROL, r0
    isb
    2472:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    2476:	f003 fed1 	bl	621c <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    247a:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    247c:	490d      	ldr	r1, [pc, #52]	; (24b4 <__start+0x48>)
    str r0, [r1]
    247e:	6008      	str	r0, [r1, #0]
    dsb
    2480:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    2484:	480c      	ldr	r0, [pc, #48]	; (24b8 <__start+0x4c>)
    msr msp, r0
    2486:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    248a:	f000 f927 	bl	26dc <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    248e:	2020      	movs	r0, #32
    msr BASEPRI, r0
    2490:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    2494:	4809      	ldr	r0, [pc, #36]	; (24bc <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    2496:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    249a:	1840      	adds	r0, r0, r1
    msr PSP, r0
    249c:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    24a0:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    24a4:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    24a6:	4308      	orrs	r0, r1
    msr CONTROL, r0
    24a8:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    24ac:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    24b0:	f7ff ff42 	bl	2338 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    24b4:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    24b8:	200013e0 	.word	0x200013e0
    ldr r0, =z_interrupt_stacks
    24bc:	20001560 	.word	0x20001560

000024c0 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
    24c0:	b538      	push	{r3, r4, r5, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    24c2:	4b19      	ldr	r3, [pc, #100]	; (2528 <mem_manage_fault+0x68>)
{
    24c4:	4614      	mov	r4, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    24c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    24c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    24ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
{
    24cc:	4605      	mov	r5, r0
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    24ce:	0790      	lsls	r0, r2, #30
    24d0:	d519      	bpl.n	2506 <mem_manage_fault+0x46>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    24d2:	6b58      	ldr	r0, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    24d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    24d6:	0612      	lsls	r2, r2, #24
    24d8:	d515      	bpl.n	2506 <mem_manage_fault+0x46>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault != 0) {
    24da:	b119      	cbz	r1, 24e4 <mem_manage_fault+0x24>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    24dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    24de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    24e2:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    24e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    24e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    24e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    24ea:	06d1      	lsls	r1, r2, #27
    24ec:	d40e      	bmi.n	250c <mem_manage_fault+0x4c>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    24ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    24f0:	079a      	lsls	r2, r3, #30
    24f2:	d40b      	bmi.n	250c <mem_manage_fault+0x4c>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    24f4:	2000      	movs	r0, #0
		"without stack guard, user-mode or null-pointer detection\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    24f6:	4a0c      	ldr	r2, [pc, #48]	; (2528 <mem_manage_fault+0x68>)
    24f8:	6a93      	ldr	r3, [r2, #40]	; 0x28
    24fa:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    24fe:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    2500:	2300      	movs	r3, #0
    2502:	7023      	strb	r3, [r4, #0]

	return reason;
}
    2504:	bd38      	pop	{r3, r4, r5, pc}
	uint32_t mmfar = -EINVAL;
    2506:	f06f 0015 	mvn.w	r0, #21
    250a:	e7eb      	b.n	24e4 <mem_manage_fault+0x24>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    250c:	4b06      	ldr	r3, [pc, #24]	; (2528 <mem_manage_fault+0x68>)
    250e:	685b      	ldr	r3, [r3, #4]
    2510:	051b      	lsls	r3, r3, #20
    2512:	d5ef      	bpl.n	24f4 <mem_manage_fault+0x34>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    2514:	4629      	mov	r1, r5
    2516:	f7ff ff61 	bl	23dc <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    251a:	2800      	cmp	r0, #0
    251c:	d0ea      	beq.n	24f4 <mem_manage_fault+0x34>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    251e:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    2522:	2002      	movs	r0, #2
    2524:	e7e7      	b.n	24f6 <mem_manage_fault+0x36>
    2526:	bf00      	nop
    2528:	e000ed00 	.word	0xe000ed00

0000252c <bus_fault.isra.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    252c:	4b0d      	ldr	r3, [pc, #52]	; (2564 <bus_fault.isra.0+0x38>)
    252e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    2530:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    2532:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2534:	0592      	lsls	r2, r2, #22
    2536:	d508      	bpl.n	254a <bus_fault.isra.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    2538:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    253a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    253c:	0412      	lsls	r2, r2, #16
    253e:	d504      	bpl.n	254a <bus_fault.isra.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
    2540:	b118      	cbz	r0, 254a <bus_fault.isra.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    2542:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2544:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    2548:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    254a:	4b06      	ldr	r3, [pc, #24]	; (2564 <bus_fault.isra.0+0x38>)
    254c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    254e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2550:	05d2      	lsls	r2, r2, #23
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    2552:	bf58      	it	pl
    2554:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    2556:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    2558:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    255a:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
    255e:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    2560:	7008      	strb	r0, [r1, #0]

	return reason;
}
    2562:	4770      	bx	lr
    2564:	e000ed00 	.word	0xe000ed00

00002568 <usage_fault.isra.0>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    2568:	4b07      	ldr	r3, [pc, #28]	; (2588 <usage_fault.isra.0+0x20>)
    256a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    256c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    256e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    2570:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    2572:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    2574:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    2576:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2578:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    257c:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    2580:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
    2582:	2000      	movs	r0, #0
    2584:	4770      	bx	lr
    2586:	bf00      	nop
    2588:	e000ed00 	.word	0xe000ed00

0000258c <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    258c:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    258e:	4b3e      	ldr	r3, [pc, #248]	; (2688 <z_arm_fault+0xfc>)
    2590:	685b      	ldr	r3, [r3, #4]
{
    2592:	b08a      	sub	sp, #40	; 0x28
    2594:	460d      	mov	r5, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    2596:	f3c3 0308 	ubfx	r3, r3, #0, #9
    259a:	2600      	movs	r6, #0
    259c:	f386 8811 	msr	BASEPRI, r6
    25a0:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    25a4:	f002 417f 	and.w	r1, r2, #4278190080	; 0xff000000
    25a8:	f1b1 4f7f 	cmp.w	r1, #4278190080	; 0xff000000
    25ac:	d111      	bne.n	25d2 <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    25ae:	f002 010c 	and.w	r1, r2, #12
    25b2:	2908      	cmp	r1, #8
    25b4:	d00d      	beq.n	25d2 <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    25b6:	0712      	lsls	r2, r2, #28
    25b8:	d401      	bmi.n	25be <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
    25ba:	4605      	mov	r5, r0
			*nested_exc = true;
    25bc:	2601      	movs	r6, #1
	*recoverable = false;
    25be:	2200      	movs	r2, #0
    25c0:	3b03      	subs	r3, #3
    25c2:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
    25c6:	2b03      	cmp	r3, #3
    25c8:	d857      	bhi.n	267a <z_arm_fault+0xee>
    25ca:	e8df f003 	tbb	[pc, r3]
    25ce:	4e04      	.short	0x4e04
    25d0:	4b52      	.short	0x4b52
		return NULL;
    25d2:	4635      	mov	r5, r6
    25d4:	e7f3      	b.n	25be <z_arm_fault+0x32>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    25d6:	4b2c      	ldr	r3, [pc, #176]	; (2688 <z_arm_fault+0xfc>)
    25d8:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    25da:	f014 0402 	ands.w	r4, r4, #2
    25de:	d14c      	bne.n	267a <z_arm_fault+0xee>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    25e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    25e2:	2a00      	cmp	r2, #0
    25e4:	db18      	blt.n	2618 <z_arm_fault+0x8c>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    25e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    25e8:	005b      	lsls	r3, r3, #1
    25ea:	d515      	bpl.n	2618 <z_arm_fault+0x8c>
	uint16_t fault_insn = *(ret_addr - 1);
    25ec:	69ab      	ldr	r3, [r5, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    25ee:	f833 2c02 	ldrh.w	r2, [r3, #-2]
    25f2:	f64d 7302 	movw	r3, #57090	; 0xdf02
    25f6:	429a      	cmp	r2, r3
    25f8:	d00d      	beq.n	2616 <z_arm_fault+0x8a>
		} else if (SCB_MMFSR != 0) {
    25fa:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    25fe:	f603 6326 	addw	r3, r3, #3622	; 0xe26
    2602:	781b      	ldrb	r3, [r3, #0]
    2604:	b303      	cbz	r3, 2648 <z_arm_fault+0xbc>
			reason = mem_manage_fault(esf, 1, recoverable);
    2606:	f10d 0207 	add.w	r2, sp, #7
    260a:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    260c:	4628      	mov	r0, r5
    260e:	f7ff ff57 	bl	24c0 <mem_manage_fault>
    2612:	4604      	mov	r4, r0
		break;
    2614:	e000      	b.n	2618 <z_arm_fault+0x8c>
			reason = esf->basic.r0;
    2616:	682c      	ldr	r4, [r5, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    2618:	f89d 3007 	ldrb.w	r3, [sp, #7]
    261c:	b993      	cbnz	r3, 2644 <z_arm_fault+0xb8>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    261e:	2220      	movs	r2, #32
    2620:	4629      	mov	r1, r5
    2622:	a802      	add	r0, sp, #8
    2624:	f003 fa6e 	bl	5b04 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    2628:	9b09      	ldr	r3, [sp, #36]	; 0x24
    262a:	b346      	cbz	r6, 267e <z_arm_fault+0xf2>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    262c:	f3c3 0208 	ubfx	r2, r3, #0, #9
    2630:	b922      	cbnz	r2, 263c <z_arm_fault+0xb0>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    2632:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    2636:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    263a:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    263c:	a902      	add	r1, sp, #8
    263e:	4620      	mov	r0, r4
    2640:	f003 fa24 	bl	5a8c <z_arm_fatal_error>
}
    2644:	b00a      	add	sp, #40	; 0x28
    2646:	bd70      	pop	{r4, r5, r6, pc}
		} else if (SCB_BFSR != 0) {
    2648:	4b10      	ldr	r3, [pc, #64]	; (268c <z_arm_fault+0x100>)
    264a:	781b      	ldrb	r3, [r3, #0]
    264c:	b12b      	cbz	r3, 265a <z_arm_fault+0xce>
			reason = bus_fault(esf, 1, recoverable);
    264e:	f10d 0107 	add.w	r1, sp, #7
    2652:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    2654:	f7ff ff6a 	bl	252c <bus_fault.isra.0>
    2658:	e7db      	b.n	2612 <z_arm_fault+0x86>
		} else if (SCB_UFSR != 0) {
    265a:	4b0d      	ldr	r3, [pc, #52]	; (2690 <z_arm_fault+0x104>)
    265c:	881b      	ldrh	r3, [r3, #0]
    265e:	b29b      	uxth	r3, r3
    2660:	2b00      	cmp	r3, #0
    2662:	d0d9      	beq.n	2618 <z_arm_fault+0x8c>
		reason = usage_fault(esf);
    2664:	f7ff ff80 	bl	2568 <usage_fault.isra.0>
    2668:	e7d3      	b.n	2612 <z_arm_fault+0x86>
		reason = mem_manage_fault(esf, 0, recoverable);
    266a:	f10d 0207 	add.w	r2, sp, #7
    266e:	2100      	movs	r1, #0
    2670:	e7cc      	b.n	260c <z_arm_fault+0x80>
		reason = bus_fault(esf, 0, recoverable);
    2672:	f10d 0107 	add.w	r1, sp, #7
    2676:	2000      	movs	r0, #0
    2678:	e7ec      	b.n	2654 <z_arm_fault+0xc8>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    267a:	2400      	movs	r4, #0
    267c:	e7cc      	b.n	2618 <z_arm_fault+0x8c>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    267e:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    2682:	f023 0301 	bic.w	r3, r3, #1
    2686:	e7d8      	b.n	263a <z_arm_fault+0xae>
    2688:	e000ed00 	.word	0xe000ed00
    268c:	e000ed29 	.word	0xe000ed29
    2690:	e000ed2a 	.word	0xe000ed2a

00002694 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    2694:	4a02      	ldr	r2, [pc, #8]	; (26a0 <z_arm_fault_init+0xc>)
    2696:	6953      	ldr	r3, [r2, #20]
    2698:	f043 0310 	orr.w	r3, r3, #16
    269c:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    269e:	4770      	bx	lr
    26a0:	e000ed00 	.word	0xe000ed00

000026a4 <z_arm_interrupt_init>:
    26a4:	4804      	ldr	r0, [pc, #16]	; (26b8 <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    26a6:	2300      	movs	r3, #0
    26a8:	2120      	movs	r1, #32
    26aa:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    26ac:	3301      	adds	r3, #1
    26ae:	2b30      	cmp	r3, #48	; 0x30
    26b0:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    26b4:	d1f9      	bne.n	26aa <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    26b6:	4770      	bx	lr
    26b8:	e000e100 	.word	0xe000e100

000026bc <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    26bc:	4a06      	ldr	r2, [pc, #24]	; (26d8 <z_arm_clear_arm_mpu_config+0x1c>)
    26be:	6811      	ldr	r1, [r2, #0]

	for (i = 0; i < num_regions; i++) {
    26c0:	2300      	movs	r3, #0
	int num_regions =
    26c2:	f3c1 2107 	ubfx	r1, r1, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
    26c6:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
    26c8:	428b      	cmp	r3, r1
    26ca:	d100      	bne.n	26ce <z_arm_clear_arm_mpu_config+0x12>
		ARM_MPU_ClrRegion(i);
	}
}
    26cc:	4770      	bx	lr
  MPU->RNR = rnr;
    26ce:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
    26d0:	6110      	str	r0, [r2, #16]
	for (i = 0; i < num_regions; i++) {
    26d2:	3301      	adds	r3, #1
    26d4:	e7f8      	b.n	26c8 <z_arm_clear_arm_mpu_config+0xc>
    26d6:	bf00      	nop
    26d8:	e000ed90 	.word	0xe000ed90

000026dc <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
    26dc:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    26de:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    26e0:	2300      	movs	r3, #0
    26e2:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    26e6:	f7ff ffe9 	bl	26bc <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    26ea:	4b14      	ldr	r3, [pc, #80]	; (273c <z_arm_init_arch_hw_at_boot+0x60>)
    26ec:	f04f 32ff 	mov.w	r2, #4294967295
    26f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    26f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    26f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    26fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    2700:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    2704:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    2708:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    270c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    2710:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    2714:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    2718:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    271c:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    2720:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    2724:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    2728:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    272c:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
    2730:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    2732:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2736:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    273a:	bd08      	pop	{r3, pc}
    273c:	e000e100 	.word	0xe000e100

00002740 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    2740:	4b06      	ldr	r3, [pc, #24]	; (275c <z_impl_k_thread_abort+0x1c>)
    2742:	689b      	ldr	r3, [r3, #8]
    2744:	4283      	cmp	r3, r0
    2746:	d107      	bne.n	2758 <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    2748:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    274c:	b123      	cbz	r3, 2758 <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    274e:	4a04      	ldr	r2, [pc, #16]	; (2760 <z_impl_k_thread_abort+0x20>)
    2750:	6853      	ldr	r3, [r2, #4]
    2752:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    2756:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
    2758:	f002 bb52 	b.w	4e00 <z_thread_abort>
    275c:	200009c0 	.word	0x200009c0
    2760:	e000ed00 	.word	0xe000ed00

00002764 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    2764:	4b02      	ldr	r3, [pc, #8]	; (2770 <z_arm_configure_static_mpu_regions+0xc>)
    2766:	4a03      	ldr	r2, [pc, #12]	; (2774 <z_arm_configure_static_mpu_regions+0x10>)
    2768:	4803      	ldr	r0, [pc, #12]	; (2778 <z_arm_configure_static_mpu_regions+0x14>)
    276a:	2101      	movs	r1, #1
    276c:	f000 b868 	b.w	2840 <arm_core_mpu_configure_static_mpu_regions>
    2770:	20040000 	.word	0x20040000
    2774:	20000000 	.word	0x20000000
    2778:	000066f4 	.word	0x000066f4

0000277c <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    277c:	6e42      	ldr	r2, [r0, #100]	; 0x64
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    277e:	4b05      	ldr	r3, [pc, #20]	; (2794 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    2780:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
    2782:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    2784:	4a04      	ldr	r2, [pc, #16]	; (2798 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    2786:	2120      	movs	r1, #32
    2788:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    278c:	4618      	mov	r0, r3
    278e:	2101      	movs	r1, #1
    2790:	f000 b860 	b.w	2854 <arm_core_mpu_configure_dynamic_mpu_regions>
    2794:	20000874 	.word	0x20000874
    2798:	150b0000 	.word	0x150b0000

0000279c <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    279c:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    279e:	4f1e      	ldr	r7, [pc, #120]	; (2818 <mpu_configure_regions+0x7c>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    27a0:	2600      	movs	r6, #0
    27a2:	428e      	cmp	r6, r1
    27a4:	db01      	blt.n	27aa <mpu_configure_regions+0xe>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    27a6:	4610      	mov	r0, r2
    27a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i].size == 0U) {
    27aa:	6844      	ldr	r4, [r0, #4]
    27ac:	b384      	cbz	r4, 2810 <mpu_configure_regions+0x74>
		if (do_sanity_check &&
    27ae:	b153      	cbz	r3, 27c6 <mpu_configure_regions+0x2a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    27b0:	f104 3cff 	add.w	ip, r4, #4294967295
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    27b4:	ea14 0f0c 	tst.w	r4, ip
    27b8:	d118      	bne.n	27ec <mpu_configure_regions+0x50>
		&&
    27ba:	2c1f      	cmp	r4, #31
    27bc:	d916      	bls.n	27ec <mpu_configure_regions+0x50>
		((part->start & (part->size - 1U)) == 0U);
    27be:	6805      	ldr	r5, [r0, #0]
		&&
    27c0:	ea1c 0f05 	tst.w	ip, r5
    27c4:	d112      	bne.n	27ec <mpu_configure_regions+0x50>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    27c6:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    27c8:	6805      	ldr	r5, [r0, #0]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    27ca:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    27ce:	b2d2      	uxtb	r2, r2
    27d0:	d90f      	bls.n	27f2 <mpu_configure_regions+0x56>
	/*
	 * A size value greater than 2^31 could not be handled by
	 * round_up_to_next_power_of_two() properly. We handle
	 * it separately here.
	 */
	if (size > (1UL << 31)) {
    27d2:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    27d6:	d80e      	bhi.n	27f6 <mpu_configure_regions+0x5a>
		return REGION_4G;
	}

	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    27d8:	3c01      	subs	r4, #1
    27da:	fab4 f484 	clz	r4, r4
    27de:	f1c4 041f 	rsb	r4, r4, #31
    27e2:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    27e4:	2a07      	cmp	r2, #7
#if defined(CONFIG_CPU_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    27e6:	ea4c 0404 	orr.w	r4, ip, r4
    27ea:	d906      	bls.n	27fa <mpu_configure_regions+0x5e>
			return -EINVAL;
    27ec:	f06f 0215 	mvn.w	r2, #21
    27f0:	e7d9      	b.n	27a6 <mpu_configure_regions+0xa>
		return REGION_32B;
    27f2:	2408      	movs	r4, #8
    27f4:	e7f6      	b.n	27e4 <mpu_configure_regions+0x48>
		return REGION_4G;
    27f6:	243e      	movs	r4, #62	; 0x3e
    27f8:	e7f4      	b.n	27e4 <mpu_configure_regions+0x48>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    27fa:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
    27fe:	4315      	orrs	r5, r2
    2800:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    2804:	f044 0401 	orr.w	r4, r4, #1
    2808:	60ba      	str	r2, [r7, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    280a:	60fd      	str	r5, [r7, #12]
		reg_index++;
    280c:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    280e:	613c      	str	r4, [r7, #16]
	for (i = 0; i < regions_num; i++) {
    2810:	3601      	adds	r6, #1
    2812:	300c      	adds	r0, #12
    2814:	e7c5      	b.n	27a2 <mpu_configure_regions+0x6>
    2816:	bf00      	nop
    2818:	e000ed90 	.word	0xe000ed90

0000281c <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    281c:	4b03      	ldr	r3, [pc, #12]	; (282c <arm_core_mpu_enable+0x10>)
    281e:	2205      	movs	r2, #5
    2820:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    2822:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2826:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    282a:	4770      	bx	lr
    282c:	e000ed90 	.word	0xe000ed90

00002830 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    2830:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    2834:	4b01      	ldr	r3, [pc, #4]	; (283c <arm_core_mpu_disable+0xc>)
    2836:	2200      	movs	r2, #0
    2838:	605a      	str	r2, [r3, #4]
}
    283a:	4770      	bx	lr
    283c:	e000ed90 	.word	0xe000ed90

00002840 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    2840:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    2842:	4c03      	ldr	r4, [pc, #12]	; (2850 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    2844:	2301      	movs	r3, #1
    2846:	7822      	ldrb	r2, [r4, #0]
    2848:	f7ff ffa8 	bl	279c <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    284c:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    284e:	bd10      	pop	{r4, pc}
    2850:	20000a10 	.word	0x20000a10

00002854 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    2854:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    2856:	4a08      	ldr	r2, [pc, #32]	; (2878 <arm_core_mpu_configure_dynamic_mpu_regions+0x24>)
    2858:	2300      	movs	r3, #0
    285a:	7812      	ldrb	r2, [r2, #0]
    285c:	f7ff ff9e 	bl	279c <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    2860:	f110 0f16 	cmn.w	r0, #22
    2864:	d003      	beq.n	286e <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
  MPU->RNR = rnr;
    2866:	4b05      	ldr	r3, [pc, #20]	; (287c <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
  MPU->RASR = 0U;
    2868:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    286a:	2807      	cmp	r0, #7
    286c:	dd00      	ble.n	2870 <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    286e:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
    2870:	6098      	str	r0, [r3, #8]
  MPU->RASR = 0U;
    2872:	611a      	str	r2, [r3, #16]
    2874:	3001      	adds	r0, #1
    2876:	e7f8      	b.n	286a <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
    2878:	20000a10 	.word	0x20000a10
    287c:	e000ed90 	.word	0xe000ed90

00002880 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    2880:	4913      	ldr	r1, [pc, #76]	; (28d0 <z_arm_mpu_init+0x50>)
    2882:	6808      	ldr	r0, [r1, #0]
    2884:	2808      	cmp	r0, #8
{
    2886:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    2888:	d81e      	bhi.n	28c8 <z_arm_mpu_init+0x48>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    288a:	f7ff ffd1 	bl	2830 <arm_core_mpu_disable>
    288e:	4c11      	ldr	r4, [pc, #68]	; (28d4 <z_arm_mpu_init+0x54>)
    2890:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    2892:	2200      	movs	r2, #0
    2894:	4290      	cmp	r0, r2
    2896:	f101 010c 	add.w	r1, r1, #12
    289a:	d105      	bne.n	28a8 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    289c:	4b0e      	ldr	r3, [pc, #56]	; (28d8 <z_arm_mpu_init+0x58>)
    289e:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    28a0:	f7ff ffbc 	bl	281c <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    28a4:	2000      	movs	r0, #0
}
    28a6:	bd10      	pop	{r4, pc}
    28a8:	60a2      	str	r2, [r4, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    28aa:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    28ae:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    28b2:	4313      	orrs	r3, r2
    28b4:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    28b8:	60e3      	str	r3, [r4, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    28ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
    28be:	f043 0301 	orr.w	r3, r3, #1
    28c2:	6123      	str	r3, [r4, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    28c4:	3201      	adds	r2, #1
    28c6:	e7e5      	b.n	2894 <z_arm_mpu_init+0x14>
		return -1;
    28c8:	f04f 30ff 	mov.w	r0, #4294967295
    28cc:	e7eb      	b.n	28a6 <z_arm_mpu_init+0x26>
    28ce:	bf00      	nop
    28d0:	00006700 	.word	0x00006700
    28d4:	e000ed90 	.word	0xe000ed90
    28d8:	20000a10 	.word	0x20000a10

000028dc <printf>:

	return r;
}

int printf(const char *ZRESTRICT format, ...)
{
    28dc:	b40f      	push	{r0, r1, r2, r3}
    28de:	b507      	push	{r0, r1, r2, lr}
    28e0:	ab04      	add	r3, sp, #16
	va_list vargs;
	int     r;

	va_start(vargs, format);
	r = cbvprintf(fputc, DESC(stdout), format, vargs);
    28e2:	2102      	movs	r1, #2
{
    28e4:	f853 2b04 	ldr.w	r2, [r3], #4
	r = cbvprintf(fputc, DESC(stdout), format, vargs);
    28e8:	4804      	ldr	r0, [pc, #16]	; (28fc <printf+0x20>)
	va_start(vargs, format);
    28ea:	9301      	str	r3, [sp, #4]
	r = cbvprintf(fputc, DESC(stdout), format, vargs);
    28ec:	f7fe fdc0 	bl	1470 <cbvprintf>
	va_end(vargs);

	return r;
}
    28f0:	b003      	add	sp, #12
    28f2:	f85d eb04 	ldr.w	lr, [sp], #4
    28f6:	b004      	add	sp, #16
    28f8:	4770      	bx	lr
    28fa:	bf00      	nop
    28fc:	00005ab5 	.word	0x00005ab5

00002900 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    2900:	4b01      	ldr	r3, [pc, #4]	; (2908 <__stdout_hook_install+0x8>)
    2902:	6018      	str	r0, [r3, #0]
}
    2904:	4770      	bx	lr
    2906:	bf00      	nop
    2908:	20000024 	.word	0x20000024

0000290c <z_impl_zephyr_fputc>:

int z_impl_zephyr_fputc(int c, FILE *stream)
{
	return (stream == stdout || stream == stderr) ? _stdout_hook(c) : EOF;
    290c:	3902      	subs	r1, #2
    290e:	2901      	cmp	r1, #1
    2910:	d802      	bhi.n	2918 <z_impl_zephyr_fputc+0xc>
    2912:	4b03      	ldr	r3, [pc, #12]	; (2920 <z_impl_zephyr_fputc+0x14>)
    2914:	681b      	ldr	r3, [r3, #0]
    2916:	4718      	bx	r3
}
    2918:	f04f 30ff 	mov.w	r0, #4294967295
    291c:	4770      	bx	lr
    291e:	bf00      	nop
    2920:	20000024 	.word	0x20000024

00002924 <nordicsemi_nrf52_init>:
	__asm__ volatile(
    2924:	f04f 0320 	mov.w	r3, #32
    2928:	f3ef 8111 	mrs	r1, BASEPRI
    292c:	f383 8812 	msr	BASEPRI_MAX, r3
    2930:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    2934:	4a0f      	ldr	r2, [pc, #60]	; (2974 <nordicsemi_nrf52_init+0x50>)
    2936:	2301      	movs	r3, #1
    2938:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    293c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2940:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    2944:	4a0c      	ldr	r2, [pc, #48]	; (2978 <nordicsemi_nrf52_init+0x54>)
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    2946:	6812      	ldr	r2, [r2, #0]
    2948:	2a08      	cmp	r2, #8
    294a:	d108      	bne.n	295e <nordicsemi_nrf52_init+0x3a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    294c:	4a0b      	ldr	r2, [pc, #44]	; (297c <nordicsemi_nrf52_init+0x58>)
    294e:	6812      	ldr	r2, [r2, #0]
            {
                switch(var2)
    2950:	2a05      	cmp	r2, #5
    2952:	d804      	bhi.n	295e <nordicsemi_nrf52_init+0x3a>
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
    2954:	480a      	ldr	r0, [pc, #40]	; (2980 <nordicsemi_nrf52_init+0x5c>)
    2956:	5c82      	ldrb	r2, [r0, r2]
    2958:	b10a      	cbz	r2, 295e <nordicsemi_nrf52_init+0x3a>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
    295a:	4a0a      	ldr	r2, [pc, #40]	; (2984 <nordicsemi_nrf52_init+0x60>)
    295c:	6013      	str	r3, [r2, #0]
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    295e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2962:	2201      	movs	r2, #1
    2964:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
    2968:	f381 8811 	msr	BASEPRI, r1
    296c:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    2970:	2000      	movs	r0, #0
    2972:	4770      	bx	lr
    2974:	4001e000 	.word	0x4001e000
    2978:	10000130 	.word	0x10000130
    297c:	10000134 	.word	0x10000134
    2980:	00006a22 	.word	0x00006a22
    2984:	40000638 	.word	0x40000638

00002988 <sys_arch_reboot>:
    *p_gpregret = val;
    2988:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    298c:	b2c0      	uxtb	r0, r0
    298e:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    2992:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    2996:	4905      	ldr	r1, [pc, #20]	; (29ac <sys_arch_reboot+0x24>)
    2998:	4b05      	ldr	r3, [pc, #20]	; (29b0 <sys_arch_reboot+0x28>)
    299a:	68ca      	ldr	r2, [r1, #12]
    299c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    29a0:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    29a2:	60cb      	str	r3, [r1, #12]
    29a4:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    29a8:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    29aa:	e7fd      	b.n	29a8 <sys_arch_reboot+0x20>
    29ac:	e000ed00 	.word	0xe000ed00
    29b0:	05fa0004 	.word	0x05fa0004

000029b4 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    29b4:	b120      	cbz	r0, 29c0 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    29b6:	4b03      	ldr	r3, [pc, #12]	; (29c4 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    29b8:	0180      	lsls	r0, r0, #6
    29ba:	f043 0301 	orr.w	r3, r3, #1
    29be:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    29c0:	4770      	bx	lr
    29c2:	bf00      	nop
    29c4:	000066a0 	.word	0x000066a0

000029c8 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    29c8:	4a0e      	ldr	r2, [pc, #56]	; (2a04 <onoff_stop+0x3c>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    29ca:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    29cc:	1a84      	subs	r4, r0, r2
    29ce:	10a3      	asrs	r3, r4, #2
    29d0:	4c0d      	ldr	r4, [pc, #52]	; (2a08 <onoff_stop+0x40>)
    29d2:	435c      	muls	r4, r3
{
    29d4:	4605      	mov	r5, r0
    29d6:	b2e4      	uxtb	r4, r4
	err = set_off_state(&subdata->flags, ctx);
    29d8:	200c      	movs	r0, #12
    29da:	fb00 2004 	mla	r0, r0, r4, r2
{
    29de:	460e      	mov	r6, r1
	err = set_off_state(&subdata->flags, ctx);
    29e0:	2140      	movs	r1, #64	; 0x40
    29e2:	4408      	add	r0, r1
    29e4:	f003 f8c9 	bl	5b7a <set_off_state>
	if (err < 0) {
    29e8:	1e01      	subs	r1, r0, #0
    29ea:	db05      	blt.n	29f8 <onoff_stop+0x30>
	get_sub_config(dev, type)->stop();
    29ec:	4b07      	ldr	r3, [pc, #28]	; (2a0c <onoff_stop+0x44>)
    29ee:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
    29f2:	6863      	ldr	r3, [r4, #4]
    29f4:	4798      	blx	r3
	return 0;
    29f6:	2100      	movs	r1, #0
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
	notify(mgr, res);
    29f8:	4628      	mov	r0, r5
    29fa:	4633      	mov	r3, r6
}
    29fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    2a00:	4718      	bx	r3
    2a02:	bf00      	nop
    2a04:	20000890 	.word	0x20000890
    2a08:	b6db6db7 	.word	0xb6db6db7
    2a0c:	00006738 	.word	0x00006738

00002a10 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    2a10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    2a14:	4e10      	ldr	r6, [pc, #64]	; (2a58 <onoff_start+0x48>)
    2a16:	1b84      	subs	r4, r0, r6
    2a18:	10a3      	asrs	r3, r4, #2
    2a1a:	4c10      	ldr	r4, [pc, #64]	; (2a5c <onoff_start+0x4c>)
    2a1c:	435c      	muls	r4, r3
    2a1e:	b2e4      	uxtb	r4, r4
	err = set_starting_state(&subdata->flags, ctx);
    2a20:	250c      	movs	r5, #12
    2a22:	4365      	muls	r5, r4
{
    2a24:	4680      	mov	r8, r0
	err = set_starting_state(&subdata->flags, ctx);
    2a26:	f105 0040 	add.w	r0, r5, #64	; 0x40
{
    2a2a:	460f      	mov	r7, r1
	err = set_starting_state(&subdata->flags, ctx);
    2a2c:	4430      	add	r0, r6
    2a2e:	2140      	movs	r1, #64	; 0x40
    2a30:	f003 f8bc 	bl	5bac <set_starting_state>
	if (err < 0) {
    2a34:	1e01      	subs	r1, r0, #0
    2a36:	db09      	blt.n	2a4c <onoff_start+0x3c>
	subdata->cb = cb;
    2a38:	4a09      	ldr	r2, [pc, #36]	; (2a60 <onoff_start+0x50>)
    2a3a:	1973      	adds	r3, r6, r5
	subdata->user_data = user_data;
    2a3c:	e9c3 270e 	strd	r2, r7, [r3, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    2a40:	4b08      	ldr	r3, [pc, #32]	; (2a64 <onoff_start+0x54>)
    2a42:	f853 3034 	ldr.w	r3, [r3, r4, lsl #3]
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
    2a46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
    2a4a:	4718      	bx	r3
		notify(mgr, err);
    2a4c:	4640      	mov	r0, r8
    2a4e:	463b      	mov	r3, r7
}
    2a50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
    2a54:	4718      	bx	r3
    2a56:	bf00      	nop
    2a58:	20000890 	.word	0x20000890
    2a5c:	b6db6db7 	.word	0xb6db6db7
    2a60:	00005c0f 	.word	0x00005c0f
    2a64:	00006738 	.word	0x00006738

00002a68 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    2a68:	2200      	movs	r2, #0
{
    2a6a:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    2a6c:	2101      	movs	r1, #1
{
    2a6e:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    2a70:	4610      	mov	r0, r2
    2a72:	f7ff fc49 	bl	2308 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    2a76:	2000      	movs	r0, #0
    2a78:	f7ff fc28 	bl	22cc <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    2a7c:	480f      	ldr	r0, [pc, #60]	; (2abc <clk_init+0x54>)
    2a7e:	f000 feeb 	bl	3858 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    2a82:	4b0f      	ldr	r3, [pc, #60]	; (2ac0 <clk_init+0x58>)
    2a84:	4298      	cmp	r0, r3
    2a86:	d115      	bne.n	2ab4 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    2a88:	f003 f9ee 	bl	5e68 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    2a8c:	6926      	ldr	r6, [r4, #16]

		err = onoff_manager_init(get_onoff_manager(dev, i),
    2a8e:	490d      	ldr	r1, [pc, #52]	; (2ac4 <clk_init+0x5c>)
    2a90:	4630      	mov	r0, r6
    2a92:	f002 ff81 	bl	5998 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    2a96:	2800      	cmp	r0, #0
    2a98:	db0b      	blt.n	2ab2 <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    2a9a:	2501      	movs	r5, #1
    2a9c:	6435      	str	r5, [r6, #64]	; 0x40
						get_sub_data(dev, i);
    2a9e:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    2aa0:	4908      	ldr	r1, [pc, #32]	; (2ac4 <clk_init+0x5c>)
    2aa2:	f104 001c 	add.w	r0, r4, #28
    2aa6:	f002 ff77 	bl	5998 <onoff_manager_init>
		if (err < 0) {
    2aaa:	2800      	cmp	r0, #0
    2aac:	db01      	blt.n	2ab2 <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    2aae:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
    2ab0:	2000      	movs	r0, #0
}
    2ab2:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    2ab4:	f06f 0004 	mvn.w	r0, #4
    2ab8:	e7fb      	b.n	2ab2 <clk_init+0x4a>
    2aba:	bf00      	nop
    2abc:	00002afd 	.word	0x00002afd
    2ac0:	0bad0000 	.word	0x0bad0000
    2ac4:	00006748 	.word	0x00006748

00002ac8 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    2ac8:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    2aca:	230c      	movs	r3, #12
    2acc:	4809      	ldr	r0, [pc, #36]	; (2af4 <clkstarted_handle.constprop.0+0x2c>)
    2ace:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    2ad0:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    2ad2:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    2ad4:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
    2ad8:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    2ada:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
    2adc:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    2ade:	4418      	add	r0, r3
    2ae0:	f003 f882 	bl	5be8 <set_on_state>
	if (callback) {
    2ae4:	b12d      	cbz	r5, 2af2 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    2ae6:	4632      	mov	r2, r6
    2ae8:	462b      	mov	r3, r5
    2aea:	4803      	ldr	r0, [pc, #12]	; (2af8 <clkstarted_handle.constprop.0+0x30>)
}
    2aec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    2af0:	4718      	bx	r3
}
    2af2:	bd70      	pop	{r4, r5, r6, pc}
    2af4:	20000890 	.word	0x20000890
    2af8:	00006288 	.word	0x00006288

00002afc <clock_event_handler>:
	switch (event) {
    2afc:	b110      	cbz	r0, 2b04 <clock_event_handler+0x8>
    2afe:	2801      	cmp	r0, #1
    2b00:	d004      	beq.n	2b0c <clock_event_handler+0x10>
    2b02:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    2b04:	4b03      	ldr	r3, [pc, #12]	; (2b14 <clock_event_handler+0x18>)
    2b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    2b08:	075b      	lsls	r3, r3, #29
    2b0a:	d101      	bne.n	2b10 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    2b0c:	f7ff bfdc 	b.w	2ac8 <clkstarted_handle.constprop.0>
}
    2b10:	4770      	bx	lr
    2b12:	bf00      	nop
    2b14:	20000890 	.word	0x20000890

00002b18 <generic_hfclk_start>:
{
    2b18:	b508      	push	{r3, lr}
	__asm__ volatile(
    2b1a:	f04f 0320 	mov.w	r3, #32
    2b1e:	f3ef 8111 	mrs	r1, BASEPRI
    2b22:	f383 8812 	msr	BASEPRI_MAX, r3
    2b26:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    2b2a:	4a12      	ldr	r2, [pc, #72]	; (2b74 <generic_hfclk_start+0x5c>)
    2b2c:	6813      	ldr	r3, [r2, #0]
    2b2e:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    2b32:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    2b36:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    2b38:	d00c      	beq.n	2b54 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    2b3a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2b3e:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    2b42:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    2b46:	f013 0301 	ands.w	r3, r3, #1
    2b4a:	d003      	beq.n	2b54 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    2b4c:	480a      	ldr	r0, [pc, #40]	; (2b78 <generic_hfclk_start+0x60>)
    2b4e:	f003 f84b 	bl	5be8 <set_on_state>
			already_started = true;
    2b52:	2301      	movs	r3, #1
	__asm__ volatile(
    2b54:	f381 8811 	msr	BASEPRI, r1
    2b58:	f3bf 8f6f 	isb	sy
	if (already_started) {
    2b5c:	b123      	cbz	r3, 2b68 <generic_hfclk_start+0x50>
}
    2b5e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    2b62:	2000      	movs	r0, #0
    2b64:	f7ff bfb0 	b.w	2ac8 <clkstarted_handle.constprop.0>
}
    2b68:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    2b6c:	2001      	movs	r0, #1
    2b6e:	f000 be83 	b.w	3878 <nrfx_clock_start>
    2b72:	bf00      	nop
    2b74:	200008e0 	.word	0x200008e0
    2b78:	200008d0 	.word	0x200008d0

00002b7c <generic_hfclk_stop>:
    2b7c:	4b09      	ldr	r3, [pc, #36]	; (2ba4 <generic_hfclk_stop+0x28>)
    2b7e:	f3bf 8f5b 	dmb	ish
    2b82:	e853 2f00 	ldrex	r2, [r3]
    2b86:	f022 0102 	bic.w	r1, r2, #2
    2b8a:	e843 1000 	strex	r0, r1, [r3]
    2b8e:	2800      	cmp	r0, #0
    2b90:	d1f7      	bne.n	2b82 <generic_hfclk_stop+0x6>
    2b92:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    2b96:	07d3      	lsls	r3, r2, #31
    2b98:	d402      	bmi.n	2ba0 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    2b9a:	2001      	movs	r0, #1
    2b9c:	f000 be9e 	b.w	38dc <nrfx_clock_stop>
}
    2ba0:	4770      	bx	lr
    2ba2:	bf00      	nop
    2ba4:	200008e0 	.word	0x200008e0

00002ba8 <api_blocking_start>:
{
    2ba8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    2baa:	2200      	movs	r2, #0
    2bac:	2301      	movs	r3, #1
    2bae:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    2bb2:	4a09      	ldr	r2, [pc, #36]	; (2bd8 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    2bb4:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    2bb8:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    2bba:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    2bbe:	f003 f84c 	bl	5c5a <api_start>
	if (err < 0) {
    2bc2:	2800      	cmp	r0, #0
    2bc4:	db05      	blt.n	2bd2 <api_blocking_start+0x2a>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    2bc6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    2bca:	2300      	movs	r3, #0
    2bcc:	4668      	mov	r0, sp
    2bce:	f002 f989 	bl	4ee4 <z_impl_k_sem_take>
}
    2bd2:	b005      	add	sp, #20
    2bd4:	f85d fb04 	ldr.w	pc, [sp], #4
    2bd8:	00005c2d 	.word	0x00005c2d

00002bdc <z_nrf_clock_control_lf_on>:
{
    2bdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    2be0:	493a      	ldr	r1, [pc, #232]	; (2ccc <z_nrf_clock_control_lf_on+0xf0>)
    2be2:	f3bf 8f5b 	dmb	ish
    2be6:	4606      	mov	r6, r0
    2be8:	2201      	movs	r2, #1
    2bea:	e851 3f00 	ldrex	r3, [r1]
    2bee:	e841 2000 	strex	r0, r2, [r1]
    2bf2:	2800      	cmp	r0, #0
    2bf4:	d1f9      	bne.n	2bea <z_nrf_clock_control_lf_on+0xe>
    2bf6:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    2bfa:	b933      	cbnz	r3, 2c0a <z_nrf_clock_control_lf_on+0x2e>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    2bfc:	4934      	ldr	r1, [pc, #208]	; (2cd0 <z_nrf_clock_control_lf_on+0xf4>)
		err = onoff_request(mgr, &cli);
    2bfe:	4835      	ldr	r0, [pc, #212]	; (2cd4 <z_nrf_clock_control_lf_on+0xf8>)
    2c00:	604b      	str	r3, [r1, #4]
    2c02:	60cb      	str	r3, [r1, #12]
    2c04:	608a      	str	r2, [r1, #8]
    2c06:	f002 feda 	bl	59be <onoff_request>
	switch (start_mode) {
    2c0a:	1e73      	subs	r3, r6, #1
    2c0c:	2b01      	cmp	r3, #1
    2c0e:	d832      	bhi.n	2c76 <z_nrf_clock_control_lf_on+0x9a>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    2c10:	2e01      	cmp	r6, #1
    2c12:	d107      	bne.n	2c24 <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    2c14:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2c18:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    2c1c:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    2c20:	2b01      	cmp	r3, #1
    2c22:	d028      	beq.n	2c76 <z_nrf_clock_control_lf_on+0x9a>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    2c24:	f003 faab 	bl	617e <k_is_in_isr>
    2c28:	4604      	mov	r4, r0
    2c2a:	b918      	cbnz	r0, 2c34 <z_nrf_clock_control_lf_on+0x58>
	return !z_sys_post_kernel;
    2c2c:	4b2a      	ldr	r3, [pc, #168]	; (2cd8 <z_nrf_clock_control_lf_on+0xfc>)
	int key = isr_mode ? irq_lock() : 0;
    2c2e:	781b      	ldrb	r3, [r3, #0]
    2c30:	2b00      	cmp	r3, #0
    2c32:	d144      	bne.n	2cbe <z_nrf_clock_control_lf_on+0xe2>
	__asm__ volatile(
    2c34:	f04f 0320 	mov.w	r3, #32
    2c38:	f3ef 8511 	mrs	r5, BASEPRI
    2c3c:	f383 8812 	msr	BASEPRI_MAX, r3
    2c40:	f3bf 8f6f 	isb	sy
    2c44:	2401      	movs	r4, #1
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2c46:	4f25      	ldr	r7, [pc, #148]	; (2cdc <z_nrf_clock_control_lf_on+0x100>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2c48:	f8df 8094 	ldr.w	r8, [pc, #148]	; 2ce0 <z_nrf_clock_control_lf_on+0x104>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2c4c:	f8df 9094 	ldr.w	r9, [pc, #148]	; 2ce4 <z_nrf_clock_control_lf_on+0x108>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    2c50:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2c54:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    2c58:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    2c5c:	03d2      	lsls	r2, r2, #15
    2c5e:	d50c      	bpl.n	2c7a <z_nrf_clock_control_lf_on+0x9e>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    2c60:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    2c64:	2b01      	cmp	r3, #1
    2c66:	d001      	beq.n	2c6c <z_nrf_clock_control_lf_on+0x90>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    2c68:	2e01      	cmp	r6, #1
    2c6a:	d106      	bne.n	2c7a <z_nrf_clock_control_lf_on+0x9e>
	if (isr_mode) {
    2c6c:	b30c      	cbz	r4, 2cb2 <z_nrf_clock_control_lf_on+0xd6>
	__asm__ volatile(
    2c6e:	f385 8811 	msr	BASEPRI, r5
    2c72:	f3bf 8f6f 	isb	sy
}
    2c76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    2c7a:	b1ac      	cbz	r4, 2ca8 <z_nrf_clock_control_lf_on+0xcc>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    2c7c:	4628      	mov	r0, r5
    2c7e:	f7ff fabd 	bl	21fc <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    2c82:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2c86:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    2c8a:	2b00      	cmp	r3, #0
    2c8c:	d1e0      	bne.n	2c50 <z_nrf_clock_control_lf_on+0x74>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2c8e:	6839      	ldr	r1, [r7, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
    2c90:	2900      	cmp	r1, #0
    2c92:	d0dd      	beq.n	2c50 <z_nrf_clock_control_lf_on+0x74>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2c94:	603b      	str	r3, [r7, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    2c96:	683b      	ldr	r3, [r7, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
    2c98:	2301      	movs	r3, #1
    2c9a:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    2c9e:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2ca2:	f8c9 3000 	str.w	r3, [r9]
}
    2ca6:	e7d3      	b.n	2c50 <z_nrf_clock_control_lf_on+0x74>
	return z_impl_k_sleep(timeout);
    2ca8:	2100      	movs	r1, #0
    2caa:	2021      	movs	r0, #33	; 0x21
    2cac:	f002 f888 	bl	4dc0 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    2cb0:	e7e7      	b.n	2c82 <z_nrf_clock_control_lf_on+0xa6>
    p_reg->INTENSET = mask;
    2cb2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2cb6:	2202      	movs	r2, #2
    2cb8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    2cbc:	e7db      	b.n	2c76 <z_nrf_clock_control_lf_on+0x9a>
    p_reg->INTENCLR = mask;
    2cbe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2cc2:	2202      	movs	r2, #2
    2cc4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    2cc8:	4605      	mov	r5, r0
}
    2cca:	e7bc      	b.n	2c46 <z_nrf_clock_control_lf_on+0x6a>
    2ccc:	200008e4 	.word	0x200008e4
    2cd0:	20000880 	.word	0x20000880
    2cd4:	200008ac 	.word	0x200008ac
    2cd8:	20000e21 	.word	0x20000e21
    2cdc:	40000104 	.word	0x40000104
    2ce0:	e000e100 	.word	0xe000e100
    2ce4:	40000008 	.word	0x40000008

00002ce8 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    2ce8:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    2cea:	4b08      	ldr	r3, [pc, #32]	; (2d0c <uart_console_init+0x24>)
    2cec:	4808      	ldr	r0, [pc, #32]	; (2d10 <uart_console_init+0x28>)
    2cee:	6018      	str	r0, [r3, #0]
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
    2cf0:	f003 f925 	bl	5f3e <z_device_ready>
    2cf4:	b138      	cbz	r0, 2d06 <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
    2cf6:	4807      	ldr	r0, [pc, #28]	; (2d14 <uart_console_init+0x2c>)
    2cf8:	f7ff fe02 	bl	2900 <__stdout_hook_install>
	__printk_hook_install(console_out);
    2cfc:	4805      	ldr	r0, [pc, #20]	; (2d14 <uart_console_init+0x2c>)
    2cfe:	f7ff fa41 	bl	2184 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    2d02:	2000      	movs	r0, #0
}
    2d04:	bd08      	pop	{r3, pc}
		return -ENODEV;
    2d06:	f06f 0012 	mvn.w	r0, #18
    2d0a:	e7fb      	b.n	2d04 <uart_console_init+0x1c>
    2d0c:	200008e8 	.word	0x200008e8
    2d10:	000062e8 	.word	0x000062e8
    2d14:	00002d19 	.word	0x00002d19

00002d18 <console_out>:
	if ('\n' == c) {
    2d18:	280a      	cmp	r0, #10
{
    2d1a:	b538      	push	{r3, r4, r5, lr}
    2d1c:	4d07      	ldr	r5, [pc, #28]	; (2d3c <console_out+0x24>)
    2d1e:	4604      	mov	r4, r0
	if ('\n' == c) {
    2d20:	d104      	bne.n	2d2c <console_out+0x14>
    2d22:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    2d24:	6883      	ldr	r3, [r0, #8]
    2d26:	210d      	movs	r1, #13
    2d28:	685b      	ldr	r3, [r3, #4]
    2d2a:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    2d2c:	6828      	ldr	r0, [r5, #0]
    2d2e:	6883      	ldr	r3, [r0, #8]
    2d30:	b2e1      	uxtb	r1, r4
    2d32:	685b      	ldr	r3, [r3, #4]
    2d34:	4798      	blx	r3
}
    2d36:	4620      	mov	r0, r4
    2d38:	bd38      	pop	{r3, r4, r5, pc}
    2d3a:	bf00      	nop
    2d3c:	200008e8 	.word	0x200008e8

00002d40 <nrfx_gpio_handler>:
			dev = DEVICE_DT_INST_GET(i); \
		}

	if (0) {
	} /* Followed by else if from FOREACH macro. Done to avoid return statement in macro.  */
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    2d40:	0942      	lsrs	r2, r0, #5
}

static void nrfx_gpio_handler(nrfx_gpiote_pin_t abs_pin,
			      nrfx_gpiote_trigger_t trigger,
			      void *context)
{
    2d42:	b570      	push	{r4, r5, r6, lr}
    2d44:	4603      	mov	r3, r0
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    2d46:	d002      	beq.n	2d4e <nrfx_gpio_handler+0xe>
    2d48:	2a01      	cmp	r2, #1
    2d4a:	d01d      	beq.n	2d88 <nrfx_gpio_handler+0x48>

	struct gpio_nrfx_data *data = get_port_data(port);
	sys_slist_t *list = &data->callbacks;

	gpio_fire_callbacks(list, port, BIT(pin));
}
    2d4c:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    2d4e:	4e0f      	ldr	r6, [pc, #60]	; (2d8c <nrfx_gpio_handler+0x4c>)
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    2d50:	6932      	ldr	r2, [r6, #16]
    2d52:	6851      	ldr	r1, [r2, #4]
    2d54:	2900      	cmp	r1, #0
    2d56:	d0f9      	beq.n	2d4c <nrfx_gpio_handler+0xc>
    2d58:	680c      	ldr	r4, [r1, #0]
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    2d5a:	f003 031f 	and.w	r3, r3, #31
	gpio_fire_callbacks(list, port, BIT(pin));
    2d5e:	2501      	movs	r5, #1
    2d60:	2c00      	cmp	r4, #0
    2d62:	fa05 f503 	lsl.w	r5, r5, r3
	return node->next;
    2d66:	bf38      	it	cc
    2d68:	2400      	movcc	r4, #0
		if (cb->pin_mask & pins) {
    2d6a:	688a      	ldr	r2, [r1, #8]
    2d6c:	402a      	ands	r2, r5
    2d6e:	d002      	beq.n	2d76 <nrfx_gpio_handler+0x36>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    2d70:	684b      	ldr	r3, [r1, #4]
    2d72:	4630      	mov	r0, r6
    2d74:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    2d76:	2c00      	cmp	r4, #0
    2d78:	d0e8      	beq.n	2d4c <nrfx_gpio_handler+0xc>
    2d7a:	6823      	ldr	r3, [r4, #0]
    2d7c:	2b00      	cmp	r3, #0
    2d7e:	bf38      	it	cc
    2d80:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    2d82:	4621      	mov	r1, r4
    2d84:	461c      	mov	r4, r3
    2d86:	e7f0      	b.n	2d6a <nrfx_gpio_handler+0x2a>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    2d88:	4e01      	ldr	r6, [pc, #4]	; (2d90 <nrfx_gpio_handler+0x50>)
    2d8a:	e7e1      	b.n	2d50 <nrfx_gpio_handler+0x10>
    2d8c:	000062a0 	.word	0x000062a0
    2d90:	000062b8 	.word	0x000062b8

00002d94 <gpio_nrfx_pin_interrupt_configure>:
{
    2d94:	b530      	push	{r4, r5, lr}
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    2d96:	6840      	ldr	r0, [r0, #4]
    2d98:	7b04      	ldrb	r4, [r0, #12]
    2d9a:	f001 051f 	and.w	r5, r1, #31
	if (mode == GPIO_INT_MODE_DISABLED) {
    2d9e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    2da2:	ea45 1544 	orr.w	r5, r5, r4, lsl #5
{
    2da6:	b085      	sub	sp, #20
    2da8:	f04f 0400 	mov.w	r4, #0
	if (mode == GPIO_INT_MODE_DISABLED) {
    2dac:	d104      	bne.n	2db8 <gpio_nrfx_pin_interrupt_configure+0x24>
		nrfx_gpiote_trigger_disable(abs_pin);
    2dae:	4628      	mov	r0, r5
    2db0:	f001 f87a 	bl	3ea8 <nrfx_gpiote_trigger_disable>
	return 0;
    2db4:	2000      	movs	r0, #0
    2db6:	e032      	b.n	2e1e <gpio_nrfx_pin_interrupt_configure+0x8a>
	if (mode == GPIO_INT_MODE_LEVEL) {
    2db8:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
	nrfx_gpiote_trigger_config_t trigger_config = {
    2dbc:	e9cd 4402 	strd	r4, r4, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    2dc0:	d12f      	bne.n	2e22 <gpio_nrfx_pin_interrupt_configure+0x8e>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    2dc2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
    2dc6:	bf0c      	ite	eq
    2dc8:	2304      	moveq	r3, #4
    2dca:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
    2dcc:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    2dd0:	6883      	ldr	r3, [r0, #8]
    2dd2:	fa23 f101 	lsr.w	r1, r3, r1
    2dd6:	07c9      	lsls	r1, r1, #31
    2dd8:	d42f      	bmi.n	2e3a <gpio_nrfx_pin_interrupt_configure+0xa6>
    2dda:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    2dde:	d12c      	bne.n	2e3a <gpio_nrfx_pin_interrupt_configure+0xa6>

    return pin_number >> 5;
    2de0:	096a      	lsrs	r2, r5, #5
        case 1: return NRF_P1;
    2de2:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
    2de4:	f005 031f 	and.w	r3, r5, #31
        case 1: return NRF_P1;
    2de8:	4a1c      	ldr	r2, [pc, #112]	; (2e5c <gpio_nrfx_pin_interrupt_configure+0xc8>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    2dea:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
        case 1: return NRF_P1;
    2dee:	bf18      	it	ne
    2df0:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    2df4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    2df8:	07db      	lsls	r3, r3, #31
    2dfa:	d41e      	bmi.n	2e3a <gpio_nrfx_pin_interrupt_configure+0xa6>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    2dfc:	f10d 0407 	add.w	r4, sp, #7
    2e00:	4621      	mov	r1, r4
    2e02:	4628      	mov	r0, r5
    2e04:	f000 ffbc 	bl	3d80 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    2e08:	4b15      	ldr	r3, [pc, #84]	; (2e60 <gpio_nrfx_pin_interrupt_configure+0xcc>)
    2e0a:	4298      	cmp	r0, r3
    2e0c:	d114      	bne.n	2e38 <gpio_nrfx_pin_interrupt_configure+0xa4>
			err = nrfx_gpiote_channel_alloc(&ch);
    2e0e:	4620      	mov	r0, r4
    2e10:	f001 f800 	bl	3e14 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    2e14:	4b13      	ldr	r3, [pc, #76]	; (2e64 <gpio_nrfx_pin_interrupt_configure+0xd0>)
    2e16:	4298      	cmp	r0, r3
    2e18:	d00e      	beq.n	2e38 <gpio_nrfx_pin_interrupt_configure+0xa4>
				return -ENOMEM;
    2e1a:	f06f 000b 	mvn.w	r0, #11
}
    2e1e:	b005      	add	sp, #20
    2e20:	bd30      	pop	{r4, r5, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    2e22:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
    2e26:	d005      	beq.n	2e34 <gpio_nrfx_pin_interrupt_configure+0xa0>
    2e28:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
    2e2c:	bf0c      	ite	eq
    2e2e:	2302      	moveq	r3, #2
    2e30:	2301      	movne	r3, #1
    2e32:	e7cb      	b.n	2dcc <gpio_nrfx_pin_interrupt_configure+0x38>
    2e34:	2303      	movs	r3, #3
    2e36:	e7c9      	b.n	2dcc <gpio_nrfx_pin_interrupt_configure+0x38>
		trigger_config.p_in_channel = &ch;
    2e38:	9403      	str	r4, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    2e3a:	2300      	movs	r3, #0
    2e3c:	4619      	mov	r1, r3
    2e3e:	aa02      	add	r2, sp, #8
    2e40:	4628      	mov	r0, r5
    2e42:	f000 fe7b 	bl	3b3c <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    2e46:	4b07      	ldr	r3, [pc, #28]	; (2e64 <gpio_nrfx_pin_interrupt_configure+0xd0>)
    2e48:	4298      	cmp	r0, r3
    2e4a:	d104      	bne.n	2e56 <gpio_nrfx_pin_interrupt_configure+0xc2>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    2e4c:	2101      	movs	r1, #1
    2e4e:	4628      	mov	r0, r5
    2e50:	f000 ffe6 	bl	3e20 <nrfx_gpiote_trigger_enable>
    2e54:	e7ae      	b.n	2db4 <gpio_nrfx_pin_interrupt_configure+0x20>
		return -EIO;
    2e56:	f06f 0004 	mvn.w	r0, #4
    2e5a:	e7e0      	b.n	2e1e <gpio_nrfx_pin_interrupt_configure+0x8a>
    2e5c:	50000300 	.word	0x50000300
    2e60:	0bad0004 	.word	0x0bad0004
    2e64:	0bad0000 	.word	0x0bad0000

00002e68 <gpio_nrfx_init>:

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    2e68:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    2e6a:	f000 ffc3 	bl	3df4 <nrfx_gpiote_is_init>
    2e6e:	4604      	mov	r4, r0
    2e70:	b968      	cbnz	r0, 2e8e <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    2e72:	f000 ff97 	bl	3da4 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    2e76:	4b08      	ldr	r3, [pc, #32]	; (2e98 <gpio_nrfx_init+0x30>)
    2e78:	4298      	cmp	r0, r3
    2e7a:	d10a      	bne.n	2e92 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    2e7c:	4807      	ldr	r0, [pc, #28]	; (2e9c <gpio_nrfx_init+0x34>)
    2e7e:	4621      	mov	r1, r4
    2e80:	f000 ff78 	bl	3d74 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    2e84:	4622      	mov	r2, r4
    2e86:	2105      	movs	r1, #5
    2e88:	2006      	movs	r0, #6
    2e8a:	f7ff fa3d 	bl	2308 <z_arm_irq_priority_set>
		return 0;
    2e8e:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    2e90:	bd10      	pop	{r4, pc}
		return -EIO;
    2e92:	f06f 0004 	mvn.w	r0, #4
    2e96:	e7fb      	b.n	2e90 <gpio_nrfx_init+0x28>
    2e98:	0bad0000 	.word	0x0bad0000
    2e9c:	00002d41 	.word	0x00002d41

00002ea0 <gpio_nrfx_pin_configure>:
{
    2ea0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
    2ea4:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    2ea6:	7b3b      	ldrb	r3, [r7, #12]
    2ea8:	f001 051f 	and.w	r5, r1, #31
{
    2eac:	b085      	sub	sp, #20
    2eae:	460e      	mov	r6, r1
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    2eb0:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
    2eb4:	4614      	mov	r4, r2
    2eb6:	b9ca      	cbnz	r2, 2eec <gpio_nrfx_pin_configure+0x4c>
	err = nrfx_gpiote_channel_get(pin, &ch);
    2eb8:	a902      	add	r1, sp, #8
    2eba:	4628      	mov	r0, r5
    2ebc:	f000 ff60 	bl	3d80 <nrfx_gpiote_channel_get>
    2ec0:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
    2ec2:	4628      	mov	r0, r5
    2ec4:	f001 f812 	bl	3eec <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
    2ec8:	4b48      	ldr	r3, [pc, #288]	; (2fec <gpio_nrfx_pin_configure+0x14c>)
    2eca:	4298      	cmp	r0, r3
    2ecc:	d004      	beq.n	2ed8 <gpio_nrfx_pin_configure+0x38>
		return -EIO;
    2ece:	f06f 0004 	mvn.w	r0, #4
}
    2ed2:	b005      	add	sp, #20
    2ed4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (free_ch) {
    2ed8:	4284      	cmp	r4, r0
    2eda:	d105      	bne.n	2ee8 <gpio_nrfx_pin_configure+0x48>
		err = nrfx_gpiote_channel_free(ch);
    2edc:	f89d 0008 	ldrb.w	r0, [sp, #8]
    2ee0:	f000 ff92 	bl	3e08 <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    2ee4:	42a0      	cmp	r0, r4
    2ee6:	d1f2      	bne.n	2ece <gpio_nrfx_pin_configure+0x2e>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    2ee8:	2000      	movs	r0, #0
    2eea:	e7f2      	b.n	2ed2 <gpio_nrfx_pin_configure+0x32>
	nrfx_gpiote_trigger_config_t trigger_config = {
    2eec:	f04f 0900 	mov.w	r9, #0
	err = nrfx_gpiote_channel_get(pin, &ch);
    2ef0:	f10d 0103 	add.w	r1, sp, #3
    2ef4:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
    2ef6:	e9cd 9902 	strd	r9, r9, [sp, #8]
	err = nrfx_gpiote_channel_get(pin, &ch);
    2efa:	f000 ff41 	bl	3d80 <nrfx_gpiote_channel_get>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    2efe:	464b      	mov	r3, r9
	err = nrfx_gpiote_channel_get(pin, &ch);
    2f00:	4680      	mov	r8, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    2f02:	aa02      	add	r2, sp, #8
    2f04:	4649      	mov	r1, r9
    2f06:	4628      	mov	r0, r5
    2f08:	f000 fe18 	bl	3b3c <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    2f0c:	4b37      	ldr	r3, [pc, #220]	; (2fec <gpio_nrfx_pin_configure+0x14c>)
    2f0e:	4298      	cmp	r0, r3
    2f10:	d002      	beq.n	2f18 <gpio_nrfx_pin_configure+0x78>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    2f12:	f06f 0015 	mvn.w	r0, #21
    2f16:	e7dc      	b.n	2ed2 <gpio_nrfx_pin_configure+0x32>
	if (free_ch) {
    2f18:	4580      	cmp	r8, r0
    2f1a:	d103      	bne.n	2f24 <gpio_nrfx_pin_configure+0x84>
		err = nrfx_gpiote_channel_free(ch);
    2f1c:	f89d 0003 	ldrb.w	r0, [sp, #3]
    2f20:	f000 ff72 	bl	3e08 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    2f24:	05a3      	lsls	r3, r4, #22
    2f26:	d54e      	bpl.n	2fc6 <gpio_nrfx_pin_configure+0x126>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    2f28:	4b31      	ldr	r3, [pc, #196]	; (2ff0 <gpio_nrfx_pin_configure+0x150>)
    2f2a:	4a32      	ldr	r2, [pc, #200]	; (2ff4 <gpio_nrfx_pin_configure+0x154>)
    2f2c:	4023      	ands	r3, r4
    2f2e:	4293      	cmp	r3, r2
    2f30:	d03a      	beq.n	2fa8 <gpio_nrfx_pin_configure+0x108>
    2f32:	d80c      	bhi.n	2f4e <gpio_nrfx_pin_configure+0xae>
    2f34:	2b06      	cmp	r3, #6
    2f36:	d014      	beq.n	2f62 <gpio_nrfx_pin_configure+0xc2>
    2f38:	d804      	bhi.n	2f44 <gpio_nrfx_pin_configure+0xa4>
    2f3a:	b193      	cbz	r3, 2f62 <gpio_nrfx_pin_configure+0xc2>
    2f3c:	2b02      	cmp	r3, #2
    2f3e:	d1e8      	bne.n	2f12 <gpio_nrfx_pin_configure+0x72>
    2f40:	2304      	movs	r3, #4
    2f42:	e00e      	b.n	2f62 <gpio_nrfx_pin_configure+0xc2>
    2f44:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    2f48:	d1e3      	bne.n	2f12 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_H0S1;
    2f4a:	2301      	movs	r3, #1
    2f4c:	e009      	b.n	2f62 <gpio_nrfx_pin_configure+0xc2>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    2f4e:	4a2a      	ldr	r2, [pc, #168]	; (2ff8 <gpio_nrfx_pin_configure+0x158>)
    2f50:	4293      	cmp	r3, r2
    2f52:	d02b      	beq.n	2fac <gpio_nrfx_pin_configure+0x10c>
    2f54:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
    2f58:	d02a      	beq.n	2fb0 <gpio_nrfx_pin_configure+0x110>
    2f5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    2f5e:	d1d8      	bne.n	2f12 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_S0H1;
    2f60:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
    2f62:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    2f66:	f484 7380 	eor.w	r3, r4, #256	; 0x100
    2f6a:	f3c3 2300 	ubfx	r3, r3, #8, #1
	if (flags & GPIO_PULL_UP) {
    2f6e:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    2f70:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLDOWN;
    2f74:	bf54      	ite	pl
    2f76:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    2f7a:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    2f7c:	0521      	lsls	r1, r4, #20
		nrfx_gpiote_output_config_t output_config = {
    2f7e:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    2f82:	d517      	bpl.n	2fb4 <gpio_nrfx_pin_configure+0x114>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    2f84:	687b      	ldr	r3, [r7, #4]
    2f86:	2101      	movs	r1, #1
    2f88:	fa01 f606 	lsl.w	r6, r1, r6
    p_reg->OUTSET = set_mask;
    2f8c:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    2f90:	2200      	movs	r2, #0
    2f92:	a901      	add	r1, sp, #4
    2f94:	4628      	mov	r0, r5
    2f96:	f000 fe7d 	bl	3c94 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    2f9a:	4b14      	ldr	r3, [pc, #80]	; (2fec <gpio_nrfx_pin_configure+0x14c>)
    2f9c:	4298      	cmp	r0, r3
    2f9e:	bf14      	ite	ne
    2fa0:	f06f 0015 	mvnne.w	r0, #21
    2fa4:	2000      	moveq	r0, #0
    2fa6:	e794      	b.n	2ed2 <gpio_nrfx_pin_configure+0x32>
		*drive = NRF_GPIO_PIN_H0D1;
    2fa8:	2307      	movs	r3, #7
    2faa:	e7da      	b.n	2f62 <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_D0H1;
    2fac:	2305      	movs	r3, #5
    2fae:	e7d8      	b.n	2f62 <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_H0H1;
    2fb0:	2303      	movs	r3, #3
    2fb2:	e7d6      	b.n	2f62 <gpio_nrfx_pin_configure+0xc2>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    2fb4:	0562      	lsls	r2, r4, #21
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    2fb6:	bf41      	itttt	mi
    2fb8:	687b      	ldrmi	r3, [r7, #4]
    2fba:	2101      	movmi	r1, #1
    2fbc:	fa01 f606 	lslmi.w	r6, r1, r6
    p_reg->OUTCLR = clr_mask;
    2fc0:	f8c3 650c 	strmi.w	r6, [r3, #1292]	; 0x50c
}
    2fc4:	e7e4      	b.n	2f90 <gpio_nrfx_pin_configure+0xf0>
	if (flags & GPIO_PULL_UP) {
    2fc6:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    2fc8:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
    2fcc:	bf54      	ite	pl
    2fce:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
    2fd2:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    2fd4:	461a      	mov	r2, r3
    2fd6:	a901      	add	r1, sp, #4
    2fd8:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
    2fda:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    2fde:	f000 fdad 	bl	3b3c <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    2fe2:	4b02      	ldr	r3, [pc, #8]	; (2fec <gpio_nrfx_pin_configure+0x14c>)
    2fe4:	4298      	cmp	r0, r3
    2fe6:	f43f af7f 	beq.w	2ee8 <gpio_nrfx_pin_configure+0x48>
    2fea:	e792      	b.n	2f12 <gpio_nrfx_pin_configure+0x72>
    2fec:	0bad0000 	.word	0x0bad0000
    2ff0:	00f00006 	.word	0x00f00006
    2ff4:	00100006 	.word	0x00100006
    2ff8:	00400002 	.word	0x00400002

00002ffc <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    2ffc:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    2ffe:	794b      	ldrb	r3, [r1, #5]
    3000:	2b01      	cmp	r3, #1
    3002:	d026      	beq.n	3052 <uarte_nrfx_configure+0x56>
    3004:	2b03      	cmp	r3, #3
    3006:	d121      	bne.n	304c <uarte_nrfx_configure+0x50>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    3008:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    300a:	798b      	ldrb	r3, [r1, #6]
    300c:	2b03      	cmp	r3, #3
    300e:	d11d      	bne.n	304c <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    3010:	79cc      	ldrb	r4, [r1, #7]
    3012:	b10c      	cbz	r4, 3018 <uarte_nrfx_configure+0x1c>
    3014:	2c01      	cmp	r4, #1
    3016:	d119      	bne.n	304c <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    3018:	790a      	ldrb	r2, [r1, #4]
    301a:	b112      	cbz	r2, 3022 <uarte_nrfx_configure+0x26>
    301c:	2a02      	cmp	r2, #2
    301e:	d115      	bne.n	304c <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    3020:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    3022:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    3024:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    3026:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    302a:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
    302c:	d065      	beq.n	30fa <uarte_nrfx_configure+0xfe>
    302e:	d82d      	bhi.n	308c <uarte_nrfx_configure+0x90>
    3030:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    3034:	d064      	beq.n	3100 <uarte_nrfx_configure+0x104>
    3036:	d816      	bhi.n	3066 <uarte_nrfx_configure+0x6a>
    3038:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    303c:	d062      	beq.n	3104 <uarte_nrfx_configure+0x108>
    303e:	d80a      	bhi.n	3056 <uarte_nrfx_configure+0x5a>
    3040:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    3044:	d061      	beq.n	310a <uarte_nrfx_configure+0x10e>
    3046:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    304a:	d061      	beq.n	3110 <uarte_nrfx_configure+0x114>
    304c:	f06f 0085 	mvn.w	r0, #133	; 0x85
    3050:	e052      	b.n	30f8 <uarte_nrfx_configure+0xfc>
	switch (cfg->stop_bits) {
    3052:	2600      	movs	r6, #0
    3054:	e7d9      	b.n	300a <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    3056:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    305a:	d05c      	beq.n	3116 <uarte_nrfx_configure+0x11a>
    305c:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    3060:	d1f4      	bne.n	304c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    3062:	4b37      	ldr	r3, [pc, #220]	; (3140 <uarte_nrfx_configure+0x144>)
    3064:	e03c      	b.n	30e0 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    3066:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    306a:	d057      	beq.n	311c <uarte_nrfx_configure+0x120>
    306c:	d807      	bhi.n	307e <uarte_nrfx_configure+0x82>
    306e:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    3072:	d055      	beq.n	3120 <uarte_nrfx_configure+0x124>
    3074:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    3078:	d1e8      	bne.n	304c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    307a:	4b32      	ldr	r3, [pc, #200]	; (3144 <uarte_nrfx_configure+0x148>)
    307c:	e030      	b.n	30e0 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    307e:	f647 2712 	movw	r7, #31250	; 0x7a12
    3082:	42bb      	cmp	r3, r7
    3084:	d1e2      	bne.n	304c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    3086:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    308a:	e029      	b.n	30e0 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    308c:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    3090:	d048      	beq.n	3124 <uarte_nrfx_configure+0x128>
    3092:	d813      	bhi.n	30bc <uarte_nrfx_configure+0xc0>
    3094:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    3098:	d047      	beq.n	312a <uarte_nrfx_configure+0x12e>
    309a:	d809      	bhi.n	30b0 <uarte_nrfx_configure+0xb4>
    309c:	f64d 27c0 	movw	r7, #56000	; 0xdac0
    30a0:	42bb      	cmp	r3, r7
    30a2:	d044      	beq.n	312e <uarte_nrfx_configure+0x132>
    30a4:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    30a8:	d1d0      	bne.n	304c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    30aa:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    30ae:	e017      	b.n	30e0 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    30b0:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    30b4:	d1ca      	bne.n	304c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    30b6:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    30ba:	e011      	b.n	30e0 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    30bc:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    30c0:	d038      	beq.n	3134 <uarte_nrfx_configure+0x138>
    30c2:	d808      	bhi.n	30d6 <uarte_nrfx_configure+0xda>
    30c4:	4f20      	ldr	r7, [pc, #128]	; (3148 <uarte_nrfx_configure+0x14c>)
    30c6:	42bb      	cmp	r3, r7
    30c8:	d037      	beq.n	313a <uarte_nrfx_configure+0x13e>
    30ca:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    30ce:	d1bd      	bne.n	304c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    30d0:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    30d4:	e004      	b.n	30e0 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    30d6:	4f1d      	ldr	r7, [pc, #116]	; (314c <uarte_nrfx_configure+0x150>)
    30d8:	42bb      	cmp	r3, r7
    30da:	d1b7      	bne.n	304c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    30dc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    30e0:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
    30e4:	6903      	ldr	r3, [r0, #16]
    30e6:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
    30e8:	4334      	orrs	r4, r6
    30ea:	4322      	orrs	r2, r4
    30ec:	3304      	adds	r3, #4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    30ee:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    30f2:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    30f6:	2000      	movs	r0, #0
}
    30f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    30fa:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    30fe:	e7ef      	b.n	30e0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    3100:	4b13      	ldr	r3, [pc, #76]	; (3150 <uarte_nrfx_configure+0x154>)
    3102:	e7ed      	b.n	30e0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    3104:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    3108:	e7ea      	b.n	30e0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
    310a:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    310e:	e7e7      	b.n	30e0 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    3110:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    3114:	e7e4      	b.n	30e0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    3116:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    311a:	e7e1      	b.n	30e0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    311c:	4b0d      	ldr	r3, [pc, #52]	; (3154 <uarte_nrfx_configure+0x158>)
    311e:	e7df      	b.n	30e0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    3120:	4b0d      	ldr	r3, [pc, #52]	; (3158 <uarte_nrfx_configure+0x15c>)
    3122:	e7dd      	b.n	30e0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    3124:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    3128:	e7da      	b.n	30e0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    312a:	4b0c      	ldr	r3, [pc, #48]	; (315c <uarte_nrfx_configure+0x160>)
    312c:	e7d8      	b.n	30e0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    312e:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    3132:	e7d5      	b.n	30e0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    3134:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    3138:	e7d2      	b.n	30e0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    313a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    313e:	e7cf      	b.n	30e0 <uarte_nrfx_configure+0xe4>
    3140:	0013b000 	.word	0x0013b000
    3144:	004ea000 	.word	0x004ea000
    3148:	0003d090 	.word	0x0003d090
    314c:	000f4240 	.word	0x000f4240
    3150:	00275000 	.word	0x00275000
    3154:	0075c000 	.word	0x0075c000
    3158:	003af000 	.word	0x003af000
    315c:	013a9000 	.word	0x013a9000

00003160 <nrf_gpio_cfg_input>:
    *p_pin = pin_number & 0x1F;
    3160:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
    3164:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3166:	2801      	cmp	r0, #1
        case 1: return NRF_P1;
    3168:	4b04      	ldr	r3, [pc, #16]	; (317c <nrf_gpio_cfg_input+0x1c>)
    reg->PIN_CNF[pin_number] = cnf;
    316a:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
        case 1: return NRF_P1;
    316e:	bf18      	it	ne
    3170:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    3174:	0089      	lsls	r1, r1, #2
    reg->PIN_CNF[pin_number] = cnf;
    3176:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    317a:	4770      	bx	lr
    317c:	50000300 	.word	0x50000300

00003180 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    3180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = get_dev_data(dev);
    3182:	6906      	ldr	r6, [r0, #16]
{
    3184:	4605      	mov	r5, r0
    3186:	460f      	mov	r7, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    3188:	f002 fff9 	bl	617e <k_is_in_isr>
    318c:	b910      	cbnz	r0, 3194 <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
    318e:	4b2c      	ldr	r3, [pc, #176]	; (3240 <uarte_nrfx_poll_out+0xc0>)
	int key;

	if (isr_mode) {
    3190:	781b      	ldrb	r3, [r3, #0]
    3192:	b983      	cbnz	r3, 31b6 <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    3194:	f04f 0320 	mov.w	r3, #32
    3198:	f3ef 8411 	mrs	r4, BASEPRI
    319c:	f383 8812 	msr	BASEPRI_MAX, r3
    31a0:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
    31a4:	4628      	mov	r0, r5
    31a6:	f002 fe0e 	bl	5dc6 <is_tx_ready>
    31aa:	bb28      	cbnz	r0, 31f8 <uarte_nrfx_poll_out+0x78>
	__asm__ volatile(
    31ac:	f384 8811 	msr	BASEPRI, r4
    31b0:	f3bf 8f6f 	isb	sy
}
    31b4:	e7ee      	b.n	3194 <uarte_nrfx_poll_out+0x14>
{
    31b6:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    31b8:	4628      	mov	r0, r5
    31ba:	f002 fe04 	bl	5dc6 <is_tx_ready>
    31be:	b970      	cbnz	r0, 31de <uarte_nrfx_poll_out+0x5e>
    31c0:	2001      	movs	r0, #1
    31c2:	f002 fe5c 	bl	5e7e <nrfx_busy_wait>
    31c6:	3c01      	subs	r4, #1
    31c8:	d1f6      	bne.n	31b8 <uarte_nrfx_poll_out+0x38>
    31ca:	2100      	movs	r1, #0
    31cc:	2021      	movs	r0, #33	; 0x21
    31ce:	f001 fdf7 	bl	4dc0 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    31d2:	e7f0      	b.n	31b6 <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    31d4:	f384 8811 	msr	BASEPRI, r4
    31d8:	f3bf 8f6f 	isb	sy
}
    31dc:	e7f5      	b.n	31ca <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
    31de:	f04f 0320 	mov.w	r3, #32
    31e2:	f3ef 8411 	mrs	r4, BASEPRI
    31e6:	f383 8812 	msr	BASEPRI_MAX, r3
    31ea:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    31ee:	4628      	mov	r0, r5
    31f0:	f002 fde9 	bl	5dc6 <is_tx_ready>
    31f4:	2800      	cmp	r0, #0
    31f6:	d0ed      	beq.n	31d4 <uarte_nrfx_poll_out+0x54>
		}
	} else {
		key = wait_tx_ready(dev);
	}

	data->char_out = c;
    31f8:	f806 7f10 	strb.w	r7, [r6, #16]!
	const struct uarte_nrfx_config *config = get_dev_config(dev);
    31fc:	6869      	ldr	r1, [r5, #4]
	return config->uarte_regs;
    31fe:	680b      	ldr	r3, [r1, #0]
NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    p_reg->TXD.MAXCNT = length;
    3200:	2201      	movs	r2, #1
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    3202:	f8c3 6544 	str.w	r6, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    3206:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    320a:	2200      	movs	r2, #0
    320c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    3210:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    3214:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    3218:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    321c:	684a      	ldr	r2, [r1, #4]
    321e:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    3220:	bf41      	itttt	mi
    3222:	2208      	movmi	r2, #8
    3224:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
    3228:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
    322c:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3230:	2201      	movs	r2, #1
    3232:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
    3234:	f384 8811 	msr	BASEPRI, r4
    3238:	f3bf 8f6f 	isb	sy
	tx_start(dev, &data->char_out, 1);

	irq_unlock(key);
}
    323c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    323e:	bf00      	nop
    3240:	20000e21 	.word	0x20000e21

00003244 <nrf_gpio_cfg_output>:
    *p_pin = pin_number & 0x1F;
    3244:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
    3248:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    324a:	2801      	cmp	r0, #1
        case 1: return NRF_P1;
    324c:	4b04      	ldr	r3, [pc, #16]	; (3260 <nrf_gpio_cfg_output+0x1c>)
    reg->PIN_CNF[pin_number] = cnf;
    324e:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
        case 1: return NRF_P1;
    3252:	bf18      	it	ne
    3254:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    3258:	2103      	movs	r1, #3
    325a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    325e:	4770      	bx	lr
    3260:	50000300 	.word	0x50000300

00003264 <nrf_gpio_pin_set>:
    *p_pin = pin_number & 0x1F;
    3264:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
    3268:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    326a:	2801      	cmp	r0, #1
        case 1: return NRF_P1;
    326c:	4b04      	ldr	r3, [pc, #16]	; (3280 <nrf_gpio_pin_set+0x1c>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    326e:	f04f 0201 	mov.w	r2, #1
        case 1: return NRF_P1;
    3272:	bf18      	it	ne
    3274:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    3278:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
    327a:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
}
    327e:	4770      	bx	lr
    3280:	50000300 	.word	0x50000300

00003284 <uarte_instance_init.isra.0>:
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
    3284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct uarte_nrfx_config *config = get_dev_config(dev);
    3288:	f8d0 8004 	ldr.w	r8, [r0, #4]
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = get_dev_data(dev);
    328c:	6907      	ldr	r7, [r0, #16]
	return config->uarte_regs;
    328e:	f8d8 4000 	ldr.w	r4, [r8]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    3292:	2300      	movs	r3, #0
    3294:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);

	nrf_uarte_disable(uarte);

	data->dev = dev;
    3298:	6038      	str	r0, [r7, #0]
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);
    329a:	6845      	ldr	r5, [r0, #4]
static int uarte_instance_init(const struct device *dev,
    329c:	4606      	mov	r6, r0
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    329e:	68e8      	ldr	r0, [r5, #12]
    32a0:	1c42      	adds	r2, r0, #1
    32a2:	d004      	beq.n	32ae <uarte_instance_init.isra.0+0x2a>
        nrf_gpio_pin_set(pin_number);
    32a4:	f7ff ffde 	bl	3264 <nrf_gpio_pin_set>
			nrf_gpio_cfg_output(cfg->tx_pin);
    32a8:	68e8      	ldr	r0, [r5, #12]
    32aa:	f7ff ffcb 	bl	3244 <nrf_gpio_cfg_output>
		if (cfg->rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    32ae:	6928      	ldr	r0, [r5, #16]
    32b0:	1c43      	adds	r3, r0, #1
    32b2:	d006      	beq.n	32c2 <uarte_instance_init.isra.0+0x3e>
			nrf_gpio_cfg_input(cfg->rx_pin,
    32b4:	7f2b      	ldrb	r3, [r5, #28]
    32b6:	2b00      	cmp	r3, #0
    32b8:	bf14      	ite	ne
    32ba:	2103      	movne	r1, #3
    32bc:	2100      	moveq	r1, #0
    32be:	f7ff ff4f 	bl	3160 <nrf_gpio_cfg_input>
		if (cfg->rts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    32c2:	6968      	ldr	r0, [r5, #20]
    32c4:	1c42      	adds	r2, r0, #1
    32c6:	d004      	beq.n	32d2 <uarte_instance_init.isra.0+0x4e>
    32c8:	f7ff ffcc 	bl	3264 <nrf_gpio_pin_set>
			nrf_gpio_cfg_output(cfg->rts_pin);
    32cc:	6968      	ldr	r0, [r5, #20]
    32ce:	f7ff ffb9 	bl	3244 <nrf_gpio_cfg_output>
		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    32d2:	69a8      	ldr	r0, [r5, #24]
    32d4:	1c43      	adds	r3, r0, #1
    32d6:	d006      	beq.n	32e6 <uarte_instance_init.isra.0+0x62>
			nrf_gpio_cfg_input(cfg->cts_pin,
    32d8:	7f6b      	ldrb	r3, [r5, #29]
    32da:	2b00      	cmp	r3, #0
    32dc:	bf14      	ite	ne
    32de:	2103      	movne	r1, #3
    32e0:	2100      	moveq	r1, #0
    32e2:	f7ff ff3d 	bl	3160 <nrf_gpio_cfg_input>
	nrf_uarte_txrx_pins_set(cfg->uarte_regs, cfg->tx_pin, cfg->rx_pin);
    32e6:	e9d5 1203 	ldrd	r1, r2, [r5, #12]
    32ea:	682b      	ldr	r3, [r5, #0]
    p_reg->PSEL.TXD = pseltxd;
    32ec:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
    32f0:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	nrf_uarte_hwfc_pins_set(cfg->uarte_regs, cfg->rts_pin, cfg->cts_pin);
    32f4:	e9d5 1205 	ldrd	r1, r2, [r5, #20]
    p_reg->PSEL.RTS = pselrts;
    32f8:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    32fc:	6931      	ldr	r1, [r6, #16]
    p_reg->PSEL.CTS = pselcts;
    32fe:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    3302:	3104      	adds	r1, #4
    3304:	4630      	mov	r0, r6
    3306:	f7ff fe79 	bl	2ffc <uarte_nrfx_configure>
	if (err) {
    330a:	4605      	mov	r5, r0
    330c:	2800      	cmp	r0, #0
    330e:	d146      	bne.n	339e <uarte_instance_init.isra.0+0x11a>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    3310:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    3314:	0799      	lsls	r1, r3, #30
    3316:	d519      	bpl.n	334c <uarte_instance_init.isra.0+0xc8>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    3318:	f107 0012 	add.w	r0, r7, #18
    331c:	f000 fee2 	bl	40e4 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    3320:	4b22      	ldr	r3, [pc, #136]	; (33ac <uarte_instance_init.isra.0+0x128>)
    3322:	4298      	cmp	r0, r3
    3324:	d13e      	bne.n	33a4 <uarte_instance_init.isra.0+0x120>
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    3326:	7cb8      	ldrb	r0, [r7, #18]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    3328:	00c3      	lsls	r3, r0, #3
    332a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    332e:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
    3332:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    3336:	f504 7190 	add.w	r1, r4, #288	; 0x120
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    333a:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    333e:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
    3342:	4a1b      	ldr	r2, [pc, #108]	; (33b0 <uarte_instance_init.isra.0+0x12c>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    3344:	2301      	movs	r3, #1
    3346:	4083      	lsls	r3, r0
    3348:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    334c:	2308      	movs	r3, #8
    334e:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (!cfg->disable_rx) {
    3352:	f898 3008 	ldrb.w	r3, [r8, #8]
    3356:	b95b      	cbnz	r3, 3370 <uarte_instance_init.isra.0+0xec>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3358:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    335c:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    3360:	f107 0311 	add.w	r3, r7, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    3364:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    3368:	2301      	movs	r3, #1
    336a:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    336e:	6023      	str	r3, [r4, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    3370:	f8d8 3004 	ldr.w	r3, [r8, #4]
    3374:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
    3376:	bf5c      	itt	pl
    3378:	f44f 7280 	movpl.w	r2, #256	; 0x100
    337c:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    3380:	06db      	lsls	r3, r3, #27
    3382:	bf44      	itt	mi
    3384:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    3388:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    338c:	3710      	adds	r7, #16
    p_reg->TXD.MAXCNT = length;
    338e:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    3390:	f8c4 7544 	str.w	r7, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    3394:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3398:	2301      	movs	r3, #1
    339a:	60a3      	str	r3, [r4, #8]
    339c:	60e3      	str	r3, [r4, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    339e:	4628      	mov	r0, r5
    33a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EIO;
    33a4:	f06f 0504 	mvn.w	r5, #4
    33a8:	e7f9      	b.n	339e <uarte_instance_init.isra.0+0x11a>
    33aa:	bf00      	nop
    33ac:	0bad0000 	.word	0x0bad0000
    33b0:	4001f000 	.word	0x4001f000

000033b4 <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    33b4:	4919      	ldr	r1, [pc, #100]	; (341c <sys_clock_timeout_handler+0x68>)
{
    33b6:	b570      	push	{r4, r5, r6, lr}
    33b8:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
    33ba:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    33be:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
    33c0:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    33c4:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    33c8:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
    33ca:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    33ce:	f04f 0500 	mov.w	r5, #0
    33d2:	d20a      	bcs.n	33ea <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    33d4:	4b12      	ldr	r3, [pc, #72]	; (3420 <sys_clock_timeout_handler+0x6c>)
    33d6:	6819      	ldr	r1, [r3, #0]
    33d8:	060a      	lsls	r2, r1, #24
    33da:	0a0b      	lsrs	r3, r1, #8
    33dc:	1992      	adds	r2, r2, r6
    33de:	4911      	ldr	r1, [pc, #68]	; (3424 <sys_clock_timeout_handler+0x70>)
    33e0:	f143 0300 	adc.w	r3, r3, #0
    33e4:	e9c1 2300 	strd	r2, r3, [r1]
		return true;
    33e8:	2501      	movs	r5, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    33ea:	f001 ff0d 	bl	5208 <sys_clock_announce>
    p_reg->CC[ch] = cc_val;
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
    33ee:	00a3      	lsls	r3, r4, #2
    33f0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    33f4:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    33f8:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
    33fc:	42b2      	cmp	r2, r6
    33fe:	d10b      	bne.n	3418 <sys_clock_timeout_handler+0x64>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
    3400:	b91d      	cbnz	r5, 340a <sys_clock_timeout_handler+0x56>
    p_reg->CC[ch] = cc_val;
    3402:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    3406:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    340a:	4b07      	ldr	r3, [pc, #28]	; (3428 <sys_clock_timeout_handler+0x74>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    340c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    3410:	fa00 f404 	lsl.w	r4, r0, r4
    3414:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
    3418:	bd70      	pop	{r4, r5, r6, pc}
    341a:	bf00      	nop
    341c:	200001b8 	.word	0x200001b8
    3420:	2000090c 	.word	0x2000090c
    3424:	200001a0 	.word	0x200001a0
    3428:	40011000 	.word	0x40011000

0000342c <compare_int_lock>:
{
    342c:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    342e:	2301      	movs	r3, #1
    3430:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3432:	4a11      	ldr	r2, [pc, #68]	; (3478 <compare_int_lock+0x4c>)
    3434:	f3bf 8f5b 	dmb	ish
    3438:	43dc      	mvns	r4, r3
    343a:	e852 1f00 	ldrex	r1, [r2]
    343e:	ea01 0c04 	and.w	ip, r1, r4
    3442:	e842 ce00 	strex	lr, ip, [r2]
    3446:	f1be 0f00 	cmp.w	lr, #0
    344a:	d1f6      	bne.n	343a <compare_int_lock+0xe>
    344c:	f3bf 8f5b 	dmb	ish
	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3450:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    3454:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
    3458:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    345c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    3460:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    3464:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3468:	f3bf 8f6f 	isb	sy
	return prev & BIT(chan);
    346c:	420b      	tst	r3, r1
}
    346e:	bf14      	ite	ne
    3470:	2001      	movne	r0, #1
    3472:	2000      	moveq	r0, #0
    3474:	bd10      	pop	{r4, pc}
    3476:	bf00      	nop
    3478:	20000908 	.word	0x20000908

0000347c <compare_int_unlock.part.0>:
		atomic_or(&int_mask, BIT(chan));
    347c:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    347e:	4a12      	ldr	r2, [pc, #72]	; (34c8 <compare_int_unlock.part.0+0x4c>)
    3480:	f3bf 8f5b 	dmb	ish
    3484:	4083      	lsls	r3, r0
    3486:	e852 1f00 	ldrex	r1, [r2]
    348a:	4319      	orrs	r1, r3
    348c:	e842 1c00 	strex	ip, r1, [r2]
    3490:	f1bc 0f00 	cmp.w	ip, #0
    3494:	d1f7      	bne.n	3486 <compare_int_unlock.part.0+0xa>
    3496:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
    349a:	4a0c      	ldr	r2, [pc, #48]	; (34cc <compare_int_unlock.part.0+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    349c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    34a0:	4083      	lsls	r3, r0
    34a2:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    34a6:	4b0a      	ldr	r3, [pc, #40]	; (34d0 <compare_int_unlock.part.0+0x54>)
    34a8:	f3bf 8f5b 	dmb	ish
    34ac:	681b      	ldr	r3, [r3, #0]
    34ae:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    34b2:	fa23 f000 	lsr.w	r0, r3, r0
    34b6:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    34b8:	bf42      	ittt	mi
    34ba:	4b06      	ldrmi	r3, [pc, #24]	; (34d4 <compare_int_unlock.part.0+0x58>)
    34bc:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
    34c0:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    34c4:	4770      	bx	lr
    34c6:	bf00      	nop
    34c8:	20000908 	.word	0x20000908
    34cc:	40011000 	.word	0x40011000
    34d0:	20000904 	.word	0x20000904
    34d4:	e000e100 	.word	0xe000e100

000034d8 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    34d8:	4b0d      	ldr	r3, [pc, #52]	; (3510 <z_nrf_rtc_timer_read+0x38>)
    34da:	681b      	ldr	r3, [r3, #0]
    34dc:	0a19      	lsrs	r1, r3, #8
    34de:	0618      	lsls	r0, r3, #24
  __ASM volatile ("dmb 0xF":::"memory");
    34e0:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
    34e4:	4b0b      	ldr	r3, [pc, #44]	; (3514 <z_nrf_rtc_timer_read+0x3c>)
    34e6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    34ea:	18c0      	adds	r0, r0, r3
    34ec:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    34f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    34f4:	d20a      	bcs.n	350c <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    34f6:	4b08      	ldr	r3, [pc, #32]	; (3518 <z_nrf_rtc_timer_read+0x40>)
    34f8:	e9d3 2300 	ldrd	r2, r3, [r3]
    34fc:	4299      	cmp	r1, r3
    34fe:	bf08      	it	eq
    3500:	4290      	cmpeq	r0, r2
    3502:	d203      	bcs.n	350c <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    3504:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    3508:	f141 0100 	adc.w	r1, r1, #0
}
    350c:	4770      	bx	lr
    350e:	bf00      	nop
    3510:	2000090c 	.word	0x2000090c
    3514:	40011000 	.word	0x40011000
    3518:	200001a0 	.word	0x200001a0

0000351c <compare_set>:
{
    351c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3520:	b085      	sub	sp, #20
    3522:	4616      	mov	r6, r2
    3524:	461f      	mov	r7, r3
    3526:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
    3528:	f7ff ff80 	bl	342c <compare_int_lock>
    352c:	9001      	str	r0, [sp, #4]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    352e:	f7ff ffd3 	bl	34d8 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    3532:	42b9      	cmp	r1, r7
    3534:	bf08      	it	eq
    3536:	42b0      	cmpeq	r0, r6
    3538:	d27f      	bcs.n	363a <compare_set+0x11e>
		if (target_time - curr_time > COUNTER_SPAN) {
    353a:	ebb6 0800 	subs.w	r8, r6, r0
    353e:	eb67 0901 	sbc.w	r9, r7, r1
    3542:	2300      	movs	r3, #0
    3544:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    3548:	454b      	cmp	r3, r9
    354a:	bf08      	it	eq
    354c:	4542      	cmpeq	r2, r8
    354e:	f0c0 8085 	bcc.w	365c <compare_set+0x140>
		if (target_time != cc_data[chan].target_time) {
    3552:	4b44      	ldr	r3, [pc, #272]	; (3664 <compare_set+0x148>)
    3554:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    3558:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    355c:	429f      	cmp	r7, r3
    355e:	bf08      	it	eq
    3560:	4296      	cmpeq	r6, r2
    3562:	d054      	beq.n	360e <compare_set+0xf2>
    3564:	ea4f 0985 	mov.w	r9, r5, lsl #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3568:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
    356c:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    3570:	f105 0850 	add.w	r8, r5, #80	; 0x50
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3574:	fa0b f205 	lsl.w	r2, fp, r5
    3578:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    357c:	ea4f 0888 	mov.w	r8, r8, lsl #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3580:	fa1f f888 	uxth.w	r8, r8
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3584:	9202      	str	r2, [sp, #8]
     return p_reg->COUNTER;
    3586:	4a38      	ldr	r2, [pc, #224]	; (3668 <compare_set+0x14c>)
    return p_reg->CC[ch];
    3588:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
	return absolute_time & COUNTER_MAX;
    358c:	f026 437f 	bic.w	r3, r6, #4278190080	; 0xff000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3590:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
    3594:	f508 3888 	add.w	r8, r8, #69632	; 0x11000
	uint32_t cc_val = abs_val & COUNTER_MAX;
    3598:	461c      	mov	r4, r3
    359a:	4693      	mov	fp, r2
     return p_reg->COUNTER;
    359c:	f8d2 a504 	ldr.w	sl, [r2, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    35a0:	eba0 000a 	sub.w	r0, r0, sl
    35a4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    35a8:	f02a 417f 	bic.w	r1, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    35ac:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
    35ae:	f8c9 1540 	str.w	r1, [r9, #1344]	; 0x540
    35b2:	d105      	bne.n	35c0 <compare_set+0xa4>
    35b4:	9303      	str	r3, [sp, #12]
	z_impl_k_busy_wait(usec_to_wait);
    35b6:	2013      	movs	r0, #19
    35b8:	f002 fe2b 	bl	6212 <z_impl_k_busy_wait>
    35bc:	4a2a      	ldr	r2, [pc, #168]	; (3668 <compare_set+0x14c>)
    35be:	9b03      	ldr	r3, [sp, #12]
    p_reg->EVTENSET = mask;
    35c0:	9902      	ldr	r1, [sp, #8]
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    35c2:	f10a 0c02 	add.w	ip, sl, #2
	return (a - b) & COUNTER_MAX;
    35c6:	eba4 000c 	sub.w	r0, r4, ip
    35ca:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
    35ce:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    35d2:	bf88      	it	hi
    35d4:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    35d6:	2000      	movs	r0, #0
    35d8:	f8c8 0000 	str.w	r0, [r8]
    35dc:	f8d8 0000 	ldr.w	r0, [r8]
    p_reg->EVTENSET = mask;
    35e0:	f8cb 1344 	str.w	r1, [fp, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    35e4:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    35e8:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    35ec:	f8db 0504 	ldr.w	r0, [fp, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    35f0:	4582      	cmp	sl, r0
    35f2:	d006      	beq.n	3602 <compare_set+0xe6>
	return (a - b) & COUNTER_MAX;
    35f4:	1a20      	subs	r0, r4, r0
    35f6:	3802      	subs	r0, #2
    35f8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    35fc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3600:	d819      	bhi.n	3636 <compare_set+0x11a>
	return (a - b) & COUNTER_MAX;
    3602:	1ae4      	subs	r4, r4, r3
    3604:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
    3608:	1932      	adds	r2, r6, r4
    360a:	f147 0300 	adc.w	r3, r7, #0
	cc_data[chan].target_time = target_time;
    360e:	4c15      	ldr	r4, [pc, #84]	; (3664 <compare_set+0x148>)
    3610:	0129      	lsls	r1, r5, #4
    3612:	eb04 1005 	add.w	r0, r4, r5, lsl #4
    3616:	e9c0 2302 	strd	r2, r3, [r0, #8]
	cc_data[chan].callback = handler;
    361a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
	cc_data[chan].user_context = user_data;
    361c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
	cc_data[chan].callback = handler;
    361e:	5062      	str	r2, [r4, r1]
	cc_data[chan].user_context = user_data;
    3620:	6043      	str	r3, [r0, #4]
	return ret;
    3622:	2400      	movs	r4, #0
	if (key) {
    3624:	9b01      	ldr	r3, [sp, #4]
    3626:	b113      	cbz	r3, 362e <compare_set+0x112>
    3628:	4628      	mov	r0, r5
    362a:	f7ff ff27 	bl	347c <compare_int_unlock.part.0>
}
    362e:	4620      	mov	r0, r4
    3630:	b005      	add	sp, #20
    3632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3636:	4620      	mov	r0, r4
    3638:	e7b0      	b.n	359c <compare_set+0x80>
		atomic_or(&force_isr_mask, BIT(chan));
    363a:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    363c:	4a0b      	ldr	r2, [pc, #44]	; (366c <compare_set+0x150>)
    363e:	f3bf 8f5b 	dmb	ish
    3642:	40ab      	lsls	r3, r5
    3644:	e852 1f00 	ldrex	r1, [r2]
    3648:	4319      	orrs	r1, r3
    364a:	e842 1000 	strex	r0, r1, [r2]
    364e:	2800      	cmp	r0, #0
    3650:	d1f8      	bne.n	3644 <compare_set+0x128>
    3652:	f3bf 8f5b 	dmb	ish
    3656:	4632      	mov	r2, r6
    3658:	463b      	mov	r3, r7
    365a:	e7d8      	b.n	360e <compare_set+0xf2>
			return -EINVAL;
    365c:	f06f 0415 	mvn.w	r4, #21
    3660:	e7e0      	b.n	3624 <compare_set+0x108>
    3662:	bf00      	nop
    3664:	200001a8 	.word	0x200001a8
    3668:	40011000 	.word	0x40011000
    366c:	20000904 	.word	0x20000904

00003670 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    3670:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    3672:	4b19      	ldr	r3, [pc, #100]	; (36d8 <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
    3674:	4d19      	ldr	r5, [pc, #100]	; (36dc <sys_clock_driver_init+0x6c>)
    3676:	2400      	movs	r4, #0
    3678:	f04f 30ff 	mov.w	r0, #4294967295
    367c:	f04f 31ff 	mov.w	r1, #4294967295
    3680:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    3684:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    3688:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    368c:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3690:	4b13      	ldr	r3, [pc, #76]	; (36e0 <sys_clock_driver_init+0x70>)
    3692:	2602      	movs	r6, #2
    3694:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    3698:	2101      	movs	r1, #1
    369a:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
    369e:	2011      	movs	r0, #17
    36a0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    36a4:	4622      	mov	r2, r4
    36a6:	f7fe fe2f 	bl	2308 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    36aa:	2011      	movs	r0, #17
    36ac:	f7fe fe0e 	bl	22cc <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    36b0:	4a0c      	ldr	r2, [pc, #48]	; (36e4 <sys_clock_driver_init+0x74>)
    36b2:	2301      	movs	r3, #1
    36b4:	6013      	str	r3, [r2, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    36b6:	4a0c      	ldr	r2, [pc, #48]	; (36e8 <sys_clock_driver_init+0x78>)
    36b8:	602b      	str	r3, [r5, #0]
    36ba:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    36bc:	4b0b      	ldr	r3, [pc, #44]	; (36ec <sys_clock_driver_init+0x7c>)
    36be:	4a0c      	ldr	r2, [pc, #48]	; (36f0 <sys_clock_driver_init+0x80>)
    36c0:	9300      	str	r3, [sp, #0]
    36c2:	9401      	str	r4, [sp, #4]
    36c4:	2300      	movs	r3, #0
    36c6:	4620      	mov	r0, r4
    36c8:	f7ff ff28 	bl	351c <compare_set>

	z_nrf_clock_control_lf_on(mode);
    36cc:	4630      	mov	r0, r6
    36ce:	f7ff fa85 	bl	2bdc <z_nrf_clock_control_lf_on>

	return 0;
}
    36d2:	4620      	mov	r0, r4
    36d4:	b002      	add	sp, #8
    36d6:	bd70      	pop	{r4, r5, r6, pc}
    36d8:	200001a8 	.word	0x200001a8
    36dc:	40011000 	.word	0x40011000
    36e0:	e000e100 	.word	0xe000e100
    36e4:	40011008 	.word	0x40011008
    36e8:	20000908 	.word	0x20000908
    36ec:	000033b5 	.word	0x000033b5
    36f0:	007fffff 	.word	0x007fffff

000036f4 <rtc_nrf_isr>:
{
    36f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    36f8:	4c34      	ldr	r4, [pc, #208]	; (37cc <rtc_nrf_isr+0xd8>)
    36fa:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    36fe:	079a      	lsls	r2, r3, #30
    3700:	d509      	bpl.n	3716 <rtc_nrf_isr+0x22>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3702:	4b33      	ldr	r3, [pc, #204]	; (37d0 <rtc_nrf_isr+0xdc>)
    3704:	681a      	ldr	r2, [r3, #0]
    3706:	b132      	cbz	r2, 3716 <rtc_nrf_isr+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3708:	2200      	movs	r2, #0
    370a:	601a      	str	r2, [r3, #0]
		overflow_cnt++;
    370c:	4a31      	ldr	r2, [pc, #196]	; (37d4 <rtc_nrf_isr+0xe0>)
    370e:	681b      	ldr	r3, [r3, #0]
    3710:	6813      	ldr	r3, [r2, #0]
    3712:	3301      	adds	r3, #1
    3714:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    3716:	f04f 0320 	mov.w	r3, #32
    371a:	f3ef 8211 	mrs	r2, BASEPRI
    371e:	f383 8812 	msr	BASEPRI_MAX, r3
    3722:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
    3726:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    372a:	03db      	lsls	r3, r3, #15
    372c:	d512      	bpl.n	3754 <rtc_nrf_isr+0x60>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    372e:	f3bf 8f5b 	dmb	ish
    3732:	4b29      	ldr	r3, [pc, #164]	; (37d8 <rtc_nrf_isr+0xe4>)
    3734:	e853 1f00 	ldrex	r1, [r3]
    3738:	f021 0001 	bic.w	r0, r1, #1
    373c:	e843 0600 	strex	r6, r0, [r3]
    3740:	2e00      	cmp	r6, #0
    3742:	d1f7      	bne.n	3734 <rtc_nrf_isr+0x40>
    3744:	f3bf 8f5b 	dmb	ish
    3748:	4b24      	ldr	r3, [pc, #144]	; (37dc <rtc_nrf_isr+0xe8>)
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    374a:	2900      	cmp	r1, #0
    374c:	d136      	bne.n	37bc <rtc_nrf_isr+0xc8>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    374e:	6819      	ldr	r1, [r3, #0]
		if (result) {
    3750:	2900      	cmp	r1, #0
    3752:	d133      	bne.n	37bc <rtc_nrf_isr+0xc8>
{
    3754:	2300      	movs	r3, #0
	__asm__ volatile(
    3756:	f382 8811 	msr	BASEPRI, r2
    375a:	f3bf 8f6f 	isb	sy
	if (channel_processing_check_and_clear(chan)) {
    375e:	b353      	cbz	r3, 37b6 <rtc_nrf_isr+0xc2>
		curr_time = z_nrf_rtc_timer_read();
    3760:	f7ff feba 	bl	34d8 <z_nrf_rtc_timer_read>
    3764:	4606      	mov	r6, r0
	__asm__ volatile(
    3766:	f04f 0320 	mov.w	r3, #32
    376a:	f3ef 8011 	mrs	r0, BASEPRI
    376e:	f383 8812 	msr	BASEPRI_MAX, r3
    3772:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    3776:	4b1a      	ldr	r3, [pc, #104]	; (37e0 <rtc_nrf_isr+0xec>)
    3778:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
    377c:	4549      	cmp	r1, r9
    377e:	bf08      	it	eq
    3780:	4546      	cmpeq	r6, r8
    3782:	f04f 0200 	mov.w	r2, #0
    3786:	d31e      	bcc.n	37c6 <rtc_nrf_isr+0xd2>
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    3788:	f04f 36ff 	mov.w	r6, #4294967295
    378c:	f04f 37ff 	mov.w	r7, #4294967295
			user_context = cc_data[chan].user_context;
    3790:	e9d3 1500 	ldrd	r1, r5, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    3794:	e9c3 6702 	strd	r6, r7, [r3, #8]
			cc_data[chan].callback = NULL;
    3798:	601a      	str	r2, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    379a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    379e:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
	__asm__ volatile(
    37a2:	f380 8811 	msr	BASEPRI, r0
    37a6:	f3bf 8f6f 	isb	sy
		if (handler) {
    37aa:	b121      	cbz	r1, 37b6 <rtc_nrf_isr+0xc2>
			handler(chan, expire_time, user_context);
    37ac:	9500      	str	r5, [sp, #0]
    37ae:	4642      	mov	r2, r8
    37b0:	464b      	mov	r3, r9
    37b2:	2000      	movs	r0, #0
    37b4:	4788      	blx	r1
}
    37b6:	b003      	add	sp, #12
    37b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    37bc:	2100      	movs	r1, #0
    37be:	6019      	str	r1, [r3, #0]
    37c0:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    37c2:	2301      	movs	r3, #1
}
    37c4:	e7c7      	b.n	3756 <rtc_nrf_isr+0x62>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    37c6:	4611      	mov	r1, r2
    37c8:	e7eb      	b.n	37a2 <rtc_nrf_isr+0xae>
    37ca:	bf00      	nop
    37cc:	40011000 	.word	0x40011000
    37d0:	40011104 	.word	0x40011104
    37d4:	2000090c 	.word	0x2000090c
    37d8:	20000904 	.word	0x20000904
    37dc:	40011140 	.word	0x40011140
    37e0:	200001a8 	.word	0x200001a8

000037e4 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    37e4:	4b14      	ldr	r3, [pc, #80]	; (3838 <sys_clock_set_timeout+0x54>)
{
    37e6:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    37e8:	f1b0 3fff 	cmp.w	r0, #4294967295
    37ec:	bf08      	it	eq
    37ee:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    37f0:	1e44      	subs	r4, r0, #1
    37f2:	2c00      	cmp	r4, #0
    37f4:	dd1e      	ble.n	3834 <sys_clock_set_timeout+0x50>
    37f6:	429c      	cmp	r4, r3
    37f8:	bfa8      	it	ge
    37fa:	461c      	movge	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    37fc:	f7ff fe6c 	bl	34d8 <z_nrf_rtc_timer_read>
    3800:	4b0e      	ldr	r3, [pc, #56]	; (383c <sys_clock_set_timeout+0x58>)
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    3802:	490f      	ldr	r1, [pc, #60]	; (3840 <sys_clock_set_timeout+0x5c>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    3804:	e9d3 2300 	ldrd	r2, r3, [r3]
    3808:	1a80      	subs	r0, r0, r2
		ticks = 0;
    380a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    380e:	bf28      	it	cs
    3810:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    3812:	3001      	adds	r0, #1
    3814:	4404      	add	r4, r0
	uint64_t target_time = cyc + last_count;
    3816:	4808      	ldr	r0, [pc, #32]	; (3838 <sys_clock_set_timeout+0x54>)
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    3818:	9100      	str	r1, [sp, #0]
	uint64_t target_time = cyc + last_count;
    381a:	4284      	cmp	r4, r0
    381c:	bf28      	it	cs
    381e:	4604      	movcs	r4, r0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    3820:	1912      	adds	r2, r2, r4
    3822:	f04f 0000 	mov.w	r0, #0
    3826:	9001      	str	r0, [sp, #4]
    3828:	f143 0300 	adc.w	r3, r3, #0
    382c:	f7ff fe76 	bl	351c <compare_set>
}
    3830:	b002      	add	sp, #8
    3832:	bd10      	pop	{r4, pc}
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    3834:	2400      	movs	r4, #0
    3836:	e7e1      	b.n	37fc <sys_clock_set_timeout+0x18>
    3838:	007fffff 	.word	0x007fffff
    383c:	200001b8 	.word	0x200001b8
    3840:	000033b5 	.word	0x000033b5

00003844 <sys_clock_elapsed>:
{
    3844:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    3846:	f7ff fe47 	bl	34d8 <z_nrf_rtc_timer_read>
    384a:	4b02      	ldr	r3, [pc, #8]	; (3854 <sys_clock_elapsed+0x10>)
    384c:	681b      	ldr	r3, [r3, #0]
}
    384e:	1ac0      	subs	r0, r0, r3
    3850:	bd08      	pop	{r3, pc}
    3852:	bf00      	nop
    3854:	200001b8 	.word	0x200001b8

00003858 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    3858:	4b04      	ldr	r3, [pc, #16]	; (386c <nrfx_clock_init+0x14>)
    385a:	791a      	ldrb	r2, [r3, #4]
    385c:	b922      	cbnz	r2, 3868 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    385e:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    3860:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    3862:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    3864:	4802      	ldr	r0, [pc, #8]	; (3870 <nrfx_clock_init+0x18>)
    3866:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    3868:	4802      	ldr	r0, [pc, #8]	; (3874 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    386a:	4770      	bx	lr
    386c:	20000910 	.word	0x20000910
    3870:	0bad0000 	.word	0x0bad0000
    3874:	0bad000c 	.word	0x0bad000c

00003878 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    3878:	b110      	cbz	r0, 3880 <nrfx_clock_start+0x8>
    387a:	2801      	cmp	r0, #1
    387c:	d020      	beq.n	38c0 <nrfx_clock_start+0x48>
    387e:	4770      	bx	lr
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    3880:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3884:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    3888:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
    388c:	f411 3f80 	tst.w	r1, #65536	; 0x10000
    3890:	4619      	mov	r1, r3
    3892:	d011      	beq.n	38b8 <nrfx_clock_start+0x40>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    3894:	f002 0203 	and.w	r2, r2, #3
    {
        case NRF_CLOCK_DOMAIN_LFCLK:
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
            {
                nrf_clock_lfclk_t lfclksrc;
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
    3898:	2a01      	cmp	r2, #1
    389a:	d10d      	bne.n	38b8 <nrfx_clock_start+0x40>
    p_reg->LFCLKSRC = (uint32_t)(source);
    389c:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    38a0:	4b0c      	ldr	r3, [pc, #48]	; (38d4 <nrfx_clock_start+0x5c>)
    38a2:	2200      	movs	r2, #0
    38a4:	601a      	str	r2, [r3, #0]
    38a6:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    38a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    38ac:	2202      	movs	r2, #2
    38ae:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    38b2:	2201      	movs	r2, #1
    38b4:	609a      	str	r2, [r3, #8]
}
    38b6:	4770      	bx	lr
    p_reg->LFCLKSRC = (uint32_t)(source);
    38b8:	2300      	movs	r3, #0
    38ba:	f8c1 3518 	str.w	r3, [r1, #1304]	; 0x518
}
    38be:	e7ef      	b.n	38a0 <nrfx_clock_start+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    38c0:	4b05      	ldr	r3, [pc, #20]	; (38d8 <nrfx_clock_start+0x60>)
    38c2:	2200      	movs	r2, #0
    38c4:	601a      	str	r2, [r3, #0]
    38c6:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    38c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    38cc:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    38d0:	6018      	str	r0, [r3, #0]
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
    38d2:	4770      	bx	lr
    38d4:	40000104 	.word	0x40000104
    38d8:	40000100 	.word	0x40000100

000038dc <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    38dc:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    38de:	b110      	cbz	r0, 38e6 <nrfx_clock_stop+0xa>
    38e0:	2801      	cmp	r0, #1
    38e2:	d018      	beq.n	3916 <nrfx_clock_stop+0x3a>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    38e4:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->INTENCLR = mask;
    38e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    38ea:	2202      	movs	r2, #2
    38ec:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    38f0:	4a18      	ldr	r2, [pc, #96]	; (3954 <nrfx_clock_stop+0x78>)
    38f2:	6010      	str	r0, [r2, #0]
    38f4:	6812      	ldr	r2, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    38f6:	4a18      	ldr	r2, [pc, #96]	; (3958 <nrfx_clock_stop+0x7c>)
    38f8:	2101      	movs	r1, #1
    38fa:	6011      	str	r1, [r2, #0]
    38fc:	f242 7510 	movw	r5, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    3900:	461c      	mov	r4, r3
    3902:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
    3906:	03db      	lsls	r3, r3, #15
    3908:	d5ec      	bpl.n	38e4 <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    390a:	2001      	movs	r0, #1
    390c:	f002 fab7 	bl	5e7e <nrfx_busy_wait>
    3910:	3d01      	subs	r5, #1
    3912:	d1f6      	bne.n	3902 <nrfx_clock_stop+0x26>
    3914:	e7e6      	b.n	38e4 <nrfx_clock_stop+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3916:	4b11      	ldr	r3, [pc, #68]	; (395c <nrfx_clock_stop+0x80>)
    p_reg->INTENCLR = mask;
    3918:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    391c:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    391e:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3922:	601a      	str	r2, [r3, #0]
    3924:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3926:	4b0e      	ldr	r3, [pc, #56]	; (3960 <nrfx_clock_stop+0x84>)
    3928:	f242 7510 	movw	r5, #10000	; 0x2710
    392c:	6018      	str	r0, [r3, #0]
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    392e:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    3932:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
    3936:	03d2      	lsls	r2, r2, #15
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    3938:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    393c:	d505      	bpl.n	394a <nrfx_clock_stop+0x6e>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    393e:	b123      	cbz	r3, 394a <nrfx_clock_stop+0x6e>
    3940:	2001      	movs	r0, #1
    3942:	f002 fa9c 	bl	5e7e <nrfx_busy_wait>
    3946:	3d01      	subs	r5, #1
    3948:	d1f1      	bne.n	392e <nrfx_clock_stop+0x52>
            m_clock_cb.hfclk_started = false;
    394a:	4b06      	ldr	r3, [pc, #24]	; (3964 <nrfx_clock_stop+0x88>)
    394c:	2200      	movs	r2, #0
    394e:	715a      	strb	r2, [r3, #5]
    3950:	e7c8      	b.n	38e4 <nrfx_clock_stop+0x8>
    3952:	bf00      	nop
    3954:	40000104 	.word	0x40000104
    3958:	4000000c 	.word	0x4000000c
    395c:	40000100 	.word	0x40000100
    3960:	40000004 	.word	0x40000004
    3964:	20000910 	.word	0x20000910

00003968 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    3968:	4b16      	ldr	r3, [pc, #88]	; (39c4 <nrfx_power_clock_irq_handler+0x5c>)
    396a:	681a      	ldr	r2, [r3, #0]
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    396c:	b510      	push	{r4, lr}
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    396e:	b16a      	cbz	r2, 398c <nrfx_power_clock_irq_handler+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3970:	2200      	movs	r2, #0
    3972:	601a      	str	r2, [r3, #0]
    3974:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    3976:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    397a:	2201      	movs	r2, #1
    397c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    3980:	4b11      	ldr	r3, [pc, #68]	; (39c8 <nrfx_power_clock_irq_handler+0x60>)
    3982:	7958      	ldrb	r0, [r3, #5]
    3984:	b910      	cbnz	r0, 398c <nrfx_power_clock_irq_handler+0x24>
        {
            m_clock_cb.hfclk_started = true;
    3986:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    3988:	681b      	ldr	r3, [r3, #0]
    398a:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    398c:	4b0f      	ldr	r3, [pc, #60]	; (39cc <nrfx_power_clock_irq_handler+0x64>)
    398e:	681a      	ldr	r2, [r3, #0]
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    3990:	b172      	cbz	r2, 39b0 <nrfx_power_clock_irq_handler+0x48>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3992:	2200      	movs	r2, #0
    3994:	601a      	str	r2, [r3, #0]
    3996:	681b      	ldr	r3, [r3, #0]
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    3998:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    399c:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    39a0:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    39a4:	0792      	lsls	r2, r2, #30
    39a6:	d104      	bne.n	39b2 <nrfx_power_clock_irq_handler+0x4a>
    p_reg->LFCLKSRC = (uint32_t)(source);
    39a8:	2201      	movs	r2, #1
    39aa:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    39ae:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    39b0:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    39b2:	2202      	movs	r2, #2
    39b4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    39b8:	4b03      	ldr	r3, [pc, #12]	; (39c8 <nrfx_power_clock_irq_handler+0x60>)
}
    39ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    39be:	681b      	ldr	r3, [r3, #0]
    39c0:	2001      	movs	r0, #1
    39c2:	4718      	bx	r3
    39c4:	40000100 	.word	0x40000100
    39c8:	20000910 	.word	0x20000910
    39cc:	40000104 	.word	0x40000104

000039d0 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    39d0:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    39d2:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    39d4:	6803      	ldr	r3, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    39d6:	fab3 f283 	clz	r2, r3
        if (idx < 0) {
    39da:	2a20      	cmp	r2, #32
        idx = 31 - NRF_CLZ(prev_mask);
    39dc:	f1c2 041f 	rsb	r4, r2, #31
        if (idx < 0) {
    39e0:	d014      	beq.n	3a0c <nrfx_flag32_alloc+0x3c>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    39e2:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask & ~NRFX_BIT(idx);
    39e6:	fa05 f204 	lsl.w	r2, r5, r4
    39ea:	ea23 0202 	bic.w	r2, r3, r2
    39ee:	e850 6f00 	ldrex	r6, [r0]
    39f2:	429e      	cmp	r6, r3
    39f4:	d104      	bne.n	3a00 <nrfx_flag32_alloc+0x30>
    39f6:	e840 2c00 	strex	ip, r2, [r0]
    39fa:	f1bc 0f00 	cmp.w	ip, #0
    39fe:	d1f6      	bne.n	39ee <nrfx_flag32_alloc+0x1e>
    3a00:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    3a04:	d1e6      	bne.n	39d4 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
    3a06:	4802      	ldr	r0, [pc, #8]	; (3a10 <nrfx_flag32_alloc+0x40>)
    *p_flag = idx;
    3a08:	700c      	strb	r4, [r1, #0]
}
    3a0a:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
    3a0c:	4801      	ldr	r0, [pc, #4]	; (3a14 <nrfx_flag32_alloc+0x44>)
    3a0e:	e7fc      	b.n	3a0a <nrfx_flag32_alloc+0x3a>
    3a10:	0bad0000 	.word	0x0bad0000
    3a14:	0bad0002 	.word	0x0bad0002

00003a18 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    3a18:	6803      	ldr	r3, [r0, #0]
    3a1a:	40cb      	lsrs	r3, r1
    3a1c:	07db      	lsls	r3, r3, #31
{
    3a1e:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
    3a20:	d415      	bmi.n	3a4e <nrfx_flag32_free+0x36>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    3a22:	2301      	movs	r3, #1
    3a24:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
    3a28:	6803      	ldr	r3, [r0, #0]
    3a2a:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
    3a2e:	ea41 0203 	orr.w	r2, r1, r3
    3a32:	e850 4f00 	ldrex	r4, [r0]
    3a36:	429c      	cmp	r4, r3
    3a38:	d104      	bne.n	3a44 <nrfx_flag32_free+0x2c>
    3a3a:	e840 2c00 	strex	ip, r2, [r0]
    3a3e:	f1bc 0f00 	cmp.w	ip, #0
    3a42:	d1f6      	bne.n	3a32 <nrfx_flag32_free+0x1a>
    3a44:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    3a48:	d1ee      	bne.n	3a28 <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
    3a4a:	4802      	ldr	r0, [pc, #8]	; (3a54 <nrfx_flag32_free+0x3c>)
}
    3a4c:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    3a4e:	4802      	ldr	r0, [pc, #8]	; (3a58 <nrfx_flag32_free+0x40>)
    3a50:	e7fc      	b.n	3a4c <nrfx_flag32_free+0x34>
    3a52:	bf00      	nop
    3a54:	0bad0000 	.word	0x0bad0000
    3a58:	0bad0004 	.word	0x0bad0004

00003a5c <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
    3a5c:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
    3a5e:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    3a62:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3a64:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
    3a66:	6002      	str	r2, [r0, #0]
}
    3a68:	4802      	ldr	r0, [pc, #8]	; (3a74 <nrf_gpio_pin_port_decode+0x18>)
    3a6a:	bf18      	it	ne
    3a6c:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
    3a70:	4770      	bx	lr
    3a72:	bf00      	nop
    3a74:	50000300 	.word	0x50000300

00003a78 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    3a78:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    3a7a:	f100 0308 	add.w	r3, r0, #8
    3a7e:	4c0c      	ldr	r4, [pc, #48]	; (3ab0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x18>)
    3a80:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
    3a84:	05da      	lsls	r2, r3, #23
{
    3a86:	4605      	mov	r5, r0
    3a88:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    3a8a:	d507      	bpl.n	3a9c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4>
    3a8c:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    3a90:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    3a94:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    3a98:	6852      	ldr	r2, [r2, #4]
    3a9a:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    3a9c:	68a3      	ldr	r3, [r4, #8]
    3a9e:	b12b      	cbz	r3, 3aac <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x14>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    3aa0:	68e2      	ldr	r2, [r4, #12]
    3aa2:	4631      	mov	r1, r6
    3aa4:	4628      	mov	r0, r5
    }
}
    3aa6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    3aaa:	4718      	bx	r3
}
    3aac:	bd70      	pop	{r4, r5, r6, pc}
    3aae:	bf00      	nop
    3ab0:	20000050 	.word	0x20000050

00003ab4 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    3ab4:	4b12      	ldr	r3, [pc, #72]	; (3b00 <release_handler+0x4c>)
    3ab6:	3008      	adds	r0, #8
{
    3ab8:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    3aba:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
    3abe:	05d1      	lsls	r1, r2, #23
    3ac0:	d51b      	bpl.n	3afa <release_handler+0x46>
    3ac2:	f3c2 2143 	ubfx	r1, r2, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    3ac6:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
    3aca:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    3ace:	f103 0410 	add.w	r4, r3, #16
    3ad2:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    3ad4:	f834 2b02 	ldrh.w	r2, [r4], #2
    3ad8:	f412 7f80 	tst.w	r2, #256	; 0x100
    3adc:	d003      	beq.n	3ae6 <release_handler+0x32>
    3ade:	f3c2 2243 	ubfx	r2, r2, #9, #4
    3ae2:	4291      	cmp	r1, r2
    3ae4:	d009      	beq.n	3afa <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    3ae6:	3001      	adds	r0, #1
    3ae8:	2830      	cmp	r0, #48	; 0x30
    3aea:	d1f3      	bne.n	3ad4 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    3aec:	2200      	movs	r2, #0
    3aee:	f843 2031 	str.w	r2, [r3, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    3af2:	4804      	ldr	r0, [pc, #16]	; (3b04 <release_handler+0x50>)
}
    3af4:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    3af6:	f7ff bf8f 	b.w	3a18 <nrfx_flag32_free>
}
    3afa:	bc10      	pop	{r4}
    3afc:	4770      	bx	lr
    3afe:	bf00      	nop
    3b00:	20000050 	.word	0x20000050
    3b04:	200000c4 	.word	0x200000c4

00003b08 <pin_handler_trigger_uninit>:
{
    3b08:	b538      	push	{r3, r4, r5, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    3b0a:	4c0a      	ldr	r4, [pc, #40]	; (3b34 <pin_handler_trigger_uninit+0x2c>)
    3b0c:	f100 0508 	add.w	r5, r0, #8
    3b10:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
    if (pin_in_use_by_te(pin))
    3b14:	069a      	lsls	r2, r3, #26
    3b16:	d506      	bpl.n	3b26 <pin_handler_trigger_uninit+0x1e>
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    3b18:	0b5b      	lsrs	r3, r3, #13
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    3b1a:	4a07      	ldr	r2, [pc, #28]	; (3b38 <pin_handler_trigger_uninit+0x30>)
    3b1c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    3b20:	2100      	movs	r1, #0
    3b22:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    release_handler(pin);
    3b26:	f7ff ffc5 	bl	3ab4 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    3b2a:	2300      	movs	r3, #0
    3b2c:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    3b30:	bd38      	pop	{r3, r4, r5, pc}
    3b32:	bf00      	nop
    3b34:	20000050 	.word	0x20000050
    3b38:	40006000 	.word	0x40006000

00003b3c <nrfx_gpiote_input_configure>:
{
    3b3c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    3b40:	461d      	mov	r5, r3
    3b42:	4604      	mov	r4, r0
    3b44:	4617      	mov	r7, r2
    if (p_input_config)
    3b46:	460b      	mov	r3, r1
    3b48:	b309      	cbz	r1, 3b8e <nrfx_gpiote_input_configure+0x52>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    3b4a:	4e4d      	ldr	r6, [pc, #308]	; (3c80 <nrfx_gpiote_input_configure+0x144>)
    3b4c:	f100 0808 	add.w	r8, r0, #8
        if (pin_is_task_output(pin))
    3b50:	f836 2018 	ldrh.w	r2, [r6, r8, lsl #1]
    3b54:	f002 0222 	and.w	r2, r2, #34	; 0x22
    3b58:	2a22      	cmp	r2, #34	; 0x22
    3b5a:	d103      	bne.n	3b64 <nrfx_gpiote_input_configure+0x28>
                return NRFX_ERROR_INVALID_PARAM;
    3b5c:	4849      	ldr	r0, [pc, #292]	; (3c84 <nrfx_gpiote_input_configure+0x148>)
}
    3b5e:	b004      	add	sp, #16
    3b60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    3b64:	2200      	movs	r2, #0
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    3b66:	e9cd 2200 	strd	r2, r2, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    3b6a:	f88d 200e 	strb.w	r2, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
    3b6e:	f88d 200f 	strb.w	r2, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    3b72:	f10d 010e 	add.w	r1, sp, #14
    3b76:	f10d 020f 	add.w	r2, sp, #15
    3b7a:	f002 f982 	bl	5e82 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    3b7e:	f836 3018 	ldrh.w	r3, [r6, r8, lsl #1]
    3b82:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    3b86:	f043 0301 	orr.w	r3, r3, #1
    3b8a:	f826 3018 	strh.w	r3, [r6, r8, lsl #1]
    if (p_trigger_config)
    3b8e:	b197      	cbz	r7, 3bb6 <nrfx_gpiote_input_configure+0x7a>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    3b90:	483b      	ldr	r0, [pc, #236]	; (3c80 <nrfx_gpiote_input_configure+0x144>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    3b92:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    3b94:	687a      	ldr	r2, [r7, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    3b96:	f104 0308 	add.w	r3, r4, #8
    3b9a:	f830 1013 	ldrh.w	r1, [r0, r3, lsl #1]
        if (pin_is_output(pin))
    3b9e:	078f      	lsls	r7, r1, #30
    3ba0:	d50c      	bpl.n	3bbc <nrfx_gpiote_input_configure+0x80>
            if (use_evt)
    3ba2:	2a00      	cmp	r2, #0
    3ba4:	d1da      	bne.n	3b5c <nrfx_gpiote_input_configure+0x20>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    3ba6:	f830 2013 	ldrh.w	r2, [r0, r3, lsl #1]
    3baa:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    3bae:	ea42 0286 	orr.w	r2, r2, r6, lsl #2
    3bb2:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
    if (p_handler_config)
    3bb6:	bbcd      	cbnz	r5, 3c2c <nrfx_gpiote_input_configure+0xf0>
    return NRFX_SUCCESS;
    3bb8:	4833      	ldr	r0, [pc, #204]	; (3c88 <nrfx_gpiote_input_configure+0x14c>)
    3bba:	e7d0      	b.n	3b5e <nrfx_gpiote_input_configure+0x22>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    3bbc:	f021 0120 	bic.w	r1, r1, #32
    3bc0:	04c9      	lsls	r1, r1, #19
    3bc2:	0cc9      	lsrs	r1, r1, #19
    3bc4:	f820 1013 	strh.w	r1, [r0, r3, lsl #1]
            if (use_evt)
    3bc8:	2a00      	cmp	r2, #0
    3bca:	d0ec      	beq.n	3ba6 <nrfx_gpiote_input_configure+0x6a>
                if (!edge)
    3bcc:	2e03      	cmp	r6, #3
    3bce:	d8c5      	bhi.n	3b5c <nrfx_gpiote_input_configure+0x20>
                uint8_t ch = *p_trigger_config->p_in_channel;
    3bd0:	7817      	ldrb	r7, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    3bd2:	b92e      	cbnz	r6, 3be0 <nrfx_gpiote_input_configure+0xa4>
    3bd4:	4a2d      	ldr	r2, [pc, #180]	; (3c8c <nrfx_gpiote_input_configure+0x150>)
    3bd6:	f507 71a2 	add.w	r1, r7, #324	; 0x144
    3bda:	f842 6021 	str.w	r6, [r2, r1, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
    3bde:	e7e2      	b.n	3ba6 <nrfx_gpiote_input_configure+0x6a>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    3be0:	00ba      	lsls	r2, r7, #2
    3be2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    3be6:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3bea:	ea4f 2e04 	mov.w	lr, r4, lsl #8
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    3bee:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
    3bf2:	f02c 0c03 	bic.w	ip, ip, #3
    3bf6:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    3bfa:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
    3bfe:	f42c 3c4f 	bic.w	ip, ip, #211968	; 0x33c00
    3c02:	f42c 7c40 	bic.w	ip, ip, #768	; 0x300
    3c06:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3c0a:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
    3c0e:	f40e 5e7c 	and.w	lr, lr, #16128	; 0x3f00
    3c12:	ea4c 4c06 	orr.w	ip, ip, r6, lsl #16
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    3c16:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
    3c1a:	ea4c 0c0e 	orr.w	ip, ip, lr
    3c1e:	f041 0120 	orr.w	r1, r1, #32
    3c22:	f820 1013 	strh.w	r1, [r0, r3, lsl #1]
    3c26:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
    3c2a:	e7bc      	b.n	3ba6 <nrfx_gpiote_input_configure+0x6a>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    3c2c:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    3c30:	4620      	mov	r0, r4
    3c32:	f7ff ff3f 	bl	3ab4 <release_handler>
    if (!handler)
    3c36:	2e00      	cmp	r6, #0
    3c38:	d0be      	beq.n	3bb8 <nrfx_gpiote_input_configure+0x7c>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    3c3a:	4d11      	ldr	r5, [pc, #68]	; (3c80 <nrfx_gpiote_input_configure+0x144>)
    3c3c:	682b      	ldr	r3, [r5, #0]
    3c3e:	429e      	cmp	r6, r3
    3c40:	d104      	bne.n	3c4c <nrfx_gpiote_input_configure+0x110>
    3c42:	686b      	ldr	r3, [r5, #4]
    3c44:	429f      	cmp	r7, r3
    3c46:	d101      	bne.n	3c4c <nrfx_gpiote_input_configure+0x110>
    3c48:	2200      	movs	r2, #0
    3c4a:	e009      	b.n	3c60 <nrfx_gpiote_input_configure+0x124>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    3c4c:	4810      	ldr	r0, [pc, #64]	; (3c90 <nrfx_gpiote_input_configure+0x154>)
    3c4e:	f10d 010f 	add.w	r1, sp, #15
    3c52:	f7ff febd 	bl	39d0 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    3c56:	4b0c      	ldr	r3, [pc, #48]	; (3c88 <nrfx_gpiote_input_configure+0x14c>)
    3c58:	4298      	cmp	r0, r3
    3c5a:	d180      	bne.n	3b5e <nrfx_gpiote_input_configure+0x22>
        handler_id = (int32_t)id;
    3c5c:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
    3c60:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    3c64:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    3c68:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    3c6a:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    3c6c:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    3c70:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    3c74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    3c78:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    3c7c:	e79c      	b.n	3bb8 <nrfx_gpiote_input_configure+0x7c>
    3c7e:	bf00      	nop
    3c80:	20000050 	.word	0x20000050
    3c84:	0bad0004 	.word	0x0bad0004
    3c88:	0bad0000 	.word	0x0bad0000
    3c8c:	40006000 	.word	0x40006000
    3c90:	200000c4 	.word	0x200000c4

00003c94 <nrfx_gpiote_output_configure>:
{
    3c94:	b5f0      	push	{r4, r5, r6, r7, lr}
    3c96:	4604      	mov	r4, r0
    3c98:	b085      	sub	sp, #20
    3c9a:	4615      	mov	r5, r2
    if (p_config)
    3c9c:	b309      	cbz	r1, 3ce2 <nrfx_gpiote_output_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    3c9e:	f100 0708 	add.w	r7, r0, #8
    3ca2:	4e31      	ldr	r6, [pc, #196]	; (3d68 <nrfx_gpiote_output_configure+0xd4>)
    3ca4:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    3ca8:	0798      	lsls	r0, r3, #30
    3caa:	d401      	bmi.n	3cb0 <nrfx_gpiote_output_configure+0x1c>
    3cac:	069a      	lsls	r2, r3, #26
    3cae:	d458      	bmi.n	3d62 <nrfx_gpiote_output_configure+0xce>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    3cb0:	f013 0f1c 	tst.w	r3, #28
    3cb4:	d002      	beq.n	3cbc <nrfx_gpiote_output_configure+0x28>
    3cb6:	784b      	ldrb	r3, [r1, #1]
    3cb8:	2b01      	cmp	r3, #1
    3cba:	d052      	beq.n	3d62 <nrfx_gpiote_output_configure+0xce>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
    3cbc:	2301      	movs	r3, #1
    3cbe:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    3cc2:	2300      	movs	r3, #0
    3cc4:	e9cd 1300 	strd	r1, r3, [sp]
    3cc8:	1c4a      	adds	r2, r1, #1
    3cca:	1c8b      	adds	r3, r1, #2
    3ccc:	4620      	mov	r0, r4
    3cce:	f10d 010f 	add.w	r1, sp, #15
    3cd2:	f002 f8d6 	bl	5e82 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    3cd6:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    3cda:	f043 0303 	orr.w	r3, r3, #3
    3cde:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
    3ce2:	b915      	cbnz	r5, 3cea <nrfx_gpiote_output_configure+0x56>
    return NRFX_SUCCESS;
    3ce4:	4821      	ldr	r0, [pc, #132]	; (3d6c <nrfx_gpiote_output_configure+0xd8>)
}
    3ce6:	b005      	add	sp, #20
    3ce8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    3cea:	4e1f      	ldr	r6, [pc, #124]	; (3d68 <nrfx_gpiote_output_configure+0xd4>)
    3cec:	f104 0708 	add.w	r7, r4, #8
    3cf0:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    3cf4:	0783      	lsls	r3, r0, #30
    3cf6:	d534      	bpl.n	3d62 <nrfx_gpiote_output_configure+0xce>
        uint32_t ch = p_task_config->task_ch;
    3cf8:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
    3cfc:	4661      	mov	r1, ip
    3cfe:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    3d00:	f020 0020 	bic.w	r0, r0, #32
    3d04:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    3d08:	04c0      	lsls	r0, r0, #19
    3d0a:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
    3d0e:	0cc0      	lsrs	r0, r0, #19
    3d10:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    3d14:	2300      	movs	r3, #0
    3d16:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    3d1a:	786a      	ldrb	r2, [r5, #1]
    3d1c:	2a00      	cmp	r2, #0
    3d1e:	d0e1      	beq.n	3ce4 <nrfx_gpiote_output_configure+0x50>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    3d20:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    3d24:	78ad      	ldrb	r5, [r5, #2]
    3d26:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
    3d2a:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    3d2e:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3d32:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    3d36:	0223      	lsls	r3, r4, #8
    3d38:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    3d3c:	0412      	lsls	r2, r2, #16
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3d3e:	ea43 030e 	orr.w	r3, r3, lr
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    3d42:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    3d46:	052d      	lsls	r5, r5, #20
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3d48:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    3d4a:	f405 1580 	and.w	r5, r5, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    3d4e:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3d52:	432b      	orrs	r3, r5
    3d54:	f040 0020 	orr.w	r0, r0, #32
    3d58:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    3d5c:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    3d60:	e7c0      	b.n	3ce4 <nrfx_gpiote_output_configure+0x50>
            return NRFX_ERROR_INVALID_PARAM;
    3d62:	4803      	ldr	r0, [pc, #12]	; (3d70 <nrfx_gpiote_output_configure+0xdc>)
    3d64:	e7bf      	b.n	3ce6 <nrfx_gpiote_output_configure+0x52>
    3d66:	bf00      	nop
    3d68:	20000050 	.word	0x20000050
    3d6c:	0bad0000 	.word	0x0bad0000
    3d70:	0bad0004 	.word	0x0bad0004

00003d74 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    3d74:	4b01      	ldr	r3, [pc, #4]	; (3d7c <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    3d76:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    3d7a:	4770      	bx	lr
    3d7c:	20000050 	.word	0x20000050

00003d80 <nrfx_gpiote_channel_get>:
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    3d80:	3008      	adds	r0, #8
    3d82:	4b05      	ldr	r3, [pc, #20]	; (3d98 <nrfx_gpiote_channel_get+0x18>)
    3d84:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
    if (pin_in_use_by_te(pin))
    3d88:	069a      	lsls	r2, r3, #26
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    3d8a:	bf43      	ittte	mi
    3d8c:	0b5b      	lsrmi	r3, r3, #13
        return NRFX_SUCCESS;
    3d8e:	4803      	ldrmi	r0, [pc, #12]	; (3d9c <nrfx_gpiote_channel_get+0x1c>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    3d90:	700b      	strbmi	r3, [r1, #0]
        return NRFX_ERROR_INVALID_PARAM;
    3d92:	4803      	ldrpl	r0, [pc, #12]	; (3da0 <nrfx_gpiote_channel_get+0x20>)
}
    3d94:	4770      	bx	lr
    3d96:	bf00      	nop
    3d98:	20000050 	.word	0x20000050
    3d9c:	0bad0000 	.word	0x0bad0000
    3da0:	0bad0004 	.word	0x0bad0004

00003da4 <nrfx_gpiote_init>:
{
    3da4:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    3da6:	4c0e      	ldr	r4, [pc, #56]	; (3de0 <nrfx_gpiote_init+0x3c>)
    3da8:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
    3dac:	b9b5      	cbnz	r5, 3ddc <nrfx_gpiote_init+0x38>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    3dae:	2260      	movs	r2, #96	; 0x60
    3db0:	4629      	mov	r1, r5
    3db2:	f104 0010 	add.w	r0, r4, #16
    3db6:	f001 feb0 	bl	5b1a <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    3dba:	2006      	movs	r0, #6
    3dbc:	f7fe fa86 	bl	22cc <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3dc0:	4b08      	ldr	r3, [pc, #32]	; (3de4 <nrfx_gpiote_init+0x40>)
    return err_code;
    3dc2:	4809      	ldr	r0, [pc, #36]	; (3de8 <nrfx_gpiote_init+0x44>)
    3dc4:	601d      	str	r5, [r3, #0]
    3dc6:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    3dc8:	4b08      	ldr	r3, [pc, #32]	; (3dec <nrfx_gpiote_init+0x48>)
    3dca:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    3dce:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    3dd2:	2301      	movs	r3, #1
    3dd4:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    3dd8:	6763      	str	r3, [r4, #116]	; 0x74
}
    3dda:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    3ddc:	4804      	ldr	r0, [pc, #16]	; (3df0 <nrfx_gpiote_init+0x4c>)
    3dde:	e7fc      	b.n	3dda <nrfx_gpiote_init+0x36>
    3de0:	20000050 	.word	0x20000050
    3de4:	4000617c 	.word	0x4000617c
    3de8:	0bad0000 	.word	0x0bad0000
    3dec:	40006000 	.word	0x40006000
    3df0:	0bad0005 	.word	0x0bad0005

00003df4 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    3df4:	4b03      	ldr	r3, [pc, #12]	; (3e04 <nrfx_gpiote_is_init+0x10>)
    3df6:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    3dfa:	3800      	subs	r0, #0
    3dfc:	bf18      	it	ne
    3dfe:	2001      	movne	r0, #1
    3e00:	4770      	bx	lr
    3e02:	bf00      	nop
    3e04:	20000050 	.word	0x20000050

00003e08 <nrfx_gpiote_channel_free>:
{
    3e08:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    3e0a:	4801      	ldr	r0, [pc, #4]	; (3e10 <nrfx_gpiote_channel_free+0x8>)
    3e0c:	f7ff be04 	b.w	3a18 <nrfx_flag32_free>
    3e10:	200000c0 	.word	0x200000c0

00003e14 <nrfx_gpiote_channel_alloc>:
{
    3e14:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    3e16:	4801      	ldr	r0, [pc, #4]	; (3e1c <nrfx_gpiote_channel_alloc+0x8>)
    3e18:	f7ff bdda 	b.w	39d0 <nrfx_flag32_alloc>
    3e1c:	200000c0 	.word	0x200000c0

00003e20 <nrfx_gpiote_trigger_enable>:
{
    3e20:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    3e22:	4b1f      	ldr	r3, [pc, #124]	; (3ea0 <nrfx_gpiote_trigger_enable+0x80>)
    3e24:	f100 0208 	add.w	r2, r0, #8
{
    3e28:	4604      	mov	r4, r0
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    3e2a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    3e2e:	069a      	lsls	r2, r3, #26
    3e30:	d51d      	bpl.n	3e6e <nrfx_gpiote_trigger_enable+0x4e>
    3e32:	f013 0502 	ands.w	r5, r3, #2
    3e36:	d11a      	bne.n	3e6e <nrfx_gpiote_trigger_enable+0x4e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    3e38:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    3e3a:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
    3e3c:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
    3e40:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
    3e44:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    3e48:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3e4c:	6005      	str	r5, [r0, #0]
    3e4e:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    3e50:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    3e54:	f040 0001 	orr.w	r0, r0, #1
    3e58:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
    3e5c:	b129      	cbz	r1, 3e6a <nrfx_gpiote_trigger_enable+0x4a>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    3e5e:	2201      	movs	r2, #1
    3e60:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
    3e64:	4a0f      	ldr	r2, [pc, #60]	; (3ea4 <nrfx_gpiote_trigger_enable+0x84>)
    3e66:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    3e6a:	b003      	add	sp, #12
    3e6c:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    3e6e:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    3e72:	2b04      	cmp	r3, #4
    3e74:	d010      	beq.n	3e98 <nrfx_gpiote_trigger_enable+0x78>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    3e76:	2b05      	cmp	r3, #5
    3e78:	d010      	beq.n	3e9c <nrfx_gpiote_trigger_enable+0x7c>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    3e7a:	a801      	add	r0, sp, #4
    3e7c:	9401      	str	r4, [sp, #4]
    3e7e:	f7ff fded 	bl	3a5c <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    3e82:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
    3e84:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    3e88:	40d9      	lsrs	r1, r3
    3e8a:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    3e8e:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    3e90:	4620      	mov	r0, r4
    3e92:	f002 f83d 	bl	5f10 <nrf_gpio_cfg_sense_set>
}
    3e96:	e7e8      	b.n	3e6a <nrfx_gpiote_trigger_enable+0x4a>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    3e98:	2103      	movs	r1, #3
    3e9a:	e7f9      	b.n	3e90 <nrfx_gpiote_trigger_enable+0x70>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    3e9c:	2102      	movs	r1, #2
    3e9e:	e7f7      	b.n	3e90 <nrfx_gpiote_trigger_enable+0x70>
    3ea0:	20000050 	.word	0x20000050
    3ea4:	40006000 	.word	0x40006000

00003ea8 <nrfx_gpiote_trigger_disable>:
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    3ea8:	4b0e      	ldr	r3, [pc, #56]	; (3ee4 <nrfx_gpiote_trigger_disable+0x3c>)
    3eaa:	f100 0208 	add.w	r2, r0, #8
    3eae:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    3eb2:	0699      	lsls	r1, r3, #26
    3eb4:	d513      	bpl.n	3ede <nrfx_gpiote_trigger_disable+0x36>
    3eb6:	079a      	lsls	r2, r3, #30
    3eb8:	d411      	bmi.n	3ede <nrfx_gpiote_trigger_disable+0x36>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    3eba:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    3ebc:	2201      	movs	r2, #1
    3ebe:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    3ec0:	009b      	lsls	r3, r3, #2
    3ec2:	4909      	ldr	r1, [pc, #36]	; (3ee8 <nrfx_gpiote_trigger_disable+0x40>)
    3ec4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    3ec8:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    3ecc:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    3ed0:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    3ed4:	f022 0203 	bic.w	r2, r2, #3
    3ed8:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    3edc:	4770      	bx	lr
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    3ede:	2100      	movs	r1, #0
    3ee0:	f002 b816 	b.w	5f10 <nrf_gpio_cfg_sense_set>
    3ee4:	20000050 	.word	0x20000050
    3ee8:	40006000 	.word	0x40006000

00003eec <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    3eec:	4b0e      	ldr	r3, [pc, #56]	; (3f28 <nrfx_gpiote_pin_uninit+0x3c>)
    3eee:	f100 0208 	add.w	r2, r0, #8
{
    3ef2:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    3ef4:	f813 3012 	ldrb.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
    3ef8:	07db      	lsls	r3, r3, #31
{
    3efa:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    3efc:	d511      	bpl.n	3f22 <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
    3efe:	f7ff ffd3 	bl	3ea8 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    3f02:	4620      	mov	r0, r4
    3f04:	f7ff fe00 	bl	3b08 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    3f08:	a801      	add	r0, sp, #4
    3f0a:	9401      	str	r4, [sp, #4]
    3f0c:	f7ff fda6 	bl	3a5c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    3f10:	9b01      	ldr	r3, [sp, #4]
    3f12:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    3f16:	2202      	movs	r2, #2
    3f18:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
    3f1c:	4803      	ldr	r0, [pc, #12]	; (3f2c <nrfx_gpiote_pin_uninit+0x40>)
}
    3f1e:	b002      	add	sp, #8
    3f20:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    3f22:	4803      	ldr	r0, [pc, #12]	; (3f30 <nrfx_gpiote_pin_uninit+0x44>)
    3f24:	e7fb      	b.n	3f1e <nrfx_gpiote_pin_uninit+0x32>
    3f26:	bf00      	nop
    3f28:	20000050 	.word	0x20000050
    3f2c:	0bad0000 	.word	0x0bad0000
    3f30:	0bad0004 	.word	0x0bad0004

00003f34 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    3f34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3f38:	4b64      	ldr	r3, [pc, #400]	; (40cc <nrfx_gpiote_irq_handler+0x198>)
    return p_reg->INTENSET & mask;
    3f3a:	4865      	ldr	r0, [pc, #404]	; (40d0 <nrfx_gpiote_irq_handler+0x19c>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    3f3c:	4965      	ldr	r1, [pc, #404]	; (40d4 <nrfx_gpiote_irq_handler+0x1a0>)
    uint32_t status = 0;
    3f3e:	2500      	movs	r5, #0
{
    3f40:	b087      	sub	sp, #28
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    3f42:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3f44:	462c      	mov	r4, r5
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3f46:	681e      	ldr	r6, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    3f48:	b136      	cbz	r6, 3f58 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
    3f4a:	f8d0 6304 	ldr.w	r6, [r0, #772]	; 0x304
    3f4e:	4216      	tst	r6, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3f50:	bf1e      	ittt	ne
    3f52:	601c      	strne	r4, [r3, #0]
    3f54:	681e      	ldrne	r6, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    3f56:	4315      	orrne	r5, r2
        }
        mask <<= 1;
    3f58:	3304      	adds	r3, #4
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    3f5a:	428b      	cmp	r3, r1
        mask <<= 1;
    3f5c:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    3f60:	d1f1      	bne.n	3f46 <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3f62:	4f5d      	ldr	r7, [pc, #372]	; (40d8 <nrfx_gpiote_irq_handler+0x1a4>)
    3f64:	683b      	ldr	r3, [r7, #0]
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    3f66:	b37b      	cbz	r3, 3fc8 <nrfx_gpiote_irq_handler+0x94>
        *p_masks = gpio_regs[i]->LATCH;
    3f68:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    3f6c:	4e5b      	ldr	r6, [pc, #364]	; (40dc <nrfx_gpiote_irq_handler+0x1a8>)
    3f6e:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    3f72:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    3f74:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    3f78:	f8d6 3520 	ldr.w	r3, [r6, #1312]	; 0x520
    3f7c:	9305      	str	r3, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    3f7e:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    3f82:	9600      	str	r6, [sp, #0]
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    3f84:	f10d 0910 	add.w	r9, sp, #16
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    3f88:	f04f 0800 	mov.w	r8, #0
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    3f8c:	f04f 0b01 	mov.w	fp, #1
            while (latch[i])
    3f90:	f8d9 3000 	ldr.w	r3, [r9]
    3f94:	b9f3      	cbnz	r3, 3fd4 <nrfx_gpiote_irq_handler+0xa0>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    3f96:	f108 0820 	add.w	r8, r8, #32
    3f9a:	f1b8 0f40 	cmp.w	r8, #64	; 0x40
    3f9e:	f109 0904 	add.w	r9, r9, #4
    3fa2:	d1f5      	bne.n	3f90 <nrfx_gpiote_irq_handler+0x5c>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3fa4:	603b      	str	r3, [r7, #0]
    3fa6:	683b      	ldr	r3, [r7, #0]
        gpio_regs[i]->LATCH = *p_masks;
    3fa8:	9900      	ldr	r1, [sp, #0]
        *p_masks = gpio_regs[i]->LATCH;
    3faa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    3fae:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    3fb2:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    3fb4:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    3fb8:	9b00      	ldr	r3, [sp, #0]
    3fba:	f8d3 3520 	ldr.w	r3, [r3, #1312]	; 0x520
    3fbe:	9305      	str	r3, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    3fc0:	f8c1 3520 	str.w	r3, [r1, #1312]	; 0x520
        if (latch[port_idx])
    3fc4:	4313      	orrs	r3, r2
    3fc6:	d1dd      	bne.n	3f84 <nrfx_gpiote_irq_handler+0x50>
        mask &= ~NRFX_BIT(ch);
    3fc8:	2401      	movs	r4, #1
    while (mask)
    3fca:	2d00      	cmp	r5, #0
    3fcc:	d166      	bne.n	409c <nrfx_gpiote_irq_handler+0x168>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    3fce:	b007      	add	sp, #28
    3fd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                uint32_t pin = NRF_CTZ(latch[i]);
    3fd4:	fa93 f3a3 	rbit	r3, r3
    3fd8:	fab3 f383 	clz	r3, r3
                pin += 32 * i;
    3fdc:	eb08 0603 	add.w	r6, r8, r3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    3fe0:	f106 0208 	add.w	r2, r6, #8
    3fe4:	4b3e      	ldr	r3, [pc, #248]	; (40e0 <nrfx_gpiote_irq_handler+0x1ac>)
    3fe6:	9603      	str	r6, [sp, #12]
    3fe8:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
    3fec:	f3c2 0382 	ubfx	r3, r2, #2, #3
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    3ff0:	08f4      	lsrs	r4, r6, #3
    3ff2:	9301      	str	r3, [sp, #4]
    3ff4:	469a      	mov	sl, r3
    p_mask8[byte_idx] &= ~(1 << bit);
    3ff6:	ab04      	add	r3, sp, #16
    bit = BITMASK_RELBIT_GET(bit);
    3ff8:	f006 0007 	and.w	r0, r6, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    3ffc:	fa0b fc00 	lsl.w	ip, fp, r0
    4000:	5d18      	ldrb	r0, [r3, r4]
    4002:	ea20 000c 	bic.w	r0, r0, ip
    4006:	5518      	strb	r0, [r3, r4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4008:	a803      	add	r0, sp, #12
    400a:	0891      	lsrs	r1, r2, #2
    400c:	f7ff fd26 	bl	3a5c <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    4010:	9c03      	ldr	r4, [sp, #12]
    4012:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
    if (is_level(trigger))
    4016:	074b      	lsls	r3, r1, #29
    4018:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    401c:	f3c4 4401 	ubfx	r4, r4, #16, #2
    4020:	d523      	bpl.n	406a <nrfx_gpiote_irq_handler+0x136>
        call_handler(pin, trigger);
    4022:	4651      	mov	r1, sl
    4024:	4630      	mov	r0, r6
    4026:	f7ff fd27 	bl	3a78 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    402a:	a803      	add	r0, sp, #12
    402c:	9603      	str	r6, [sp, #12]
    402e:	f7ff fd15 	bl	3a5c <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    4032:	9a03      	ldr	r2, [sp, #12]
    4034:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    4038:	b2e4      	uxtb	r4, r4
    403a:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
    403e:	f3c2 4201 	ubfx	r2, r2, #16, #2
    4042:	4294      	cmp	r4, r2
    4044:	d107      	bne.n	4056 <nrfx_gpiote_irq_handler+0x122>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    4046:	2100      	movs	r1, #0
    4048:	4630      	mov	r0, r6
    404a:	f001 ff61 	bl	5f10 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    404e:	4621      	mov	r1, r4
    4050:	4630      	mov	r0, r6
    4052:	f001 ff5d 	bl	5f10 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4056:	a803      	add	r0, sp, #12
    4058:	9603      	str	r6, [sp, #12]
    405a:	f7ff fcff 	bl	3a5c <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
    405e:	9b03      	ldr	r3, [sp, #12]
    4060:	fa0b f303 	lsl.w	r3, fp, r3
    4064:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
    4068:	e792      	b.n	3f90 <nrfx_gpiote_irq_handler+0x5c>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    406a:	2c02      	cmp	r4, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
    406c:	bf0c      	ite	eq
    406e:	2103      	moveq	r1, #3
    4070:	2102      	movne	r1, #2
    4072:	4630      	mov	r0, r6
    4074:	f001 ff4c 	bl	5f10 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    4078:	9b01      	ldr	r3, [sp, #4]
    407a:	2b03      	cmp	r3, #3
    407c:	d004      	beq.n	4088 <nrfx_gpiote_irq_handler+0x154>
    407e:	2c02      	cmp	r4, #2
    4080:	d107      	bne.n	4092 <nrfx_gpiote_irq_handler+0x15e>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    4082:	f1ba 0f01 	cmp.w	sl, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    4086:	d1e6      	bne.n	4056 <nrfx_gpiote_irq_handler+0x122>
            call_handler(pin, trigger);
    4088:	4651      	mov	r1, sl
    408a:	4630      	mov	r0, r6
    408c:	f7ff fcf4 	bl	3a78 <call_handler>
    4090:	e7e1      	b.n	4056 <nrfx_gpiote_irq_handler+0x122>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    4092:	2c03      	cmp	r4, #3
    4094:	d1df      	bne.n	4056 <nrfx_gpiote_irq_handler+0x122>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    4096:	f1ba 0f02 	cmp.w	sl, #2
    409a:	e7f4      	b.n	4086 <nrfx_gpiote_irq_handler+0x152>
        uint32_t ch = NRF_CTZ(mask);
    409c:	fa95 f3a5 	rbit	r3, r5
    40a0:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    40a4:	fa04 f203 	lsl.w	r2, r4, r3
    40a8:	009b      	lsls	r3, r3, #2
    40aa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    40ae:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    40b2:	ea25 0502 	bic.w	r5, r5, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    40b6:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    40ba:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    40be:	f3c0 2005 	ubfx	r0, r0, #8, #6
    40c2:	f3c1 4101 	ubfx	r1, r1, #16, #2
    40c6:	f7ff fcd7 	bl	3a78 <call_handler>
    40ca:	e77e      	b.n	3fca <nrfx_gpiote_irq_handler+0x96>
    40cc:	40006100 	.word	0x40006100
    40d0:	40006000 	.word	0x40006000
    40d4:	40006120 	.word	0x40006120
    40d8:	4000617c 	.word	0x4000617c
    40dc:	50000300 	.word	0x50000300
    40e0:	20000050 	.word	0x20000050

000040e4 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    40e4:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
    40e6:	4801      	ldr	r0, [pc, #4]	; (40ec <nrfx_ppi_channel_alloc+0x8>)
    40e8:	f7ff bc72 	b.w	39d0 <nrfx_flag32_alloc>
    40ec:	200000cc 	.word	0x200000cc

000040f0 <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    40f0:	4b03      	ldr	r3, [pc, #12]	; (4100 <nrf52_errata_136+0x10>)
            if (var1 == 0x08)
    40f2:	6818      	ldr	r0, [r3, #0]
}
    40f4:	f1a0 0308 	sub.w	r3, r0, #8
    40f8:	4258      	negs	r0, r3
    40fa:	4158      	adcs	r0, r3
    40fc:	4770      	bx	lr
    40fe:	bf00      	nop
    4100:	10000130 	.word	0x10000130

00004104 <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    4104:	4b06      	ldr	r3, [pc, #24]	; (4120 <nrf52_errata_103+0x1c>)
            if (var1 == 0x08)
    4106:	681b      	ldr	r3, [r3, #0]
    4108:	2b08      	cmp	r3, #8
    410a:	d106      	bne.n	411a <nrf52_errata_103+0x16>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    410c:	4b05      	ldr	r3, [pc, #20]	; (4124 <nrf52_errata_103+0x20>)
    410e:	681b      	ldr	r3, [r3, #0]
                switch(var2)
    4110:	2b05      	cmp	r3, #5
    4112:	d802      	bhi.n	411a <nrf52_errata_103+0x16>
    4114:	4a04      	ldr	r2, [pc, #16]	; (4128 <nrf52_errata_103+0x24>)
    4116:	5cd0      	ldrb	r0, [r2, r3]
    4118:	4770      	bx	lr
        return false;
    411a:	2000      	movs	r0, #0
}
    411c:	4770      	bx	lr
    411e:	bf00      	nop
    4120:	10000130 	.word	0x10000130
    4124:	10000134 	.word	0x10000134
    4128:	00006a49 	.word	0x00006a49

0000412c <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    412c:	4a02      	ldr	r2, [pc, #8]	; (4138 <nvmc_wait+0xc>)
    412e:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    4132:	2b00      	cmp	r3, #0
    4134:	d0fb      	beq.n	412e <nvmc_wait+0x2>
}
    4136:	4770      	bx	lr
    4138:	4001e000 	.word	0x4001e000

0000413c <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
    413c:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    413e:	f7ff ffd7 	bl	40f0 <nrf52_errata_136>
    4142:	b140      	cbz	r0, 4156 <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
    4144:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4148:	2200      	movs	r2, #0
    414a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    414e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    4152:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    4156:	f7ff ffcb 	bl	40f0 <nrf52_errata_136>
    415a:	2800      	cmp	r0, #0
    415c:	d046      	beq.n	41ec <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    415e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    4162:	4b5b      	ldr	r3, [pc, #364]	; (42d0 <SystemInit+0x194>)
    4164:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    4168:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    416c:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    4170:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    4174:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    4178:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    417c:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    4180:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    4184:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    4188:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    418c:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    4190:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    4194:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    4198:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    419c:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    41a0:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    41a4:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    41a8:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    41ac:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    41b0:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    41b4:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    41b8:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    41bc:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    41c0:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    41c4:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    41c8:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    41cc:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    41d0:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    41d4:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    41d8:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    41dc:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    41e0:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    41e4:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    41e8:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    41ec:	f7ff ff8a 	bl	4104 <nrf52_errata_103>
    41f0:	b110      	cbz	r0, 41f8 <SystemInit+0xbc>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    41f2:	4b38      	ldr	r3, [pc, #224]	; (42d4 <SystemInit+0x198>)
    41f4:	4a38      	ldr	r2, [pc, #224]	; (42d8 <SystemInit+0x19c>)
    41f6:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    41f8:	f7ff ff84 	bl	4104 <nrf52_errata_103>
    41fc:	b118      	cbz	r0, 4206 <SystemInit+0xca>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    41fe:	4b37      	ldr	r3, [pc, #220]	; (42dc <SystemInit+0x1a0>)
    4200:	22fb      	movs	r2, #251	; 0xfb
    4202:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    4206:	f7ff ff7d 	bl	4104 <nrf52_errata_103>
    420a:	b148      	cbz	r0, 4220 <SystemInit+0xe4>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    420c:	4934      	ldr	r1, [pc, #208]	; (42e0 <SystemInit+0x1a4>)
    420e:	4b35      	ldr	r3, [pc, #212]	; (42e4 <SystemInit+0x1a8>)
    4210:	680a      	ldr	r2, [r1, #0]
    4212:	681b      	ldr	r3, [r3, #0]
    4214:	f022 020f 	bic.w	r2, r2, #15
    4218:	f003 030f 	and.w	r3, r3, #15
    421c:	4313      	orrs	r3, r2
    421e:	600b      	str	r3, [r1, #0]
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    4220:	f7ff ff70 	bl	4104 <nrf52_errata_103>
    4224:	b118      	cbz	r0, 422e <SystemInit+0xf2>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    4226:	4b30      	ldr	r3, [pc, #192]	; (42e8 <SystemInit+0x1ac>)
    4228:	f44f 7200 	mov.w	r2, #512	; 0x200
    422c:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    422e:	f7ff ff5f 	bl	40f0 <nrf52_errata_136>
    4232:	b148      	cbz	r0, 4248 <SystemInit+0x10c>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    4234:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4238:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    423c:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    423e:	bf44      	itt	mi
    4240:	f06f 0201 	mvnmi.w	r2, #1
    4244:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    4248:	4b28      	ldr	r3, [pc, #160]	; (42ec <SystemInit+0x1b0>)
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    424a:	681b      	ldr	r3, [r3, #0]
    424c:	2b08      	cmp	r3, #8
    424e:	d10e      	bne.n	426e <SystemInit+0x132>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    4250:	4b27      	ldr	r3, [pc, #156]	; (42f0 <SystemInit+0x1b4>)
    4252:	681b      	ldr	r3, [r3, #0]
            {
                switch(var2)
    4254:	2b05      	cmp	r3, #5
    4256:	d802      	bhi.n	425e <SystemInit+0x122>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    4258:	4a26      	ldr	r2, [pc, #152]	; (42f4 <SystemInit+0x1b8>)
    425a:	5cd3      	ldrb	r3, [r2, r3]
    425c:	b13b      	cbz	r3, 426e <SystemInit+0x132>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    425e:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    4262:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    4266:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    426a:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    426e:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    4272:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    4276:	2a00      	cmp	r2, #0
    4278:	db03      	blt.n	4282 <SystemInit+0x146>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    427a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    427e:	2b00      	cmp	r3, #0
    4280:	da22      	bge.n	42c8 <SystemInit+0x18c>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    4282:	491d      	ldr	r1, [pc, #116]	; (42f8 <SystemInit+0x1bc>)
    4284:	2301      	movs	r3, #1
    4286:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    428a:	f7ff ff4f 	bl	412c <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    428e:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    4292:	2412      	movs	r4, #18
    4294:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    4298:	f7ff ff48 	bl	412c <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    429c:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    42a0:	f7ff ff44 	bl	412c <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    42a4:	2300      	movs	r3, #0
    42a6:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    42aa:	f7ff ff3f 	bl	412c <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
    42ae:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    42b2:	4912      	ldr	r1, [pc, #72]	; (42fc <SystemInit+0x1c0>)
    42b4:	4b12      	ldr	r3, [pc, #72]	; (4300 <SystemInit+0x1c4>)
    42b6:	68ca      	ldr	r2, [r1, #12]
    42b8:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    42bc:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    42be:	60cb      	str	r3, [r1, #12]
    42c0:	f3bf 8f4f 	dsb	sy
    __NOP();
    42c4:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    42c6:	e7fd      	b.n	42c4 <SystemInit+0x188>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    42c8:	4b0e      	ldr	r3, [pc, #56]	; (4304 <SystemInit+0x1c8>)
    42ca:	4a0f      	ldr	r2, [pc, #60]	; (4308 <SystemInit+0x1cc>)
    42cc:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
    42ce:	bd10      	pop	{r4, pc}
    42d0:	4000c000 	.word	0x4000c000
    42d4:	4000568c 	.word	0x4000568c
    42d8:	00038148 	.word	0x00038148
    42dc:	4000f000 	.word	0x4000f000
    42e0:	40000ee4 	.word	0x40000ee4
    42e4:	10000258 	.word	0x10000258
    42e8:	40029640 	.word	0x40029640
    42ec:	10000130 	.word	0x10000130
    42f0:	10000134 	.word	0x10000134
    42f4:	00006a43 	.word	0x00006a43
    42f8:	4001e000 	.word	0x4001e000
    42fc:	e000ed00 	.word	0xe000ed00
    4300:	05fa0004 	.word	0x05fa0004
    4304:	200000d0 	.word	0x200000d0
    4308:	03d09000 	.word	0x03d09000

0000430c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
    430c:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    430e:	4c14      	ldr	r4, [pc, #80]	; (4360 <_DoInit+0x54>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    4310:	4a14      	ldr	r2, [pc, #80]	; (4364 <_DoInit+0x58>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    4312:	4915      	ldr	r1, [pc, #84]	; (4368 <_DoInit+0x5c>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    4314:	2303      	movs	r3, #3
    4316:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    4318:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
    431a:	4b14      	ldr	r3, [pc, #80]	; (436c <_DoInit+0x60>)
  p->aUp[0].sName         = "Terminal";
    431c:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    431e:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    4320:	f44f 6380 	mov.w	r3, #1024	; 0x400
    4324:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
    4326:	2300      	movs	r3, #0
    4328:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    432a:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    432c:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
    432e:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    4330:	4a0f      	ldr	r2, [pc, #60]	; (4370 <_DoInit+0x64>)
    4332:	6662      	str	r2, [r4, #100]	; 0x64
  STRCPY((char*)&p->acID[7], "RTT");
    4334:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    4336:	2210      	movs	r2, #16
    4338:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    433a:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    433c:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    433e:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
    4340:	f001 fbba 	bl	5ab8 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    4344:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
    4348:	490a      	ldr	r1, [pc, #40]	; (4374 <_DoInit+0x68>)
    434a:	4620      	mov	r0, r4
    434c:	f001 fbb4 	bl	5ab8 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    4350:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
    4354:	2320      	movs	r3, #32
    4356:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    4358:	f3bf 8f5f 	dmb	sy
}
    435c:	bd10      	pop	{r4, pc}
    435e:	bf00      	nop
    4360:	20000918 	.word	0x20000918
    4364:	00006a4f 	.word	0x00006a4f
    4368:	00006a58 	.word	0x00006a58
    436c:	20000a21 	.word	0x20000a21
    4370:	20000a11 	.word	0x20000a11
    4374:	00006a5c 	.word	0x00006a5c

00004378 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    4378:	4b0e      	ldr	r3, [pc, #56]	; (43b4 <z_sys_init_run_level+0x3c>)
{
    437a:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    437c:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    4380:	3001      	adds	r0, #1
    4382:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    4386:	42a6      	cmp	r6, r4
    4388:	d800      	bhi.n	438c <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    438a:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    438c:	e9d4 3500 	ldrd	r3, r5, [r4]
    4390:	4628      	mov	r0, r5
    4392:	4798      	blx	r3
		if (dev != NULL) {
    4394:	b165      	cbz	r5, 43b0 <z_sys_init_run_level+0x38>
			if (rc != 0) {
    4396:	68eb      	ldr	r3, [r5, #12]
    4398:	b130      	cbz	r0, 43a8 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    439a:	2800      	cmp	r0, #0
    439c:	bfb8      	it	lt
    439e:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    43a0:	28ff      	cmp	r0, #255	; 0xff
    43a2:	bfa8      	it	ge
    43a4:	20ff      	movge	r0, #255	; 0xff
    43a6:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    43a8:	785a      	ldrb	r2, [r3, #1]
    43aa:	f042 0201 	orr.w	r2, r2, #1
    43ae:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    43b0:	3408      	adds	r4, #8
    43b2:	e7e8      	b.n	4386 <z_sys_init_run_level+0xe>
    43b4:	000067ec 	.word	0x000067ec

000043b8 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
    43b8:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
    43ba:	4605      	mov	r5, r0
    43bc:	b910      	cbnz	r0, 43c4 <z_impl_device_get_binding+0xc>
		return NULL;
    43be:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
    43c0:	4620      	mov	r0, r4
    43c2:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
    43c4:	7803      	ldrb	r3, [r0, #0]
    43c6:	2b00      	cmp	r3, #0
    43c8:	d0f9      	beq.n	43be <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
    43ca:	4a0f      	ldr	r2, [pc, #60]	; (4408 <z_impl_device_get_binding+0x50>)
    43cc:	4c0f      	ldr	r4, [pc, #60]	; (440c <z_impl_device_get_binding+0x54>)
    43ce:	4616      	mov	r6, r2
    43d0:	4294      	cmp	r4, r2
    43d2:	d108      	bne.n	43e6 <z_impl_device_get_binding+0x2e>
	for (dev = __device_start; dev != __device_end; dev++) {
    43d4:	4c0d      	ldr	r4, [pc, #52]	; (440c <z_impl_device_get_binding+0x54>)
    43d6:	42b4      	cmp	r4, r6
    43d8:	d0f1      	beq.n	43be <z_impl_device_get_binding+0x6>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    43da:	4620      	mov	r0, r4
    43dc:	f001 fdaf 	bl	5f3e <z_device_ready>
    43e0:	b950      	cbnz	r0, 43f8 <z_impl_device_get_binding+0x40>
	for (dev = __device_start; dev != __device_end; dev++) {
    43e2:	3418      	adds	r4, #24
    43e4:	e7f7      	b.n	43d6 <z_impl_device_get_binding+0x1e>
		if (z_device_ready(dev) && (dev->name == name)) {
    43e6:	4620      	mov	r0, r4
    43e8:	f001 fda9 	bl	5f3e <z_device_ready>
    43ec:	b110      	cbz	r0, 43f4 <z_impl_device_get_binding+0x3c>
    43ee:	6823      	ldr	r3, [r4, #0]
    43f0:	42ab      	cmp	r3, r5
    43f2:	d0e5      	beq.n	43c0 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
    43f4:	3418      	adds	r4, #24
    43f6:	e7eb      	b.n	43d0 <z_impl_device_get_binding+0x18>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    43f8:	6821      	ldr	r1, [r4, #0]
    43fa:	4628      	mov	r0, r5
    43fc:	f001 fb76 	bl	5aec <strcmp>
    4400:	2800      	cmp	r0, #0
    4402:	d1ee      	bne.n	43e2 <z_impl_device_get_binding+0x2a>
    4404:	e7dc      	b.n	43c0 <z_impl_device_get_binding+0x8>
    4406:	bf00      	nop
    4408:	00006300 	.word	0x00006300
    440c:	00006288 	.word	0x00006288

00004410 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    4410:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    4412:	4c09      	ldr	r4, [pc, #36]	; (4438 <idle+0x28>)
	__asm__ volatile(
    4414:	f04f 0220 	mov.w	r2, #32
    4418:	f3ef 8311 	mrs	r3, BASEPRI
    441c:	f382 8812 	msr	BASEPRI_MAX, r2
    4420:	f3bf 8f6f 	isb	sy
    4424:	f001 fec7 	bl	61b6 <z_get_next_timeout_expiry>
    4428:	61a0      	str	r0, [r4, #24]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (pm_system_suspend(_kernel.idle) == false) {
    442a:	f7fd fe23 	bl	2074 <pm_system_suspend>
    442e:	2800      	cmp	r0, #0
    4430:	d1f0      	bne.n	4414 <idle+0x4>
	arch_cpu_idle();
    4432:	f7fd fed5 	bl	21e0 <arch_cpu_idle>
}
    4436:	e7ed      	b.n	4414 <idle+0x4>
    4438:	200009c0 	.word	0x200009c0

0000443c <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
    443c:	b530      	push	{r4, r5, lr}
	snprintk(tname, 8, "idle %02d", i);
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
    443e:	2300      	movs	r3, #0
{
    4440:	b087      	sub	sp, #28
	z_setup_new_thread(thread, stack,
    4442:	2201      	movs	r2, #1
    4444:	e9cd 2304 	strd	r2, r3, [sp, #16]
    4448:	220f      	movs	r2, #15
    444a:	e9cd 3202 	strd	r3, r2, [sp, #8]
	struct k_thread *thread = &z_idle_threads[i];
    444e:	4c0d      	ldr	r4, [pc, #52]	; (4484 <init_idle_thread+0x48>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    4450:	4a0d      	ldr	r2, [pc, #52]	; (4488 <init_idle_thread+0x4c>)
	z_setup_new_thread(thread, stack,
    4452:	9301      	str	r3, [sp, #4]
    4454:	490d      	ldr	r1, [pc, #52]	; (448c <init_idle_thread+0x50>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    4456:	2318      	movs	r3, #24
	struct k_thread *thread = &z_idle_threads[i];
    4458:	eb04 14c0 	add.w	r4, r4, r0, lsl #7
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    445c:	fb03 2300 	mla	r3, r3, r0, r2
	z_setup_new_thread(thread, stack,
    4460:	f44f 75b0 	mov.w	r5, #352	; 0x160
    4464:	9300      	str	r3, [sp, #0]
    4466:	fb05 1100 	mla	r1, r5, r0, r1
    446a:	4b09      	ldr	r3, [pc, #36]	; (4490 <init_idle_thread+0x54>)
    446c:	f44f 72a0 	mov.w	r2, #320	; 0x140
    4470:	4620      	mov	r0, r4
    4472:	f000 fd61 	bl	4f38 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    4476:	7b63      	ldrb	r3, [r4, #13]
    4478:	f023 0304 	bic.w	r3, r3, #4
    447c:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
    447e:	b007      	add	sp, #28
    4480:	bd30      	pop	{r4, r5, pc}
    4482:	bf00      	nop
    4484:	200001c0 	.word	0x200001c0
    4488:	200009c0 	.word	0x200009c0
    448c:	20001400 	.word	0x20001400
    4490:	00004411 	.word	0x00004411

00004494 <bg_thread_main>:
{
    4494:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    4496:	4b0a      	ldr	r3, [pc, #40]	; (44c0 <bg_thread_main+0x2c>)
    4498:	2201      	movs	r2, #1
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    449a:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    449c:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    449e:	f7ff ff6b 	bl	4378 <z_sys_init_run_level>
	boot_banner();
    44a2:	f000 ff51 	bl	5348 <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    44a6:	2003      	movs	r0, #3
    44a8:	f7ff ff66 	bl	4378 <z_sys_init_run_level>
	z_init_static_threads();
    44ac:	f000 fd76 	bl	4f9c <z_init_static_threads>
	main();
    44b0:	f7fc fc1e 	bl	cf0 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    44b4:	4a03      	ldr	r2, [pc, #12]	; (44c4 <bg_thread_main+0x30>)
    44b6:	7b13      	ldrb	r3, [r2, #12]
    44b8:	f023 0301 	bic.w	r3, r3, #1
    44bc:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    44be:	bd08      	pop	{r3, pc}
    44c0:	20000e21 	.word	0x20000e21
    44c4:	20000240 	.word	0x20000240

000044c8 <z_bss_zero>:
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    44c8:	4802      	ldr	r0, [pc, #8]	; (44d4 <z_bss_zero+0xc>)
    44ca:	4a03      	ldr	r2, [pc, #12]	; (44d8 <z_bss_zero+0x10>)
    44cc:	2100      	movs	r1, #0
    44ce:	1a12      	subs	r2, r2, r0
    44d0:	f001 bb23 	b.w	5b1a <memset>
    44d4:	200001a0 	.word	0x200001a0
    44d8:	20000fe0 	.word	0x20000fe0

000044dc <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    44dc:	b580      	push	{r7, lr}
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    44de:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 45b8 <z_cstart+0xdc>
    44e2:	b0a6      	sub	sp, #152	; 0x98
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    44e4:	f388 8808 	msr	MSP, r8
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    44e8:	4d2d      	ldr	r5, [pc, #180]	; (45a0 <z_cstart+0xc4>)
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
    44ea:	4e2e      	ldr	r6, [pc, #184]	; (45a4 <z_cstart+0xc8>)
    44ec:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    44ee:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 45bc <z_cstart+0xe0>
    44f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    44f6:	2400      	movs	r4, #0
    44f8:	616b      	str	r3, [r5, #20]
    44fa:	23e0      	movs	r3, #224	; 0xe0
    44fc:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    4500:	77ec      	strb	r4, [r5, #31]
    4502:	762c      	strb	r4, [r5, #24]
    4504:	766c      	strb	r4, [r5, #25]
    4506:	76ac      	strb	r4, [r5, #26]
    4508:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    450c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    450e:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    4512:	626b      	str	r3, [r5, #36]	; 0x24
    4514:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    4518:	f7fe f8bc 	bl	2694 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    451c:	f7fd fe5a 	bl	21d4 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    4520:	f04f 33ff 	mov.w	r3, #4294967295
    4524:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    4526:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    4528:	f7fe f9aa 	bl	2880 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    452c:	f7fe f91a 	bl	2764 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
    4530:	f240 1301 	movw	r3, #257	; 0x101
    4534:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    4538:	ab06      	add	r3, sp, #24
    453a:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
    453c:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    4540:	f001 fcfc 	bl	5f3c <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    4544:	4620      	mov	r0, r4
    4546:	f7ff ff17 	bl	4378 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    454a:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
    454c:	4d16      	ldr	r5, [pc, #88]	; (45a8 <z_cstart+0xcc>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    454e:	f7ff ff13 	bl	4378 <z_sys_init_run_level>
	z_sched_init();
    4552:	f000 fb9b 	bl	4c8c <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    4556:	4b15      	ldr	r3, [pc, #84]	; (45ac <z_cstart+0xd0>)
    4558:	9305      	str	r3, [sp, #20]
    455a:	2301      	movs	r3, #1
    455c:	4914      	ldr	r1, [pc, #80]	; (45b0 <z_cstart+0xd4>)
    455e:	9400      	str	r4, [sp, #0]
    4560:	e9cd 4303 	strd	r4, r3, [sp, #12]
    4564:	f44f 6280 	mov.w	r2, #1024	; 0x400
    4568:	464b      	mov	r3, r9
    456a:	e9cd 4401 	strd	r4, r4, [sp, #4]
    456e:	4628      	mov	r0, r5
	_kernel.ready_q.cache = &z_main_thread;
    4570:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    4572:	f000 fce1 	bl	4f38 <z_setup_new_thread>
    4576:	7b6a      	ldrb	r2, [r5, #13]
    4578:	f022 0204 	bic.w	r2, r2, #4
    457c:	736a      	strb	r2, [r5, #13]
    457e:	4607      	mov	r7, r0
	z_ready_thread(&z_main_thread);
    4580:	4628      	mov	r0, r5
    4582:	f001 fd85 	bl	6090 <z_ready_thread>
		init_idle_thread(i);
    4586:	4620      	mov	r0, r4
    4588:	f7ff ff58 	bl	443c <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    458c:	4b09      	ldr	r3, [pc, #36]	; (45b4 <z_cstart+0xd8>)
    458e:	60f3      	str	r3, [r6, #12]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    4590:	464a      	mov	r2, r9
    4592:	4639      	mov	r1, r7
    4594:	4628      	mov	r0, r5
		_kernel.cpus[i].id = i;
    4596:	7534      	strb	r4, [r6, #20]
		_kernel.cpus[i].irq_stack =
    4598:	f8c6 8004 	str.w	r8, [r6, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    459c:	f7fd ff38 	bl	2410 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    45a0:	e000ed00 	.word	0xe000ed00
    45a4:	200009c0 	.word	0x200009c0
    45a8:	20000240 	.word	0x20000240
    45ac:	00006a63 	.word	0x00006a63
    45b0:	20000fe0 	.word	0x20000fe0
    45b4:	200001c0 	.word	0x200001c0
    45b8:	20001d80 	.word	0x20001d80
    45bc:	00004495 	.word	0x00004495

000045c0 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
    45c0:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    45c2:	4b0e      	ldr	r3, [pc, #56]	; (45fc <init_mem_slab_module+0x3c>)
    45c4:	4c0e      	ldr	r4, [pc, #56]	; (4600 <init_mem_slab_module+0x40>)
    45c6:	42a3      	cmp	r3, r4
    45c8:	d301      	bcc.n	45ce <init_mem_slab_module+0xe>
			goto out;
		}
		z_object_init(slab);
	}

out:
    45ca:	2000      	movs	r0, #0
	return rc;
}
    45cc:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    45ce:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
    45d2:	ea41 0200 	orr.w	r2, r1, r0
    45d6:	f012 0203 	ands.w	r2, r2, #3
    45da:	d10b      	bne.n	45f4 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
    45dc:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
    45de:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    45e0:	42aa      	cmp	r2, r5
    45e2:	d101      	bne.n	45e8 <init_mem_slab_module+0x28>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    45e4:	331c      	adds	r3, #28
    45e6:	e7ee      	b.n	45c6 <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
    45e8:	695e      	ldr	r6, [r3, #20]
    45ea:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    45ec:	3201      	adds	r2, #1
		slab->free_list = p;
    45ee:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
    45f0:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
    45f2:	e7f5      	b.n	45e0 <init_mem_slab_module+0x20>
		return -EINVAL;
    45f4:	f06f 0015 	mvn.w	r0, #21
	return rc;
    45f8:	e7e8      	b.n	45cc <init_mem_slab_module+0xc>
    45fa:	bf00      	nop
    45fc:	20000150 	.word	0x20000150
    4600:	20000150 	.word	0x20000150

00004604 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    4604:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
    4606:	460c      	mov	r4, r1
    4608:	4616      	mov	r6, r2
    460a:	461f      	mov	r7, r3
    460c:	f04f 0320 	mov.w	r3, #32
    4610:	f3ef 8111 	mrs	r1, BASEPRI
    4614:	f383 8812 	msr	BASEPRI_MAX, r3
    4618:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    461c:	6943      	ldr	r3, [r0, #20]
    461e:	b15b      	cbz	r3, 4638 <k_mem_slab_alloc+0x34>
		/* take a free block */
		*mem = slab->free_list;
    4620:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    4622:	681b      	ldr	r3, [r3, #0]
    4624:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    4626:	6983      	ldr	r3, [r0, #24]
    4628:	3301      	adds	r3, #1
    462a:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    462c:	2000      	movs	r0, #0
	__asm__ volatile(
    462e:	f381 8811 	msr	BASEPRI, r1
    4632:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
    4636:	e011      	b.n	465c <k_mem_slab_alloc+0x58>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    4638:	ea56 0207 	orrs.w	r2, r6, r7
    463c:	d103      	bne.n	4646 <k_mem_slab_alloc+0x42>
		*mem = NULL;
    463e:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
    4640:	f06f 000b 	mvn.w	r0, #11
    4644:	e7f3      	b.n	462e <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    4646:	4602      	mov	r2, r0
    4648:	e9cd 6700 	strd	r6, r7, [sp]
    464c:	3008      	adds	r0, #8
    464e:	f000 fa6f 	bl	4b30 <z_pend_curr>
		if (result == 0) {
    4652:	b918      	cbnz	r0, 465c <k_mem_slab_alloc+0x58>
			*mem = _current->base.swap_data;
    4654:	4b02      	ldr	r3, [pc, #8]	; (4660 <k_mem_slab_alloc+0x5c>)
    4656:	689b      	ldr	r3, [r3, #8]
    4658:	695b      	ldr	r3, [r3, #20]
    465a:	6023      	str	r3, [r4, #0]
}
    465c:	b002      	add	sp, #8
    465e:	bdd0      	pop	{r4, r6, r7, pc}
    4660:	200009c0 	.word	0x200009c0

00004664 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    4664:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    4668:	4604      	mov	r4, r0
    466a:	4616      	mov	r6, r2
    466c:	461f      	mov	r7, r3
	__asm__ volatile(
    466e:	f04f 0320 	mov.w	r3, #32
    4672:	f3ef 8811 	mrs	r8, BASEPRI
    4676:	f383 8812 	msr	BASEPRI_MAX, r3
    467a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    467e:	68c3      	ldr	r3, [r0, #12]
    4680:	4a35      	ldr	r2, [pc, #212]	; (4758 <z_impl_k_mutex_lock+0xf4>)
    4682:	b16b      	cbz	r3, 46a0 <z_impl_k_mutex_lock+0x3c>
    4684:	6880      	ldr	r0, [r0, #8]
    4686:	6891      	ldr	r1, [r2, #8]
    4688:	4288      	cmp	r0, r1
    468a:	d019      	beq.n	46c0 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    468c:	ea56 0307 	orrs.w	r3, r6, r7
    4690:	d118      	bne.n	46c4 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
    4692:	f388 8811 	msr	BASEPRI, r8
    4696:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    469a:	f06f 000f 	mvn.w	r0, #15
    469e:	e00c      	b.n	46ba <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
    46a0:	6891      	ldr	r1, [r2, #8]
    46a2:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    46a6:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
    46a8:	3301      	adds	r3, #1
    46aa:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    46ac:	6893      	ldr	r3, [r2, #8]
    46ae:	60a3      	str	r3, [r4, #8]
    46b0:	f388 8811 	msr	BASEPRI, r8
    46b4:	f3bf 8f6f 	isb	sy
		return 0;
    46b8:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    46ba:	b002      	add	sp, #8
    46bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    46c0:	6921      	ldr	r1, [r4, #16]
    46c2:	e7f0      	b.n	46a6 <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    46c4:	f991 100e 	ldrsb.w	r1, [r1, #14]
    46c8:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
    46cc:	4299      	cmp	r1, r3
    46ce:	bfa8      	it	ge
    46d0:	4619      	movge	r1, r3
    46d2:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    46d6:	4291      	cmp	r1, r2
    46d8:	bfb8      	it	lt
    46da:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    46dc:	428b      	cmp	r3, r1
    46de:	dd2f      	ble.n	4740 <z_impl_k_mutex_lock+0xdc>
		return z_set_prio(mutex->owner, new_prio);
    46e0:	f000 fa3a 	bl	4b58 <z_set_prio>
    46e4:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    46e6:	e9cd 6700 	strd	r6, r7, [sp]
    46ea:	481c      	ldr	r0, [pc, #112]	; (475c <z_impl_k_mutex_lock+0xf8>)
    46ec:	4622      	mov	r2, r4
    46ee:	4641      	mov	r1, r8
    46f0:	f000 fa1e 	bl	4b30 <z_pend_curr>
	if (got_mutex == 0) {
    46f4:	2800      	cmp	r0, #0
    46f6:	d0e0      	beq.n	46ba <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
    46f8:	f04f 0320 	mov.w	r3, #32
    46fc:	f3ef 8611 	mrs	r6, BASEPRI
    4700:	f383 8812 	msr	BASEPRI_MAX, r3
    4704:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    4708:	6823      	ldr	r3, [r4, #0]
    470a:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    470c:	429c      	cmp	r4, r3
    470e:	d00a      	beq.n	4726 <z_impl_k_mutex_lock+0xc2>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    4710:	b14b      	cbz	r3, 4726 <z_impl_k_mutex_lock+0xc2>
    4712:	f993 300e 	ldrsb.w	r3, [r3, #14]
    4716:	4299      	cmp	r1, r3
    4718:	bfa8      	it	ge
    471a:	4619      	movge	r1, r3
    471c:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    4720:	4299      	cmp	r1, r3
    4722:	bfb8      	it	lt
    4724:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    4726:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
    4728:	f990 300e 	ldrsb.w	r3, [r0, #14]
    472c:	4299      	cmp	r1, r3
    472e:	d109      	bne.n	4744 <z_impl_k_mutex_lock+0xe0>
	if (resched) {
    4730:	b16d      	cbz	r5, 474e <z_impl_k_mutex_lock+0xea>
		z_reschedule(&lock, key);
    4732:	480a      	ldr	r0, [pc, #40]	; (475c <z_impl_k_mutex_lock+0xf8>)
    4734:	4631      	mov	r1, r6
    4736:	f000 f8a1 	bl	487c <z_reschedule>
	return -EAGAIN;
    473a:	f06f 000a 	mvn.w	r0, #10
    473e:	e7bc      	b.n	46ba <z_impl_k_mutex_lock+0x56>
	bool resched = false;
    4740:	2500      	movs	r5, #0
    4742:	e7d0      	b.n	46e6 <z_impl_k_mutex_lock+0x82>
		return z_set_prio(mutex->owner, new_prio);
    4744:	f000 fa08 	bl	4b58 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    4748:	2800      	cmp	r0, #0
    474a:	d1f2      	bne.n	4732 <z_impl_k_mutex_lock+0xce>
    474c:	e7f0      	b.n	4730 <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
    474e:	f386 8811 	msr	BASEPRI, r6
    4752:	f3bf 8f6f 	isb	sy
    4756:	e7f0      	b.n	473a <z_impl_k_mutex_lock+0xd6>
    4758:	200009c0 	.word	0x200009c0
    475c:	20000e22 	.word	0x20000e22

00004760 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    4760:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    4762:	6883      	ldr	r3, [r0, #8]
{
    4764:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
    4766:	2b00      	cmp	r3, #0
    4768:	d036      	beq.n	47d8 <z_impl_k_mutex_unlock+0x78>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    476a:	4a1e      	ldr	r2, [pc, #120]	; (47e4 <z_impl_k_mutex_unlock+0x84>)
    476c:	6892      	ldr	r2, [r2, #8]
    476e:	4293      	cmp	r3, r2
    4770:	d135      	bne.n	47de <z_impl_k_mutex_unlock+0x7e>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    4772:	7bda      	ldrb	r2, [r3, #15]
    4774:	3a01      	subs	r2, #1
    4776:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    4778:	68c3      	ldr	r3, [r0, #12]
    477a:	2b01      	cmp	r3, #1
    477c:	d905      	bls.n	478a <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
    477e:	3b01      	subs	r3, #1
    4780:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    4782:	f000 fa67 	bl	4c54 <k_sched_unlock>

	return 0;
    4786:	2000      	movs	r0, #0
}
    4788:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    478a:	f04f 0320 	mov.w	r3, #32
    478e:	f3ef 8511 	mrs	r5, BASEPRI
    4792:	f383 8812 	msr	BASEPRI_MAX, r3
    4796:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    479a:	6901      	ldr	r1, [r0, #16]
    479c:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
    479e:	f990 300e 	ldrsb.w	r3, [r0, #14]
    47a2:	4299      	cmp	r1, r3
    47a4:	d001      	beq.n	47aa <z_impl_k_mutex_unlock+0x4a>
		return z_set_prio(mutex->owner, new_prio);
    47a6:	f000 f9d7 	bl	4b58 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    47aa:	4620      	mov	r0, r4
    47ac:	f001 fccf 	bl	614e <z_unpend_first_thread>
	mutex->owner = new_owner;
    47b0:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    47b2:	b158      	cbz	r0, 47cc <z_impl_k_mutex_unlock+0x6c>
		mutex->owner_orig_prio = new_owner->base.prio;
    47b4:	f990 200e 	ldrsb.w	r2, [r0, #14]
    47b8:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    47ba:	2200      	movs	r2, #0
    47bc:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
    47be:	f001 fc67 	bl	6090 <z_ready_thread>
		z_reschedule(&lock, key);
    47c2:	4809      	ldr	r0, [pc, #36]	; (47e8 <z_impl_k_mutex_unlock+0x88>)
    47c4:	4629      	mov	r1, r5
    47c6:	f000 f859 	bl	487c <z_reschedule>
    47ca:	e7da      	b.n	4782 <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
    47cc:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    47ce:	f385 8811 	msr	BASEPRI, r5
    47d2:	f3bf 8f6f 	isb	sy
    47d6:	e7d4      	b.n	4782 <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
    47d8:	f06f 0015 	mvn.w	r0, #21
    47dc:	e7d4      	b.n	4788 <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
    47de:	f04f 30ff 	mov.w	r0, #4294967295
    47e2:	e7d1      	b.n	4788 <z_impl_k_mutex_unlock+0x28>
    47e4:	200009c0 	.word	0x200009c0
    47e8:	20000e22 	.word	0x20000e22

000047ec <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
    47ec:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
    47ee:	4c08      	ldr	r4, [pc, #32]	; (4810 <z_reset_time_slice+0x24>)
    47f0:	6823      	ldr	r3, [r4, #0]
    47f2:	b15b      	cbz	r3, 480c <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    47f4:	f7ff f826 	bl	3844 <sys_clock_elapsed>
    47f8:	4603      	mov	r3, r0
    47fa:	6820      	ldr	r0, [r4, #0]
    47fc:	4a05      	ldr	r2, [pc, #20]	; (4814 <z_reset_time_slice+0x28>)
    47fe:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
    4800:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    4804:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
    4806:	2100      	movs	r1, #0
    4808:	f001 bce5 	b.w	61d6 <z_set_timeout_expiry>
}
    480c:	bd10      	pop	{r4, pc}
    480e:	bf00      	nop
    4810:	200009f0 	.word	0x200009f0
    4814:	200009c0 	.word	0x200009c0

00004818 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
    4818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    481a:	4604      	mov	r4, r0
    481c:	460d      	mov	r5, r1
	__asm__ volatile(
    481e:	f04f 0320 	mov.w	r3, #32
    4822:	f3ef 8611 	mrs	r6, BASEPRI
    4826:	f383 8812 	msr	BASEPRI_MAX, r3
    482a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    482e:	4b10      	ldr	r3, [pc, #64]	; (4870 <k_sched_time_slice_set+0x58>)
    4830:	2200      	movs	r2, #0
    4832:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    4836:	f240 30e7 	movw	r0, #999	; 0x3e7
    483a:	2100      	movs	r1, #0
    483c:	611a      	str	r2, [r3, #16]
    483e:	fbe7 0104 	umlal	r0, r1, r7, r4
    4842:	2300      	movs	r3, #0
    4844:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    4848:	f7fc f8d8 	bl	9fc <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    484c:	2c00      	cmp	r4, #0
    484e:	4b09      	ldr	r3, [pc, #36]	; (4874 <k_sched_time_slice_set+0x5c>)
    4850:	dc09      	bgt.n	4866 <k_sched_time_slice_set+0x4e>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
    4852:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
    4854:	4b08      	ldr	r3, [pc, #32]	; (4878 <k_sched_time_slice_set+0x60>)
    4856:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
    4858:	f7ff ffc8 	bl	47ec <z_reset_time_slice>
	__asm__ volatile(
    485c:	f386 8811 	msr	BASEPRI, r6
    4860:	f3bf 8f6f 	isb	sy
	}
}
    4864:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_time = MAX(2, slice_time);
    4866:	2802      	cmp	r0, #2
    4868:	bfb8      	it	lt
    486a:	2002      	movlt	r0, #2
    486c:	e7f1      	b.n	4852 <k_sched_time_slice_set+0x3a>
    486e:	bf00      	nop
    4870:	200009c0 	.word	0x200009c0
    4874:	200009f0 	.word	0x200009f0
    4878:	200009ec 	.word	0x200009ec

0000487c <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
    487c:	b949      	cbnz	r1, 4892 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    487e:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
    4882:	b930      	cbnz	r0, 4892 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
    4884:	4b05      	ldr	r3, [pc, #20]	; (489c <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
    4886:	69da      	ldr	r2, [r3, #28]
    4888:	689b      	ldr	r3, [r3, #8]
    488a:	429a      	cmp	r2, r3
    488c:	d001      	beq.n	4892 <z_reschedule+0x16>
	ret = arch_swap(key);
    488e:	f7fd bd6f 	b.w	2370 <arch_swap>
    4892:	f381 8811 	msr	BASEPRI, r1
    4896:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
    489a:	4770      	bx	lr
    489c:	200009c0 	.word	0x200009c0

000048a0 <k_sched_lock>:
	__asm__ volatile(
    48a0:	f04f 0320 	mov.w	r3, #32
    48a4:	f3ef 8111 	mrs	r1, BASEPRI
    48a8:	f383 8812 	msr	BASEPRI_MAX, r3
    48ac:	f3bf 8f6f 	isb	sy
    48b0:	4b04      	ldr	r3, [pc, #16]	; (48c4 <k_sched_lock+0x24>)
    48b2:	689a      	ldr	r2, [r3, #8]
    48b4:	7bd3      	ldrb	r3, [r2, #15]
    48b6:	3b01      	subs	r3, #1
    48b8:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    48ba:	f381 8811 	msr	BASEPRI, r1
    48be:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    48c2:	4770      	bx	lr
    48c4:	200009c0 	.word	0x200009c0

000048c8 <update_cache>:
{
    48c8:	b538      	push	{r3, r4, r5, lr}
    48ca:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
    48cc:	480c      	ldr	r0, [pc, #48]	; (4900 <update_cache+0x38>)
    48ce:	4d0d      	ldr	r5, [pc, #52]	; (4904 <update_cache+0x3c>)
    48d0:	f001 fbd4 	bl	607c <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    48d4:	4604      	mov	r4, r0
    48d6:	b900      	cbnz	r0, 48da <update_cache+0x12>
    48d8:	68ec      	ldr	r4, [r5, #12]
	if (preempt_ok != 0) {
    48da:	68ab      	ldr	r3, [r5, #8]
    48dc:	b94a      	cbnz	r2, 48f2 <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
    48de:	7b5a      	ldrb	r2, [r3, #13]
    48e0:	06d2      	lsls	r2, r2, #27
    48e2:	d106      	bne.n	48f2 <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    48e4:	69a2      	ldr	r2, [r4, #24]
    48e6:	b922      	cbnz	r2, 48f2 <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
    48e8:	89da      	ldrh	r2, [r3, #14]
    48ea:	2a7f      	cmp	r2, #127	; 0x7f
    48ec:	d901      	bls.n	48f2 <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
    48ee:	61eb      	str	r3, [r5, #28]
}
    48f0:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
    48f2:	429c      	cmp	r4, r3
    48f4:	d001      	beq.n	48fa <update_cache+0x32>
			z_reset_time_slice();
    48f6:	f7ff ff79 	bl	47ec <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    48fa:	61ec      	str	r4, [r5, #28]
}
    48fc:	e7f8      	b.n	48f0 <update_cache+0x28>
    48fe:	bf00      	nop
    4900:	200009e0 	.word	0x200009e0
    4904:	200009c0 	.word	0x200009c0

00004908 <move_thread_to_end_of_prio_q>:
{
    4908:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    490a:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    490e:	7b43      	ldrb	r3, [r0, #13]
    4910:	2a00      	cmp	r2, #0
{
    4912:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    4914:	da04      	bge.n	4920 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4916:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    491a:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    491c:	f001 fb86 	bl	602c <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    4920:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
    4922:	4a17      	ldr	r2, [pc, #92]	; (4980 <move_thread_to_end_of_prio_q+0x78>)
    4924:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4928:	4610      	mov	r0, r2
    492a:	734b      	strb	r3, [r1, #13]
    492c:	f850 3f20 	ldr.w	r3, [r0, #32]!
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    4930:	6a55      	ldr	r5, [r2, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4932:	4283      	cmp	r3, r0
    4934:	bf08      	it	eq
    4936:	2300      	moveq	r3, #0
    4938:	2b00      	cmp	r3, #0
    493a:	bf38      	it	cc
    493c:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    493e:	b1cb      	cbz	r3, 4974 <move_thread_to_end_of_prio_q+0x6c>
	int32_t b1 = thread_1->base.prio;
    4940:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
    4944:	f993 400e 	ldrsb.w	r4, [r3, #14]
	if (b1 != b2) {
    4948:	42a6      	cmp	r6, r4
    494a:	d00f      	beq.n	496c <move_thread_to_end_of_prio_q+0x64>
		return b2 - b1;
    494c:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    494e:	2c00      	cmp	r4, #0
    4950:	dd0c      	ble.n	496c <move_thread_to_end_of_prio_q+0x64>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    4952:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
    4954:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
    4958:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    495a:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
    495c:	6890      	ldr	r0, [r2, #8]
    495e:	1a43      	subs	r3, r0, r1
    4960:	4258      	negs	r0, r3
}
    4962:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    4966:	4158      	adcs	r0, r3
    4968:	f7ff bfae 	b.w	48c8 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    496c:	42ab      	cmp	r3, r5
    496e:	d001      	beq.n	4974 <move_thread_to_end_of_prio_q+0x6c>
    4970:	681b      	ldr	r3, [r3, #0]
    4972:	e7e4      	b.n	493e <move_thread_to_end_of_prio_q+0x36>
	node->prev = tail;
    4974:	e9c1 0500 	strd	r0, r5, [r1]
	tail->next = node;
    4978:	6029      	str	r1, [r5, #0]
	list->tail = node;
    497a:	6251      	str	r1, [r2, #36]	; 0x24
}
    497c:	e7ee      	b.n	495c <move_thread_to_end_of_prio_q+0x54>
    497e:	bf00      	nop
    4980:	200009c0 	.word	0x200009c0

00004984 <z_time_slice>:
{
    4984:	b570      	push	{r4, r5, r6, lr}
    4986:	4601      	mov	r1, r0
	__asm__ volatile(
    4988:	f04f 0320 	mov.w	r3, #32
    498c:	f3ef 8411 	mrs	r4, BASEPRI
    4990:	f383 8812 	msr	BASEPRI_MAX, r3
    4994:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    4998:	4b16      	ldr	r3, [pc, #88]	; (49f4 <z_time_slice+0x70>)
    499a:	4a17      	ldr	r2, [pc, #92]	; (49f8 <z_time_slice+0x74>)
    499c:	6898      	ldr	r0, [r3, #8]
    499e:	6815      	ldr	r5, [r2, #0]
    49a0:	42a8      	cmp	r0, r5
    49a2:	461d      	mov	r5, r3
    49a4:	d106      	bne.n	49b4 <z_time_slice+0x30>
			z_reset_time_slice();
    49a6:	f7ff ff21 	bl	47ec <z_reset_time_slice>
	__asm__ volatile(
    49aa:	f384 8811 	msr	BASEPRI, r4
    49ae:	f3bf 8f6f 	isb	sy
}
    49b2:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
    49b4:	2600      	movs	r6, #0
    49b6:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
    49b8:	4a10      	ldr	r2, [pc, #64]	; (49fc <z_time_slice+0x78>)
    49ba:	6812      	ldr	r2, [r2, #0]
    49bc:	b1ba      	cbz	r2, 49ee <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
    49be:	89c2      	ldrh	r2, [r0, #14]
    49c0:	2a7f      	cmp	r2, #127	; 0x7f
    49c2:	d814      	bhi.n	49ee <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
    49c4:	7b42      	ldrb	r2, [r0, #13]
    49c6:	06d2      	lsls	r2, r2, #27
    49c8:	d111      	bne.n	49ee <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    49ca:	4a0d      	ldr	r2, [pc, #52]	; (4a00 <z_time_slice+0x7c>)
    49cc:	f990 600e 	ldrsb.w	r6, [r0, #14]
    49d0:	6812      	ldr	r2, [r2, #0]
    49d2:	4296      	cmp	r6, r2
    49d4:	db0b      	blt.n	49ee <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
    49d6:	4a0b      	ldr	r2, [pc, #44]	; (4a04 <z_time_slice+0x80>)
    49d8:	4290      	cmp	r0, r2
    49da:	d008      	beq.n	49ee <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
    49dc:	691a      	ldr	r2, [r3, #16]
    49de:	428a      	cmp	r2, r1
    49e0:	dc02      	bgt.n	49e8 <z_time_slice+0x64>
			move_thread_to_end_of_prio_q(_current);
    49e2:	f7ff ff91 	bl	4908 <move_thread_to_end_of_prio_q>
    49e6:	e7de      	b.n	49a6 <z_time_slice+0x22>
			_current_cpu->slice_ticks -= ticks;
    49e8:	1a52      	subs	r2, r2, r1
    49ea:	611a      	str	r2, [r3, #16]
    49ec:	e7dd      	b.n	49aa <z_time_slice+0x26>
		_current_cpu->slice_ticks = 0;
    49ee:	2300      	movs	r3, #0
    49f0:	612b      	str	r3, [r5, #16]
    49f2:	e7da      	b.n	49aa <z_time_slice+0x26>
    49f4:	200009c0 	.word	0x200009c0
    49f8:	200009e8 	.word	0x200009e8
    49fc:	200009f0 	.word	0x200009f0
    4a00:	200009ec 	.word	0x200009ec
    4a04:	200001c0 	.word	0x200001c0

00004a08 <ready_thread>:
{
    4a08:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    4a0a:	f990 300d 	ldrsb.w	r3, [r0, #13]
    4a0e:	7b42      	ldrb	r2, [r0, #13]
    4a10:	2b00      	cmp	r3, #0
    4a12:	db2d      	blt.n	4a70 <ready_thread+0x68>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    4a14:	06d3      	lsls	r3, r2, #27
    4a16:	d12b      	bne.n	4a70 <ready_thread+0x68>

int z_abort_timeout(struct _timeout *to);

static inline bool z_is_inactive_timeout(const struct _timeout *to)
{
	return !sys_dnode_is_linked(&to->node);
    4a18:	6983      	ldr	r3, [r0, #24]
    4a1a:	bb4b      	cbnz	r3, 4a70 <ready_thread+0x68>
	return list->head == list;
    4a1c:	4915      	ldr	r1, [pc, #84]	; (4a74 <ready_thread+0x6c>)
	thread->base.thread_state |= _THREAD_QUEUED;
    4a1e:	f062 027f 	orn	r2, r2, #127	; 0x7f
    4a22:	7342      	strb	r2, [r0, #13]
    4a24:	460a      	mov	r2, r1
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    4a26:	6a4d      	ldr	r5, [r1, #36]	; 0x24
	return list->head == list;
    4a28:	f852 4f20 	ldr.w	r4, [r2, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4a2c:	4294      	cmp	r4, r2
    4a2e:	bf18      	it	ne
    4a30:	4623      	movne	r3, r4
    4a32:	2b00      	cmp	r3, #0
    4a34:	bf38      	it	cc
    4a36:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4a38:	b1ab      	cbz	r3, 4a66 <ready_thread+0x5e>
	int32_t b1 = thread_1->base.prio;
    4a3a:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    4a3e:	f993 400e 	ldrsb.w	r4, [r3, #14]
	if (b1 != b2) {
    4a42:	42a6      	cmp	r6, r4
    4a44:	d00b      	beq.n	4a5e <ready_thread+0x56>
		return b2 - b1;
    4a46:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    4a48:	2c00      	cmp	r4, #0
    4a4a:	dd08      	ble.n	4a5e <ready_thread+0x56>
	sys_dnode_t *const prev = successor->prev;
    4a4c:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    4a4e:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
    4a52:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    4a54:	6058      	str	r0, [r3, #4]
}
    4a56:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    4a58:	2000      	movs	r0, #0
    4a5a:	f7ff bf35 	b.w	48c8 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    4a5e:	42ab      	cmp	r3, r5
    4a60:	d001      	beq.n	4a66 <ready_thread+0x5e>
    4a62:	681b      	ldr	r3, [r3, #0]
    4a64:	e7e8      	b.n	4a38 <ready_thread+0x30>
	node->prev = tail;
    4a66:	e9c0 2500 	strd	r2, r5, [r0]
	tail->next = node;
    4a6a:	6028      	str	r0, [r5, #0]
	list->tail = node;
    4a6c:	6248      	str	r0, [r1, #36]	; 0x24
}
    4a6e:	e7f2      	b.n	4a56 <ready_thread+0x4e>
}
    4a70:	bc70      	pop	{r4, r5, r6}
    4a72:	4770      	bx	lr
    4a74:	200009c0 	.word	0x200009c0

00004a78 <z_sched_start>:
{
    4a78:	b510      	push	{r4, lr}
	__asm__ volatile(
    4a7a:	f04f 0220 	mov.w	r2, #32
    4a7e:	f3ef 8411 	mrs	r4, BASEPRI
    4a82:	f382 8812 	msr	BASEPRI_MAX, r2
    4a86:	f3bf 8f6f 	isb	sy
	if (z_has_thread_started(thread)) {
    4a8a:	7b42      	ldrb	r2, [r0, #13]
    4a8c:	0751      	lsls	r1, r2, #29
    4a8e:	d404      	bmi.n	4a9a <z_sched_start+0x22>
	__asm__ volatile(
    4a90:	f384 8811 	msr	BASEPRI, r4
    4a94:	f3bf 8f6f 	isb	sy
}
    4a98:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    4a9a:	f022 0204 	bic.w	r2, r2, #4
    4a9e:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    4aa0:	f7ff ffb2 	bl	4a08 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    4aa4:	4621      	mov	r1, r4
    4aa6:	4802      	ldr	r0, [pc, #8]	; (4ab0 <z_sched_start+0x38>)
}
    4aa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    4aac:	f7ff bee6 	b.w	487c <z_reschedule>
    4ab0:	20000e22 	.word	0x20000e22

00004ab4 <unready_thread>:
{
    4ab4:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    4ab6:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    4aba:	7b43      	ldrb	r3, [r0, #13]
    4abc:	2a00      	cmp	r2, #0
{
    4abe:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    4ac0:	da04      	bge.n	4acc <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4ac2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4ac6:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    4ac8:	f001 fab0 	bl	602c <sys_dlist_remove>
	update_cache(thread == _current);
    4acc:	4b04      	ldr	r3, [pc, #16]	; (4ae0 <unready_thread+0x2c>)
    4ace:	6898      	ldr	r0, [r3, #8]
    4ad0:	1a43      	subs	r3, r0, r1
    4ad2:	4258      	negs	r0, r3
    4ad4:	4158      	adcs	r0, r3
}
    4ad6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    4ada:	f7ff bef5 	b.w	48c8 <update_cache>
    4ade:	bf00      	nop
    4ae0:	200009c0 	.word	0x200009c0

00004ae4 <pend>:
{
    4ae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4ae8:	4606      	mov	r6, r0
    4aea:	4614      	mov	r4, r2
    4aec:	461d      	mov	r5, r3
	__asm__ volatile(
    4aee:	f04f 0320 	mov.w	r3, #32
    4af2:	f3ef 8711 	mrs	r7, BASEPRI
    4af6:	f383 8812 	msr	BASEPRI_MAX, r3
    4afa:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
    4afe:	f001 faf9 	bl	60f4 <add_to_waitq_locked>
	__asm__ volatile(
    4b02:	f387 8811 	msr	BASEPRI, r7
    4b06:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    4b0a:	1c6b      	adds	r3, r5, #1
    4b0c:	bf08      	it	eq
    4b0e:	f1b4 3fff 	cmpeq.w	r4, #4294967295
    4b12:	d008      	beq.n	4b26 <pend+0x42>

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    4b14:	4622      	mov	r2, r4
    4b16:	462b      	mov	r3, r5
    4b18:	f106 0018 	add.w	r0, r6, #24
    4b1c:	4903      	ldr	r1, [pc, #12]	; (4b2c <pend+0x48>)
}
    4b1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4b22:	f000 bae9 	b.w	50f8 <z_add_timeout>
    4b26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4b2a:	bf00      	nop
    4b2c:	000060b1 	.word	0x000060b1

00004b30 <z_pend_curr>:
{
    4b30:	b510      	push	{r4, lr}
	pending_current = _current;
    4b32:	4b07      	ldr	r3, [pc, #28]	; (4b50 <z_pend_curr+0x20>)
    4b34:	6898      	ldr	r0, [r3, #8]
    4b36:	4b07      	ldr	r3, [pc, #28]	; (4b54 <z_pend_curr+0x24>)
{
    4b38:	460c      	mov	r4, r1
	pending_current = _current;
    4b3a:	6018      	str	r0, [r3, #0]
{
    4b3c:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
    4b3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    4b42:	f7ff ffcf 	bl	4ae4 <pend>
    4b46:	4620      	mov	r0, r4
}
    4b48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4b4c:	f7fd bc10 	b.w	2370 <arch_swap>
    4b50:	200009c0 	.word	0x200009c0
    4b54:	200009e8 	.word	0x200009e8

00004b58 <z_set_prio>:
{
    4b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4b5a:	4604      	mov	r4, r0
	__asm__ volatile(
    4b5c:	f04f 0320 	mov.w	r3, #32
    4b60:	f3ef 8611 	mrs	r6, BASEPRI
    4b64:	f383 8812 	msr	BASEPRI_MAX, r3
    4b68:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    4b6c:	7b43      	ldrb	r3, [r0, #13]
    4b6e:	06da      	lsls	r2, r3, #27
    4b70:	b249      	sxtb	r1, r1
    4b72:	d138      	bne.n	4be6 <z_set_prio+0x8e>
	return !sys_dnode_is_linked(&to->node);
    4b74:	6985      	ldr	r5, [r0, #24]
		if (need_sched) {
    4b76:	2d00      	cmp	r5, #0
    4b78:	d135      	bne.n	4be6 <z_set_prio+0x8e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4b7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4b7e:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    4b80:	f001 fa54 	bl	602c <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    4b84:	7b43      	ldrb	r3, [r0, #13]
				thread->base.prio = prio;
    4b86:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    4b88:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4b8c:	7343      	strb	r3, [r0, #13]
	return list->head == list;
    4b8e:	4817      	ldr	r0, [pc, #92]	; (4bec <z_set_prio+0x94>)
    4b90:	4603      	mov	r3, r0
    4b92:	f853 7f20 	ldr.w	r7, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4b96:	429f      	cmp	r7, r3
    4b98:	bf18      	it	ne
    4b9a:	463d      	movne	r5, r7
    4b9c:	2d00      	cmp	r5, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    4b9e:	6a47      	ldr	r7, [r0, #36]	; 0x24
    4ba0:	461a      	mov	r2, r3
    4ba2:	462b      	mov	r3, r5
    4ba4:	bf38      	it	cc
    4ba6:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4ba8:	b1c3      	cbz	r3, 4bdc <z_set_prio+0x84>
	int32_t b2 = thread_2->base.prio;
    4baa:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
    4bae:	42a9      	cmp	r1, r5
    4bb0:	d010      	beq.n	4bd4 <z_set_prio+0x7c>
		return b2 - b1;
    4bb2:	1a6d      	subs	r5, r5, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    4bb4:	2d00      	cmp	r5, #0
    4bb6:	dd0d      	ble.n	4bd4 <z_set_prio+0x7c>
	sys_dnode_t *const prev = successor->prev;
    4bb8:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    4bba:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    4bbe:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    4bc0:	605c      	str	r4, [r3, #4]
			update_cache(1);
    4bc2:	2001      	movs	r0, #1
    4bc4:	f7ff fe80 	bl	48c8 <update_cache>
    4bc8:	2001      	movs	r0, #1
	__asm__ volatile(
    4bca:	f386 8811 	msr	BASEPRI, r6
    4bce:	f3bf 8f6f 	isb	sy
}
    4bd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    4bd4:	42bb      	cmp	r3, r7
    4bd6:	d001      	beq.n	4bdc <z_set_prio+0x84>
    4bd8:	681b      	ldr	r3, [r3, #0]
    4bda:	e7e5      	b.n	4ba8 <z_set_prio+0x50>
	node->prev = tail;
    4bdc:	e9c4 2700 	strd	r2, r7, [r4]
	tail->next = node;
    4be0:	603c      	str	r4, [r7, #0]
	list->tail = node;
    4be2:	6244      	str	r4, [r0, #36]	; 0x24
}
    4be4:	e7ed      	b.n	4bc2 <z_set_prio+0x6a>
			thread->base.prio = prio;
    4be6:	73a1      	strb	r1, [r4, #14]
    4be8:	2000      	movs	r0, #0
    4bea:	e7ee      	b.n	4bca <z_set_prio+0x72>
    4bec:	200009c0 	.word	0x200009c0

00004bf0 <z_impl_k_thread_suspend>:
{
    4bf0:	b570      	push	{r4, r5, r6, lr}
    4bf2:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    4bf4:	3018      	adds	r0, #24
    4bf6:	f001 fac8 	bl	618a <z_abort_timeout>
	__asm__ volatile(
    4bfa:	f04f 0320 	mov.w	r3, #32
    4bfe:	f3ef 8611 	mrs	r6, BASEPRI
    4c02:	f383 8812 	msr	BASEPRI_MAX, r3
    4c06:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    4c0a:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    4c0e:	7b63      	ldrb	r3, [r4, #13]
    4c10:	2a00      	cmp	r2, #0
    4c12:	da05      	bge.n	4c20 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4c14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4c18:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    4c1a:	4620      	mov	r0, r4
    4c1c:	f001 fa06 	bl	602c <sys_dlist_remove>
		update_cache(thread == _current);
    4c20:	4d0b      	ldr	r5, [pc, #44]	; (4c50 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    4c22:	7b63      	ldrb	r3, [r4, #13]
    4c24:	68a8      	ldr	r0, [r5, #8]
    4c26:	f043 0310 	orr.w	r3, r3, #16
    4c2a:	7363      	strb	r3, [r4, #13]
    4c2c:	1b03      	subs	r3, r0, r4
    4c2e:	4258      	negs	r0, r3
    4c30:	4158      	adcs	r0, r3
    4c32:	f7ff fe49 	bl	48c8 <update_cache>
	__asm__ volatile(
    4c36:	f386 8811 	msr	BASEPRI, r6
    4c3a:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    4c3e:	68ab      	ldr	r3, [r5, #8]
    4c40:	42a3      	cmp	r3, r4
    4c42:	d103      	bne.n	4c4c <z_impl_k_thread_suspend+0x5c>
}
    4c44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    4c48:	f001 ba0e 	b.w	6068 <z_reschedule_unlocked>
}
    4c4c:	bd70      	pop	{r4, r5, r6, pc}
    4c4e:	bf00      	nop
    4c50:	200009c0 	.word	0x200009c0

00004c54 <k_sched_unlock>:
{
    4c54:	b510      	push	{r4, lr}
	__asm__ volatile(
    4c56:	f04f 0320 	mov.w	r3, #32
    4c5a:	f3ef 8411 	mrs	r4, BASEPRI
    4c5e:	f383 8812 	msr	BASEPRI_MAX, r3
    4c62:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    4c66:	4b08      	ldr	r3, [pc, #32]	; (4c88 <k_sched_unlock+0x34>)
    4c68:	689a      	ldr	r2, [r3, #8]
    4c6a:	7bd3      	ldrb	r3, [r2, #15]
    4c6c:	3301      	adds	r3, #1
    4c6e:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    4c70:	2000      	movs	r0, #0
    4c72:	f7ff fe29 	bl	48c8 <update_cache>
	__asm__ volatile(
    4c76:	f384 8811 	msr	BASEPRI, r4
    4c7a:	f3bf 8f6f 	isb	sy
}
    4c7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    4c82:	f001 b9f1 	b.w	6068 <z_reschedule_unlocked>
    4c86:	bf00      	nop
    4c88:	200009c0 	.word	0x200009c0

00004c8c <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    4c8c:	4b04      	ldr	r3, [pc, #16]	; (4ca0 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    4c8e:	2100      	movs	r1, #0
    4c90:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
    4c94:	e9c3 2208 	strd	r2, r2, [r3, #32]
    4c98:	4608      	mov	r0, r1
    4c9a:	f7ff bdbd 	b.w	4818 <k_sched_time_slice_set>
    4c9e:	bf00      	nop
    4ca0:	200009c0 	.word	0x200009c0

00004ca4 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
    4ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    4ca6:	f04f 0320 	mov.w	r3, #32
    4caa:	f3ef 8411 	mrs	r4, BASEPRI
    4cae:	f383 8812 	msr	BASEPRI_MAX, r3
    4cb2:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    4cb6:	491b      	ldr	r1, [pc, #108]	; (4d24 <z_impl_k_yield+0x80>)
    4cb8:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4cba:	7b43      	ldrb	r3, [r0, #13]
    4cbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4cc0:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    4cc2:	f001 f9b3 	bl	602c <sys_dlist_remove>
	}
	queue_thread(_current);
    4cc6:	688a      	ldr	r2, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    4cc8:	7b53      	ldrb	r3, [r2, #13]
	return list->head == list;
    4cca:	4608      	mov	r0, r1
    4ccc:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4cd0:	7353      	strb	r3, [r2, #13]
    4cd2:	f850 3f20 	ldr.w	r3, [r0, #32]!
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    4cd6:	6a4e      	ldr	r6, [r1, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4cd8:	4283      	cmp	r3, r0
    4cda:	bf08      	it	eq
    4cdc:	2300      	moveq	r3, #0
    4cde:	2b00      	cmp	r3, #0
    4ce0:	bf38      	it	cc
    4ce2:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4ce4:	b1cb      	cbz	r3, 4d1a <z_impl_k_yield+0x76>
	int32_t b1 = thread_1->base.prio;
    4ce6:	f992 700e 	ldrsb.w	r7, [r2, #14]
	int32_t b2 = thread_2->base.prio;
    4cea:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
    4cee:	42af      	cmp	r7, r5
    4cf0:	d00f      	beq.n	4d12 <z_impl_k_yield+0x6e>
		return b2 - b1;
    4cf2:	1bed      	subs	r5, r5, r7
		if (z_sched_prio_cmp(thread, t) > 0) {
    4cf4:	2d00      	cmp	r5, #0
    4cf6:	dd0c      	ble.n	4d12 <z_impl_k_yield+0x6e>
	sys_dnode_t *const prev = successor->prev;
    4cf8:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    4cfa:	e9c2 3100 	strd	r3, r1, [r2]
	prev->next = node;
    4cfe:	600a      	str	r2, [r1, #0]
	successor->prev = node;
    4d00:	605a      	str	r2, [r3, #4]
	update_cache(1);
    4d02:	2001      	movs	r0, #1
    4d04:	f7ff fde0 	bl	48c8 <update_cache>
    4d08:	4620      	mov	r0, r4
	z_swap(&sched_spinlock, key);
}
    4d0a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    4d0e:	f7fd bb2f 	b.w	2370 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    4d12:	42b3      	cmp	r3, r6
    4d14:	d001      	beq.n	4d1a <z_impl_k_yield+0x76>
    4d16:	681b      	ldr	r3, [r3, #0]
    4d18:	e7e4      	b.n	4ce4 <z_impl_k_yield+0x40>
	node->prev = tail;
    4d1a:	e9c2 0600 	strd	r0, r6, [r2]
	tail->next = node;
    4d1e:	6032      	str	r2, [r6, #0]
	list->tail = node;
    4d20:	624a      	str	r2, [r1, #36]	; 0x24
}
    4d22:	e7ee      	b.n	4d02 <z_impl_k_yield+0x5e>
    4d24:	200009c0 	.word	0x200009c0

00004d28 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
    4d28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4d2c:	4604      	mov	r4, r0
    4d2e:	460d      	mov	r5, r1
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    4d30:	ea54 0105 	orrs.w	r1, r4, r5
    4d34:	d104      	bne.n	4d40 <z_tick_sleep+0x18>
	z_impl_k_yield();
    4d36:	f7ff ffb5 	bl	4ca4 <z_impl_k_yield>
		k_yield();
		return 0;
    4d3a:	2000      	movs	r0, #0
		return ticks;
	}
#endif

	return 0;
}
    4d3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (Z_TICK_ABS(ticks) <= 0) {
    4d40:	f06f 0101 	mvn.w	r1, #1
    4d44:	1a0a      	subs	r2, r1, r0
    4d46:	f04f 31ff 	mov.w	r1, #4294967295
    4d4a:	eb61 0305 	sbc.w	r3, r1, r5
    4d4e:	2a01      	cmp	r2, #1
    4d50:	f173 0300 	sbcs.w	r3, r3, #0
    4d54:	da2a      	bge.n	4dac <z_tick_sleep+0x84>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    4d56:	f001 fa58 	bl	620a <sys_clock_tick_get_32>
    4d5a:	1906      	adds	r6, r0, r4
    4d5c:	f04f 0320 	mov.w	r3, #32
    4d60:	f3ef 8811 	mrs	r8, BASEPRI
    4d64:	f383 8812 	msr	BASEPRI_MAX, r3
    4d68:	f3bf 8f6f 	isb	sy
	pending_current = _current;
    4d6c:	4f11      	ldr	r7, [pc, #68]	; (4db4 <z_tick_sleep+0x8c>)
    4d6e:	4b12      	ldr	r3, [pc, #72]	; (4db8 <z_tick_sleep+0x90>)
    4d70:	68b8      	ldr	r0, [r7, #8]
    4d72:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    4d74:	f7ff fe9e 	bl	4ab4 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    4d78:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    4d7a:	4910      	ldr	r1, [pc, #64]	; (4dbc <z_tick_sleep+0x94>)
    4d7c:	4622      	mov	r2, r4
    4d7e:	462b      	mov	r3, r5
    4d80:	3018      	adds	r0, #24
    4d82:	f000 f9b9 	bl	50f8 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    4d86:	68ba      	ldr	r2, [r7, #8]
    4d88:	7b53      	ldrb	r3, [r2, #13]
    4d8a:	f043 0310 	orr.w	r3, r3, #16
    4d8e:	7353      	strb	r3, [r2, #13]
    4d90:	4640      	mov	r0, r8
    4d92:	f7fd faed 	bl	2370 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    4d96:	f001 fa38 	bl	620a <sys_clock_tick_get_32>
    4d9a:	1a30      	subs	r0, r6, r0
    4d9c:	eb66 0106 	sbc.w	r1, r6, r6
	if (ticks > 0) {
    4da0:	2801      	cmp	r0, #1
    4da2:	f171 0300 	sbcs.w	r3, r1, #0
		return ticks;
    4da6:	bfb8      	it	lt
    4da8:	2000      	movlt	r0, #0
    4daa:	e7c7      	b.n	4d3c <z_tick_sleep+0x14>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    4dac:	f06f 0601 	mvn.w	r6, #1
    4db0:	1a36      	subs	r6, r6, r0
    4db2:	e7d3      	b.n	4d5c <z_tick_sleep+0x34>
    4db4:	200009c0 	.word	0x200009c0
    4db8:	200009e8 	.word	0x200009e8
    4dbc:	000060b1 	.word	0x000060b1

00004dc0 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
    4dc0:	b508      	push	{r3, lr}
    4dc2:	460b      	mov	r3, r1
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    4dc4:	3301      	adds	r3, #1
    4dc6:	bf08      	it	eq
    4dc8:	f1b0 3fff 	cmpeq.w	r0, #4294967295
    4dcc:	d106      	bne.n	4ddc <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
    4dce:	4b08      	ldr	r3, [pc, #32]	; (4df0 <z_impl_k_sleep+0x30>)
    4dd0:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    4dd2:	f7ff ff0d 	bl	4bf0 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    4dd6:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    4dda:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
    4ddc:	f7ff ffa4 	bl	4d28 <z_tick_sleep>
		} else {
			return (t * to_hz + off) / from_hz;
    4de0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    4de4:	fb80 2303 	smull	r2, r3, r0, r3
    4de8:	0bd0      	lsrs	r0, r2, #15
    4dea:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    4dee:	e7f4      	b.n	4dda <z_impl_k_sleep+0x1a>
    4df0:	200009c0 	.word	0x200009c0

00004df4 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    4df4:	4b01      	ldr	r3, [pc, #4]	; (4dfc <z_impl_z_current_get+0x8>)
    4df6:	6898      	ldr	r0, [r3, #8]
    4df8:	4770      	bx	lr
    4dfa:	bf00      	nop
    4dfc:	200009c0 	.word	0x200009c0

00004e00 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    4e00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4e04:	4604      	mov	r4, r0
    4e06:	f04f 0320 	mov.w	r3, #32
    4e0a:	f3ef 8611 	mrs	r6, BASEPRI
    4e0e:	f383 8812 	msr	BASEPRI_MAX, r3
    4e12:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    4e16:	7b43      	ldrb	r3, [r0, #13]
    4e18:	071a      	lsls	r2, r3, #28
    4e1a:	d505      	bpl.n	4e28 <z_thread_abort+0x28>
	__asm__ volatile(
    4e1c:	f386 8811 	msr	BASEPRI, r6
    4e20:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    4e24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
    4e28:	f023 0220 	bic.w	r2, r3, #32
    4e2c:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    4e30:	09d2      	lsrs	r2, r2, #7
    4e32:	d120      	bne.n	4e76 <z_thread_abort+0x76>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    4e34:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
    4e36:	68a3      	ldr	r3, [r4, #8]
    4e38:	b113      	cbz	r3, 4e40 <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
    4e3a:	4620      	mov	r0, r4
    4e3c:	f001 f8fe 	bl	603c <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    4e40:	f104 0018 	add.w	r0, r4, #24
    4e44:	f001 f9a1 	bl	618a <z_abort_timeout>
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    4e48:	f104 0758 	add.w	r7, r4, #88	; 0x58
    4e4c:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
    4e50:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4e52:	42bd      	cmp	r5, r7
    4e54:	d000      	beq.n	4e58 <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    4e56:	b9b5      	cbnz	r5, 4e86 <z_thread_abort+0x86>
		update_cache(1);
    4e58:	2001      	movs	r0, #1
    4e5a:	f7ff fd35 	bl	48c8 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    4e5e:	4b10      	ldr	r3, [pc, #64]	; (4ea0 <z_thread_abort+0xa0>)
    4e60:	689b      	ldr	r3, [r3, #8]
    4e62:	42a3      	cmp	r3, r4
    4e64:	d1da      	bne.n	4e1c <z_thread_abort+0x1c>
    4e66:	f3ef 8305 	mrs	r3, IPSR
    4e6a:	2b00      	cmp	r3, #0
    4e6c:	d1d6      	bne.n	4e1c <z_thread_abort+0x1c>
    4e6e:	4630      	mov	r0, r6
    4e70:	f7fd fa7e 	bl	2370 <arch_swap>
	return ret;
    4e74:	e7d2      	b.n	4e1c <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4e76:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    4e7a:	f043 0308 	orr.w	r3, r3, #8
    4e7e:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    4e80:	f001 f8d4 	bl	602c <sys_dlist_remove>
}
    4e84:	e7d7      	b.n	4e36 <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
    4e86:	4628      	mov	r0, r5
    4e88:	f001 f8d8 	bl	603c <unpend_thread_no_timeout>
    4e8c:	f105 0018 	add.w	r0, r5, #24
    4e90:	f001 f97b 	bl	618a <z_abort_timeout>
    4e94:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
		ready_thread(thread);
    4e98:	4628      	mov	r0, r5
    4e9a:	f7ff fdb5 	bl	4a08 <ready_thread>
    4e9e:	e7d7      	b.n	4e50 <z_thread_abort+0x50>
    4ea0:	200009c0 	.word	0x200009c0

00004ea4 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    4ea4:	b538      	push	{r3, r4, r5, lr}
    4ea6:	4604      	mov	r4, r0
	__asm__ volatile(
    4ea8:	f04f 0320 	mov.w	r3, #32
    4eac:	f3ef 8511 	mrs	r5, BASEPRI
    4eb0:	f383 8812 	msr	BASEPRI_MAX, r3
    4eb4:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    4eb8:	f001 f949 	bl	614e <z_unpend_first_thread>

	if (thread != NULL) {
    4ebc:	b148      	cbz	r0, 4ed2 <z_impl_k_sem_give+0x2e>
    4ebe:	2200      	movs	r2, #0
    4ec0:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    4ec2:	f001 f8e5 	bl	6090 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    4ec6:	4629      	mov	r1, r5
    4ec8:	4805      	ldr	r0, [pc, #20]	; (4ee0 <z_impl_k_sem_give+0x3c>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    4eca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    4ece:	f7ff bcd5 	b.w	487c <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    4ed2:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    4ed6:	429a      	cmp	r2, r3
    4ed8:	bf18      	it	ne
    4eda:	3301      	addne	r3, #1
    4edc:	60a3      	str	r3, [r4, #8]
		handle_poll_events(sem);
    4ede:	e7f2      	b.n	4ec6 <z_impl_k_sem_give+0x22>
    4ee0:	20000e22 	.word	0x20000e22

00004ee4 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    4ee4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    4ee6:	4614      	mov	r4, r2
    4ee8:	461d      	mov	r5, r3
    4eea:	f04f 0320 	mov.w	r3, #32
    4eee:	f3ef 8111 	mrs	r1, BASEPRI
    4ef2:	f383 8812 	msr	BASEPRI_MAX, r3
    4ef6:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    4efa:	6883      	ldr	r3, [r0, #8]
    4efc:	b143      	cbz	r3, 4f10 <z_impl_k_sem_take+0x2c>
		sem->count--;
    4efe:	3b01      	subs	r3, #1
    4f00:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
    4f02:	f381 8811 	msr	BASEPRI, r1
    4f06:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    4f0a:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    4f0c:	b003      	add	sp, #12
    4f0e:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    4f10:	ea54 0305 	orrs.w	r3, r4, r5
    4f14:	d106      	bne.n	4f24 <z_impl_k_sem_take+0x40>
    4f16:	f381 8811 	msr	BASEPRI, r1
    4f1a:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    4f1e:	f06f 000f 	mvn.w	r0, #15
    4f22:	e7f3      	b.n	4f0c <z_impl_k_sem_take+0x28>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    4f24:	4602      	mov	r2, r0
    4f26:	e9cd 4500 	strd	r4, r5, [sp]
    4f2a:	4802      	ldr	r0, [pc, #8]	; (4f34 <z_impl_k_sem_take+0x50>)
    4f2c:	f7ff fe00 	bl	4b30 <z_pend_curr>
	return ret;
    4f30:	e7ec      	b.n	4f0c <z_impl_k_sem_take+0x28>
    4f32:	bf00      	nop
    4f34:	20000e22 	.word	0x20000e22

00004f38 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    4f38:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    4f3c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    4f3e:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    4f40:	2604      	movs	r6, #4
    4f42:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
    4f44:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    4f46:	7386      	strb	r6, [r0, #14]
	sys_dlist_init(&w->waitq);
    4f48:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
    4f4c:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    4f4e:	1dd6      	adds	r6, r2, #7
	list->tail = (sys_dnode_t *)list;
    4f50:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    4f54:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
    4f56:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    4f58:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    4f5c:	3720      	adds	r7, #32
	node->prev = NULL;
    4f5e:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
    4f62:	e9c0 7619 	strd	r7, r6, [r0, #100]	; 0x64
	thread_base->pended_on = NULL;
    4f66:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
    4f68:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
    4f6a:	66c5      	str	r5, [r0, #108]	; 0x6c
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    4f6c:	f106 0820 	add.w	r8, r6, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    4f70:	9202      	str	r2, [sp, #8]
    4f72:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    4f74:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
    4f76:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    4f78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    4f7a:	9200      	str	r2, [sp, #0]
    4f7c:	4642      	mov	r2, r8
{
    4f7e:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    4f80:	f7fd fa10 	bl	23a4 <arch_new_thread>
	if (!_current) {
    4f84:	4b04      	ldr	r3, [pc, #16]	; (4f98 <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
    4f86:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
    4f88:	689b      	ldr	r3, [r3, #8]
    4f8a:	b103      	cbz	r3, 4f8e <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
    4f8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	return stack_ptr;
    4f8e:	6723      	str	r3, [r4, #112]	; 0x70
}
    4f90:	4640      	mov	r0, r8
    4f92:	b004      	add	sp, #16
    4f94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4f98:	200009c0 	.word	0x200009c0

00004f9c <z_init_static_threads>:
{
    4f9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
    4fa0:	4e2a      	ldr	r6, [pc, #168]	; (504c <z_init_static_threads+0xb0>)
    4fa2:	4d2b      	ldr	r5, [pc, #172]	; (5050 <z_init_static_threads+0xb4>)
{
    4fa4:	b086      	sub	sp, #24
    4fa6:	46b0      	mov	r8, r6
	_FOREACH_STATIC_THREAD(thread_data) {
    4fa8:	42b5      	cmp	r5, r6
    4faa:	f105 0430 	add.w	r4, r5, #48	; 0x30
    4fae:	d310      	bcc.n	4fd2 <z_init_static_threads+0x36>
	k_sched_lock();
    4fb0:	f7ff fc76 	bl	48a0 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    4fb4:	4c26      	ldr	r4, [pc, #152]	; (5050 <z_init_static_threads+0xb4>)
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    4fb6:	f8df a09c 	ldr.w	sl, [pc, #156]	; 5054 <z_init_static_threads+0xb8>
    4fba:	f44f 4900 	mov.w	r9, #32768	; 0x8000
    4fbe:	f240 36e7 	movw	r6, #999	; 0x3e7
    4fc2:	2700      	movs	r7, #0
    4fc4:	4544      	cmp	r4, r8
    4fc6:	d321      	bcc.n	500c <z_init_static_threads+0x70>
}
    4fc8:	b006      	add	sp, #24
    4fca:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	k_sched_unlock();
    4fce:	f7ff be41 	b.w	4c54 <k_sched_unlock>
		z_setup_new_thread(
    4fd2:	f854 3c04 	ldr.w	r3, [r4, #-4]
    4fd6:	9305      	str	r3, [sp, #20]
    4fd8:	f854 3c10 	ldr.w	r3, [r4, #-16]
    4fdc:	9304      	str	r3, [sp, #16]
    4fde:	f854 3c14 	ldr.w	r3, [r4, #-20]
    4fe2:	9303      	str	r3, [sp, #12]
    4fe4:	f854 3c18 	ldr.w	r3, [r4, #-24]
    4fe8:	9302      	str	r3, [sp, #8]
    4fea:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    4fee:	9301      	str	r3, [sp, #4]
    4ff0:	f854 3c20 	ldr.w	r3, [r4, #-32]
    4ff4:	9300      	str	r3, [sp, #0]
    4ff6:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    4ffa:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    4ffe:	f7ff ff9b 	bl	4f38 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    5002:	f854 3c30 	ldr.w	r3, [r4, #-48]
    5006:	655d      	str	r5, [r3, #84]	; 0x54
    5008:	4625      	mov	r5, r4
    500a:	e7cd      	b.n	4fa8 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    500c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    500e:	1c5a      	adds	r2, r3, #1
    5010:	d00d      	beq.n	502e <z_init_static_threads+0x92>
					    K_MSEC(thread_data->init_delay));
    5012:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    5016:	4630      	mov	r0, r6
    5018:	4639      	mov	r1, r7
    501a:	fbc9 0103 	smlal	r0, r1, r9, r3
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    501e:	42b9      	cmp	r1, r7
    5020:	bf08      	it	eq
    5022:	42b0      	cmpeq	r0, r6
			schedule_new_thread(thread_data->init_thread,
    5024:	6825      	ldr	r5, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    5026:	d104      	bne.n	5032 <z_init_static_threads+0x96>
	z_sched_start(thread);
    5028:	4628      	mov	r0, r5
    502a:	f7ff fd25 	bl	4a78 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    502e:	3430      	adds	r4, #48	; 0x30
    5030:	e7c8      	b.n	4fc4 <z_init_static_threads+0x28>
    5032:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    5036:	2300      	movs	r3, #0
    5038:	f7fb fce0 	bl	9fc <__aeabi_uldivmod>
    503c:	4602      	mov	r2, r0
    503e:	460b      	mov	r3, r1
    5040:	f105 0018 	add.w	r0, r5, #24
    5044:	4651      	mov	r1, sl
    5046:	f000 f857 	bl	50f8 <z_add_timeout>
    504a:	e7f0      	b.n	502e <z_init_static_threads+0x92>
    504c:	20000150 	.word	0x20000150
    5050:	20000150 	.word	0x20000150
    5054:	000060b1 	.word	0x000060b1

00005058 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    5058:	4b03      	ldr	r3, [pc, #12]	; (5068 <elapsed+0x10>)
    505a:	681b      	ldr	r3, [r3, #0]
    505c:	b90b      	cbnz	r3, 5062 <elapsed+0xa>
    505e:	f7fe bbf1 	b.w	3844 <sys_clock_elapsed>
}
    5062:	2000      	movs	r0, #0
    5064:	4770      	bx	lr
    5066:	bf00      	nop
    5068:	200009f4 	.word	0x200009f4

0000506c <remove_timeout>:
{
    506c:	b530      	push	{r4, r5, lr}
    506e:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    5070:	b168      	cbz	r0, 508e <remove_timeout+0x22>
    5072:	4a0a      	ldr	r2, [pc, #40]	; (509c <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
    5074:	6852      	ldr	r2, [r2, #4]
    5076:	4290      	cmp	r0, r2
    5078:	d009      	beq.n	508e <remove_timeout+0x22>
	if (next(t) != NULL) {
    507a:	b143      	cbz	r3, 508e <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    507c:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    5080:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    5084:	1912      	adds	r2, r2, r4
    5086:	eb45 0101 	adc.w	r1, r5, r1
    508a:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    508e:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
    5090:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    5092:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    5094:	2300      	movs	r3, #0
	node->prev = NULL;
    5096:	e9c0 3300 	strd	r3, r3, [r0]
}
    509a:	bd30      	pop	{r4, r5, pc}
    509c:	200000d4 	.word	0x200000d4

000050a0 <next_timeout>:

static int32_t next_timeout(void)
{
    50a0:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
    50a2:	4b13      	ldr	r3, [pc, #76]	; (50f0 <next_timeout+0x50>)
    50a4:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    50a6:	429c      	cmp	r4, r3
    50a8:	bf08      	it	eq
    50aa:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    50ac:	f7ff ffd4 	bl	5058 <elapsed>
    50b0:	4605      	mov	r5, r0
	int32_t ret = to == NULL ? MAX_WAIT
    50b2:	b1bc      	cbz	r4, 50e4 <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    50b4:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    50b8:	1b40      	subs	r0, r0, r5
    50ba:	eb61 71e5 	sbc.w	r1, r1, r5, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
    50be:	2801      	cmp	r0, #1
    50c0:	f171 0300 	sbcs.w	r3, r1, #0
    50c4:	db11      	blt.n	50ea <next_timeout+0x4a>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    50c6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    50ca:	2300      	movs	r3, #0
    50cc:	4282      	cmp	r2, r0
    50ce:	eb73 0401 	sbcs.w	r4, r3, r1
    50d2:	da00      	bge.n	50d6 <next_timeout+0x36>
    50d4:	4610      	mov	r0, r2

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    50d6:	4b07      	ldr	r3, [pc, #28]	; (50f4 <next_timeout+0x54>)
    50d8:	691b      	ldr	r3, [r3, #16]
    50da:	b113      	cbz	r3, 50e2 <next_timeout+0x42>
    50dc:	4298      	cmp	r0, r3
    50de:	bfa8      	it	ge
    50e0:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    50e2:	bd38      	pop	{r3, r4, r5, pc}
	int32_t ret = to == NULL ? MAX_WAIT
    50e4:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    50e8:	e7f5      	b.n	50d6 <next_timeout+0x36>
    50ea:	2000      	movs	r0, #0
    50ec:	e7f3      	b.n	50d6 <next_timeout+0x36>
    50ee:	bf00      	nop
    50f0:	200000d4 	.word	0x200000d4
    50f4:	200009c0 	.word	0x200009c0

000050f8 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    50f8:	f1b3 3fff 	cmp.w	r3, #4294967295
    50fc:	bf08      	it	eq
    50fe:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
    5102:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5106:	4604      	mov	r4, r0
    5108:	4692      	mov	sl, r2
    510a:	469b      	mov	fp, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    510c:	d073      	beq.n	51f6 <z_add_timeout+0xfe>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    510e:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
    5110:	f04f 0320 	mov.w	r3, #32
    5114:	f3ef 8511 	mrs	r5, BASEPRI
    5118:	f383 8812 	msr	BASEPRI_MAX, r3
    511c:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    5120:	f06f 0301 	mvn.w	r3, #1
    5124:	ebb3 080a 	subs.w	r8, r3, sl
    5128:	f04f 32ff 	mov.w	r2, #4294967295
    512c:	eb62 090b 	sbc.w	r9, r2, fp
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    5130:	f1b8 0f00 	cmp.w	r8, #0
    5134:	f179 0100 	sbcs.w	r1, r9, #0
    5138:	db1c      	blt.n	5174 <z_add_timeout+0x7c>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    513a:	4830      	ldr	r0, [pc, #192]	; (51fc <z_add_timeout+0x104>)
    513c:	e9d0 1000 	ldrd	r1, r0, [r0]
    5140:	1a5b      	subs	r3, r3, r1
    5142:	eb62 0200 	sbc.w	r2, r2, r0

			to->dticks = MAX(1, ticks);
    5146:	ebb3 060a 	subs.w	r6, r3, sl
    514a:	eb62 070b 	sbc.w	r7, r2, fp
    514e:	2e01      	cmp	r6, #1
    5150:	f177 0300 	sbcs.w	r3, r7, #0
    5154:	bfbc      	itt	lt
    5156:	2601      	movlt	r6, #1
    5158:	2700      	movlt	r7, #0
    515a:	e9c4 6704 	strd	r6, r7, [r4, #16]
	return list->head == list;
    515e:	4a28      	ldr	r2, [pc, #160]	; (5200 <z_add_timeout+0x108>)
    5160:	e9d2 3c00 	ldrd	r3, ip, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5164:	4293      	cmp	r3, r2
    5166:	d11e      	bne.n	51a6 <z_add_timeout+0xae>
	node->prev = tail;
    5168:	e9c4 2c00 	strd	r2, ip, [r4]
	tail->next = node;
    516c:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
    5170:	6054      	str	r4, [r2, #4]
}
    5172:	e02d      	b.n	51d0 <z_add_timeout+0xd8>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    5174:	f7ff ff70 	bl	5058 <elapsed>
    5178:	f11a 0301 	adds.w	r3, sl, #1
    517c:	9300      	str	r3, [sp, #0]
    517e:	f14b 0300 	adc.w	r3, fp, #0
    5182:	9301      	str	r3, [sp, #4]
    5184:	e9dd 2300 	ldrd	r2, r3, [sp]
    5188:	1812      	adds	r2, r2, r0
    518a:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
    518e:	e9c4 2304 	strd	r2, r3, [r4, #16]
    5192:	e7e4      	b.n	515e <z_add_timeout+0x66>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
    5194:	ebb6 0008 	subs.w	r0, r6, r8
    5198:	eb67 0109 	sbc.w	r1, r7, r9
	return (node == list->tail) ? NULL : node->next;
    519c:	4563      	cmp	r3, ip
    519e:	e9c4 0104 	strd	r0, r1, [r4, #16]
    51a2:	d0e1      	beq.n	5168 <z_add_timeout+0x70>
    51a4:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
    51a6:	2b00      	cmp	r3, #0
    51a8:	d0de      	beq.n	5168 <z_add_timeout+0x70>
			if (t->dticks > to->dticks) {
    51aa:	e9d3 8904 	ldrd	r8, r9, [r3, #16]
    51ae:	e9d4 6704 	ldrd	r6, r7, [r4, #16]
    51b2:	4546      	cmp	r6, r8
    51b4:	eb77 0109 	sbcs.w	r1, r7, r9
    51b8:	daec      	bge.n	5194 <z_add_timeout+0x9c>
				t->dticks -= to->dticks;
    51ba:	ebb8 0006 	subs.w	r0, r8, r6
    51be:	eb69 0107 	sbc.w	r1, r9, r7
    51c2:	e9c3 0104 	strd	r0, r1, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
    51c6:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    51c8:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
    51cc:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    51ce:	605c      	str	r4, [r3, #4]
	return list->head == list;
    51d0:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    51d2:	4293      	cmp	r3, r2
    51d4:	d00b      	beq.n	51ee <z_add_timeout+0xf6>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    51d6:	429c      	cmp	r4, r3
    51d8:	d109      	bne.n	51ee <z_add_timeout+0xf6>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    51da:	f7ff ff61 	bl	50a0 <next_timeout>

			if (next_time == 0 ||
    51de:	b118      	cbz	r0, 51e8 <z_add_timeout+0xf0>
			    _current_cpu->slice_ticks != next_time) {
    51e0:	4b08      	ldr	r3, [pc, #32]	; (5204 <z_add_timeout+0x10c>)
			if (next_time == 0 ||
    51e2:	691b      	ldr	r3, [r3, #16]
    51e4:	4283      	cmp	r3, r0
    51e6:	d002      	beq.n	51ee <z_add_timeout+0xf6>
				sys_clock_set_timeout(next_time, false);
    51e8:	2100      	movs	r1, #0
    51ea:	f7fe fafb 	bl	37e4 <sys_clock_set_timeout>
	__asm__ volatile(
    51ee:	f385 8811 	msr	BASEPRI, r5
    51f2:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    51f6:	b003      	add	sp, #12
    51f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    51fc:	200002c0 	.word	0x200002c0
    5200:	200000d4 	.word	0x200000d4
    5204:	200009c0 	.word	0x200009c0

00005208 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    5208:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    520c:	4606      	mov	r6, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    520e:	f7ff fbb9 	bl	4984 <z_time_slice>
	__asm__ volatile(
    5212:	f04f 0320 	mov.w	r3, #32
    5216:	f3ef 8411 	mrs	r4, BASEPRI
    521a:	f383 8812 	msr	BASEPRI_MAX, r3
    521e:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    5222:	4d2c      	ldr	r5, [pc, #176]	; (52d4 <sys_clock_announce+0xcc>)
    5224:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 52d8 <sys_clock_announce+0xd0>
	return list->head == list;
    5228:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 52dc <sys_clock_announce+0xd4>
    522c:	602e      	str	r6, [r5, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
    522e:	4651      	mov	r1, sl
    5230:	f8d5 c000 	ldr.w	ip, [r5]
    5234:	f8db 0000 	ldr.w	r0, [fp]
    5238:	4662      	mov	r2, ip
    523a:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
    523c:	4558      	cmp	r0, fp
    523e:	e9da 8900 	ldrd	r8, r9, [sl]
    5242:	e9cd 2300 	strd	r2, r3, [sp]
    5246:	d00d      	beq.n	5264 <sys_clock_announce+0x5c>
    5248:	b160      	cbz	r0, 5264 <sys_clock_announce+0x5c>
    524a:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
    524e:	45b4      	cmp	ip, r6
    5250:	41bb      	sbcs	r3, r7
    5252:	da1e      	bge.n	5292 <sys_clock_announce+0x8a>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    5254:	9b00      	ldr	r3, [sp, #0]
    5256:	ebb6 0c03 	subs.w	ip, r6, r3
    525a:	9b01      	ldr	r3, [sp, #4]
    525c:	eb67 0603 	sbc.w	r6, r7, r3
    5260:	e9c0 c604 	strd	ip, r6, [r0, #16]
	}

	curr_tick += announce_remaining;
    5264:	9b00      	ldr	r3, [sp, #0]
    5266:	eb13 0208 	adds.w	r2, r3, r8
    526a:	9b01      	ldr	r3, [sp, #4]
	announce_remaining = 0;
    526c:	f04f 0600 	mov.w	r6, #0
	curr_tick += announce_remaining;
    5270:	eb43 0309 	adc.w	r3, r3, r9
    5274:	e9c1 2300 	strd	r2, r3, [r1]
	announce_remaining = 0;
    5278:	602e      	str	r6, [r5, #0]

	sys_clock_set_timeout(next_timeout(), false);
    527a:	f7ff ff11 	bl	50a0 <next_timeout>
    527e:	4631      	mov	r1, r6
    5280:	f7fe fab0 	bl	37e4 <sys_clock_set_timeout>
	__asm__ volatile(
    5284:	f384 8811 	msr	BASEPRI, r4
    5288:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    528c:	b003      	add	sp, #12
    528e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		curr_tick += dt;
    5292:	eb18 0806 	adds.w	r8, r8, r6
		t->dticks = 0;
    5296:	f04f 0200 	mov.w	r2, #0
    529a:	f04f 0300 	mov.w	r3, #0
		curr_tick += dt;
    529e:	eb49 79e6 	adc.w	r9, r9, r6, asr #31
		t->dticks = 0;
    52a2:	e9c0 2304 	strd	r2, r3, [r0, #16]
		announce_remaining -= dt;
    52a6:	ebac 0606 	sub.w	r6, ip, r6
		curr_tick += dt;
    52aa:	e9ca 8900 	strd	r8, r9, [sl]
		announce_remaining -= dt;
    52ae:	602e      	str	r6, [r5, #0]
		remove_timeout(t);
    52b0:	f7ff fedc 	bl	506c <remove_timeout>
    52b4:	f384 8811 	msr	BASEPRI, r4
    52b8:	f3bf 8f6f 	isb	sy
		t->fn(t);
    52bc:	6883      	ldr	r3, [r0, #8]
    52be:	4798      	blx	r3
	__asm__ volatile(
    52c0:	f04f 0320 	mov.w	r3, #32
    52c4:	f3ef 8411 	mrs	r4, BASEPRI
    52c8:	f383 8812 	msr	BASEPRI_MAX, r3
    52cc:	f3bf 8f6f 	isb	sy

	/* Note that we need to use the underlying arch-specific lock
	 * implementation.  The "irq_lock()" API in SMP context is
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();
    52d0:	4901      	ldr	r1, [pc, #4]	; (52d8 <sys_clock_announce+0xd0>)
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    52d2:	e7ad      	b.n	5230 <sys_clock_announce+0x28>
    52d4:	200009f4 	.word	0x200009f4
    52d8:	200002c0 	.word	0x200002c0
    52dc:	200000d4 	.word	0x200000d4

000052e0 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    52e0:	b510      	push	{r4, lr}
    52e2:	f04f 0320 	mov.w	r3, #32
    52e6:	f3ef 8411 	mrs	r4, BASEPRI
    52ea:	f383 8812 	msr	BASEPRI_MAX, r3
    52ee:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
    52f2:	f7fe faa7 	bl	3844 <sys_clock_elapsed>
    52f6:	4b06      	ldr	r3, [pc, #24]	; (5310 <sys_clock_tick_get+0x30>)
    52f8:	e9d3 2300 	ldrd	r2, r3, [r3]
    52fc:	1812      	adds	r2, r2, r0
    52fe:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
    5302:	f384 8811 	msr	BASEPRI, r4
    5306:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    530a:	4610      	mov	r0, r2
    530c:	4619      	mov	r1, r3
    530e:	bd10      	pop	{r4, pc}
    5310:	200002c0 	.word	0x200002c0

00005314 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    5314:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
		 __data_region_end - __data_region_start);
    5316:	4806      	ldr	r0, [pc, #24]	; (5330 <z_data_copy+0x1c>)
	(void)memcpy(&__data_region_start, &__data_region_load_start,
    5318:	4a06      	ldr	r2, [pc, #24]	; (5334 <z_data_copy+0x20>)
    531a:	4907      	ldr	r1, [pc, #28]	; (5338 <z_data_copy+0x24>)
    531c:	1a12      	subs	r2, r2, r0
    531e:	f000 fbf1 	bl	5b04 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    5322:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&__ramfunc_start, &__ramfunc_load_start,
    5326:	4a05      	ldr	r2, [pc, #20]	; (533c <z_data_copy+0x28>)
    5328:	4905      	ldr	r1, [pc, #20]	; (5340 <z_data_copy+0x2c>)
    532a:	4806      	ldr	r0, [pc, #24]	; (5344 <z_data_copy+0x30>)
    532c:	f000 bbea 	b.w	5b04 <memcpy>
    5330:	20000000 	.word	0x20000000
    5334:	200001a0 	.word	0x200001a0
    5338:	00006aa0 	.word	0x00006aa0
    533c:	00000000 	.word	0x00000000
    5340:	00006aa0 	.word	0x00006aa0
    5344:	20000000 	.word	0x20000000

00005348 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    5348:	4a02      	ldr	r2, [pc, #8]	; (5354 <boot_banner+0xc>)
    534a:	4903      	ldr	r1, [pc, #12]	; (5358 <boot_banner+0x10>)
    534c:	4803      	ldr	r0, [pc, #12]	; (535c <boot_banner+0x14>)
    534e:	f000 bb81 	b.w	5a54 <printk>
    5352:	bf00      	nop
    5354:	00006988 	.word	0x00006988
    5358:	00006a68 	.word	0x00006a68
    535c:	00006a77 	.word	0x00006a77

00005360 <nrf_cc3xx_platform_init_no_rng>:
    5360:	b510      	push	{r4, lr}
    5362:	4c0a      	ldr	r4, [pc, #40]	; (538c <nrf_cc3xx_platform_init_no_rng+0x2c>)
    5364:	6823      	ldr	r3, [r4, #0]
    5366:	b11b      	cbz	r3, 5370 <nrf_cc3xx_platform_init_no_rng+0x10>
    5368:	2301      	movs	r3, #1
    536a:	6023      	str	r3, [r4, #0]
    536c:	2000      	movs	r0, #0
    536e:	bd10      	pop	{r4, pc}
    5370:	f000 f8d6 	bl	5520 <CC_LibInitNoRng>
    5374:	2800      	cmp	r0, #0
    5376:	d0f7      	beq.n	5368 <nrf_cc3xx_platform_init_no_rng+0x8>
    5378:	3801      	subs	r0, #1
    537a:	2806      	cmp	r0, #6
    537c:	d803      	bhi.n	5386 <nrf_cc3xx_platform_init_no_rng+0x26>
    537e:	4b04      	ldr	r3, [pc, #16]	; (5390 <nrf_cc3xx_platform_init_no_rng+0x30>)
    5380:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    5384:	bd10      	pop	{r4, pc}
    5386:	4803      	ldr	r0, [pc, #12]	; (5394 <nrf_cc3xx_platform_init_no_rng+0x34>)
    5388:	bd10      	pop	{r4, pc}
    538a:	bf00      	nop
    538c:	200009f8 	.word	0x200009f8
    5390:	00006804 	.word	0x00006804
    5394:	ffff8ffe 	.word	0xffff8ffe

00005398 <nrf_cc3xx_platform_abort>:
    5398:	f3bf 8f4f 	dsb	sy
    539c:	4905      	ldr	r1, [pc, #20]	; (53b4 <nrf_cc3xx_platform_abort+0x1c>)
    539e:	4b06      	ldr	r3, [pc, #24]	; (53b8 <nrf_cc3xx_platform_abort+0x20>)
    53a0:	68ca      	ldr	r2, [r1, #12]
    53a2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    53a6:	4313      	orrs	r3, r2
    53a8:	60cb      	str	r3, [r1, #12]
    53aa:	f3bf 8f4f 	dsb	sy
    53ae:	bf00      	nop
    53b0:	e7fd      	b.n	53ae <nrf_cc3xx_platform_abort+0x16>
    53b2:	bf00      	nop
    53b4:	e000ed00 	.word	0xe000ed00
    53b8:	05fa0004 	.word	0x05fa0004

000053bc <CC_PalAbort>:
    53bc:	b4f0      	push	{r4, r5, r6, r7}
    53be:	4f09      	ldr	r7, [pc, #36]	; (53e4 <CC_PalAbort+0x28>)
    53c0:	4e09      	ldr	r6, [pc, #36]	; (53e8 <CC_PalAbort+0x2c>)
    53c2:	4c0a      	ldr	r4, [pc, #40]	; (53ec <CC_PalAbort+0x30>)
    53c4:	4a0a      	ldr	r2, [pc, #40]	; (53f0 <CC_PalAbort+0x34>)
    53c6:	4d0b      	ldr	r5, [pc, #44]	; (53f4 <CC_PalAbort+0x38>)
    53c8:	490b      	ldr	r1, [pc, #44]	; (53f8 <CC_PalAbort+0x3c>)
    53ca:	f04f 33fe 	mov.w	r3, #4278124286	; 0xfefefefe
    53ce:	603b      	str	r3, [r7, #0]
    53d0:	6852      	ldr	r2, [r2, #4]
    53d2:	6033      	str	r3, [r6, #0]
    53d4:	6023      	str	r3, [r4, #0]
    53d6:	2400      	movs	r4, #0
    53d8:	602b      	str	r3, [r5, #0]
    53da:	f8c1 4500 	str.w	r4, [r1, #1280]	; 0x500
    53de:	bcf0      	pop	{r4, r5, r6, r7}
    53e0:	4710      	bx	r2
    53e2:	bf00      	nop
    53e4:	5002b400 	.word	0x5002b400
    53e8:	5002b404 	.word	0x5002b404
    53ec:	5002b408 	.word	0x5002b408
    53f0:	200000dc 	.word	0x200000dc
    53f4:	5002b40c 	.word	0x5002b40c
    53f8:	5002a000 	.word	0x5002a000

000053fc <nrf_cc3xx_platform_set_abort>:
    53fc:	e9d0 1200 	ldrd	r1, r2, [r0]
    5400:	4b01      	ldr	r3, [pc, #4]	; (5408 <nrf_cc3xx_platform_set_abort+0xc>)
    5402:	e9c3 1200 	strd	r1, r2, [r3]
    5406:	4770      	bx	lr
    5408:	200000dc 	.word	0x200000dc

0000540c <mutex_free>:
    540c:	b510      	push	{r4, lr}
    540e:	4604      	mov	r4, r0
    5410:	b130      	cbz	r0, 5420 <mutex_free+0x14>
    5412:	6863      	ldr	r3, [r4, #4]
    5414:	06db      	lsls	r3, r3, #27
    5416:	d502      	bpl.n	541e <mutex_free+0x12>
    5418:	2300      	movs	r3, #0
    541a:	6023      	str	r3, [r4, #0]
    541c:	6063      	str	r3, [r4, #4]
    541e:	bd10      	pop	{r4, pc}
    5420:	4b02      	ldr	r3, [pc, #8]	; (542c <mutex_free+0x20>)
    5422:	4803      	ldr	r0, [pc, #12]	; (5430 <mutex_free+0x24>)
    5424:	685b      	ldr	r3, [r3, #4]
    5426:	4798      	blx	r3
    5428:	e7f3      	b.n	5412 <mutex_free+0x6>
    542a:	bf00      	nop
    542c:	200000dc 	.word	0x200000dc
    5430:	00006820 	.word	0x00006820

00005434 <mutex_unlock>:
    5434:	b168      	cbz	r0, 5452 <mutex_unlock+0x1e>
    5436:	6843      	ldr	r3, [r0, #4]
    5438:	b13b      	cbz	r3, 544a <mutex_unlock+0x16>
    543a:	06db      	lsls	r3, r3, #27
    543c:	d507      	bpl.n	544e <mutex_unlock+0x1a>
    543e:	f3bf 8f5f 	dmb	sy
    5442:	2300      	movs	r3, #0
    5444:	6003      	str	r3, [r0, #0]
    5446:	4618      	mov	r0, r3
    5448:	4770      	bx	lr
    544a:	4803      	ldr	r0, [pc, #12]	; (5458 <mutex_unlock+0x24>)
    544c:	4770      	bx	lr
    544e:	4803      	ldr	r0, [pc, #12]	; (545c <mutex_unlock+0x28>)
    5450:	4770      	bx	lr
    5452:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    5456:	4770      	bx	lr
    5458:	ffff8fea 	.word	0xffff8fea
    545c:	ffff8fe9 	.word	0xffff8fe9

00005460 <mutex_init>:
    5460:	b510      	push	{r4, lr}
    5462:	4604      	mov	r4, r0
    5464:	b120      	cbz	r0, 5470 <mutex_init+0x10>
    5466:	2200      	movs	r2, #0
    5468:	2311      	movs	r3, #17
    546a:	6022      	str	r2, [r4, #0]
    546c:	6063      	str	r3, [r4, #4]
    546e:	bd10      	pop	{r4, pc}
    5470:	4801      	ldr	r0, [pc, #4]	; (5478 <mutex_init+0x18>)
    5472:	f7ff ffa3 	bl	53bc <CC_PalAbort>
    5476:	e7f6      	b.n	5466 <mutex_init+0x6>
    5478:	00006848 	.word	0x00006848

0000547c <mutex_lock>:
    547c:	b1c0      	cbz	r0, 54b0 <mutex_lock+0x34>
    547e:	6843      	ldr	r3, [r0, #4]
    5480:	b1a3      	cbz	r3, 54ac <mutex_lock+0x30>
    5482:	06db      	lsls	r3, r3, #27
    5484:	d510      	bpl.n	54a8 <mutex_lock+0x2c>
    5486:	2201      	movs	r2, #1
    5488:	f3bf 8f5b 	dmb	ish
    548c:	e850 3f00 	ldrex	r3, [r0]
    5490:	e840 2100 	strex	r1, r2, [r0]
    5494:	2900      	cmp	r1, #0
    5496:	d1f9      	bne.n	548c <mutex_lock+0x10>
    5498:	f3bf 8f5b 	dmb	ish
    549c:	2b01      	cmp	r3, #1
    549e:	d0f3      	beq.n	5488 <mutex_lock+0xc>
    54a0:	f3bf 8f5f 	dmb	sy
    54a4:	2000      	movs	r0, #0
    54a6:	4770      	bx	lr
    54a8:	4803      	ldr	r0, [pc, #12]	; (54b8 <mutex_lock+0x3c>)
    54aa:	4770      	bx	lr
    54ac:	4803      	ldr	r0, [pc, #12]	; (54bc <mutex_lock+0x40>)
    54ae:	4770      	bx	lr
    54b0:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    54b4:	4770      	bx	lr
    54b6:	bf00      	nop
    54b8:	ffff8fe9 	.word	0xffff8fe9
    54bc:	ffff8fea 	.word	0xffff8fea

000054c0 <nrf_cc3xx_platform_set_mutexes>:
    54c0:	b570      	push	{r4, r5, r6, lr}
    54c2:	e9d0 2300 	ldrd	r2, r3, [r0]
    54c6:	4c13      	ldr	r4, [pc, #76]	; (5514 <nrf_cc3xx_platform_set_mutexes+0x54>)
    54c8:	4d13      	ldr	r5, [pc, #76]	; (5518 <nrf_cc3xx_platform_set_mutexes+0x58>)
    54ca:	e9c4 2300 	strd	r2, r3, [r4]
    54ce:	e9d0 6302 	ldrd	r6, r3, [r0, #8]
    54d2:	e9c4 6302 	strd	r6, r3, [r4, #8]
    54d6:	4b11      	ldr	r3, [pc, #68]	; (551c <nrf_cc3xx_platform_set_mutexes+0x5c>)
    54d8:	6808      	ldr	r0, [r1, #0]
    54da:	6018      	str	r0, [r3, #0]
    54dc:	6848      	ldr	r0, [r1, #4]
    54de:	6058      	str	r0, [r3, #4]
    54e0:	6888      	ldr	r0, [r1, #8]
    54e2:	6098      	str	r0, [r3, #8]
    54e4:	e9d1 6003 	ldrd	r6, r0, [r1, #12]
    54e8:	f8d5 1114 	ldr.w	r1, [r5, #276]	; 0x114
    54ec:	60de      	str	r6, [r3, #12]
    54ee:	6118      	str	r0, [r3, #16]
    54f0:	06cb      	lsls	r3, r1, #27
    54f2:	d50d      	bpl.n	5510 <nrf_cc3xx_platform_set_mutexes+0x50>
    54f4:	2300      	movs	r3, #0
    54f6:	e9c5 3344 	strd	r3, r3, [r5, #272]	; 0x110
    54fa:	e9c5 336d 	strd	r3, r3, [r5, #436]	; 0x1b4
    54fe:	f505 7088 	add.w	r0, r5, #272	; 0x110
    5502:	4790      	blx	r2
    5504:	6823      	ldr	r3, [r4, #0]
    5506:	f505 70da 	add.w	r0, r5, #436	; 0x1b4
    550a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    550e:	4718      	bx	r3
    5510:	bd70      	pop	{r4, r5, r6, pc}
    5512:	bf00      	nop
    5514:	200000ec 	.word	0x200000ec
    5518:	20000e24 	.word	0x20000e24
    551c:	200000fc 	.word	0x200000fc

00005520 <CC_LibInitNoRng>:
    5520:	b510      	push	{r4, lr}
    5522:	f000 f833 	bl	558c <CC_HalInit>
    5526:	b120      	cbz	r0, 5532 <CC_LibInitNoRng+0x12>
    5528:	2403      	movs	r4, #3
    552a:	f000 f867 	bl	55fc <CC_PalTerminate>
    552e:	4620      	mov	r0, r4
    5530:	bd10      	pop	{r4, pc}
    5532:	f000 f835 	bl	55a0 <CC_PalInit>
    5536:	b990      	cbnz	r0, 555e <CC_LibInitNoRng+0x3e>
    5538:	f000 f8b0 	bl	569c <CC_PalPowerSaveModeSelect>
    553c:	b990      	cbnz	r0, 5564 <CC_LibInitNoRng+0x44>
    553e:	4b0f      	ldr	r3, [pc, #60]	; (557c <CC_LibInitNoRng+0x5c>)
    5540:	681b      	ldr	r3, [r3, #0]
    5542:	0e1b      	lsrs	r3, r3, #24
    5544:	2bf0      	cmp	r3, #240	; 0xf0
    5546:	d108      	bne.n	555a <CC_LibInitNoRng+0x3a>
    5548:	4a0d      	ldr	r2, [pc, #52]	; (5580 <CC_LibInitNoRng+0x60>)
    554a:	4b0e      	ldr	r3, [pc, #56]	; (5584 <CC_LibInitNoRng+0x64>)
    554c:	6812      	ldr	r2, [r2, #0]
    554e:	429a      	cmp	r2, r3
    5550:	d00a      	beq.n	5568 <CC_LibInitNoRng+0x48>
    5552:	2407      	movs	r4, #7
    5554:	f000 f81c 	bl	5590 <CC_HalTerminate>
    5558:	e7e7      	b.n	552a <CC_LibInitNoRng+0xa>
    555a:	2406      	movs	r4, #6
    555c:	e7fa      	b.n	5554 <CC_LibInitNoRng+0x34>
    555e:	2404      	movs	r4, #4
    5560:	4620      	mov	r0, r4
    5562:	bd10      	pop	{r4, pc}
    5564:	2400      	movs	r4, #0
    5566:	e7f5      	b.n	5554 <CC_LibInitNoRng+0x34>
    5568:	2001      	movs	r0, #1
    556a:	f000 f897 	bl	569c <CC_PalPowerSaveModeSelect>
    556e:	4604      	mov	r4, r0
    5570:	2800      	cmp	r0, #0
    5572:	d1f7      	bne.n	5564 <CC_LibInitNoRng+0x44>
    5574:	4b04      	ldr	r3, [pc, #16]	; (5588 <CC_LibInitNoRng+0x68>)
    5576:	6018      	str	r0, [r3, #0]
    5578:	e7d9      	b.n	552e <CC_LibInitNoRng+0xe>
    557a:	bf00      	nop
    557c:	5002b928 	.word	0x5002b928
    5580:	5002ba24 	.word	0x5002ba24
    5584:	20e00000 	.word	0x20e00000
    5588:	5002ba0c 	.word	0x5002ba0c

0000558c <CC_HalInit>:
    558c:	2000      	movs	r0, #0
    558e:	4770      	bx	lr

00005590 <CC_HalTerminate>:
    5590:	2000      	movs	r0, #0
    5592:	4770      	bx	lr

00005594 <CC_HalMaskInterrupt>:
    5594:	4b01      	ldr	r3, [pc, #4]	; (559c <CC_HalMaskInterrupt+0x8>)
    5596:	6018      	str	r0, [r3, #0]
    5598:	4770      	bx	lr
    559a:	bf00      	nop
    559c:	5002ba04 	.word	0x5002ba04

000055a0 <CC_PalInit>:
    55a0:	b510      	push	{r4, lr}
    55a2:	4811      	ldr	r0, [pc, #68]	; (55e8 <CC_PalInit+0x48>)
    55a4:	f000 f848 	bl	5638 <CC_PalMutexCreate>
    55a8:	b100      	cbz	r0, 55ac <CC_PalInit+0xc>
    55aa:	bd10      	pop	{r4, pc}
    55ac:	480f      	ldr	r0, [pc, #60]	; (55ec <CC_PalInit+0x4c>)
    55ae:	f000 f843 	bl	5638 <CC_PalMutexCreate>
    55b2:	2800      	cmp	r0, #0
    55b4:	d1f9      	bne.n	55aa <CC_PalInit+0xa>
    55b6:	4c0e      	ldr	r4, [pc, #56]	; (55f0 <CC_PalInit+0x50>)
    55b8:	4620      	mov	r0, r4
    55ba:	f000 f83d 	bl	5638 <CC_PalMutexCreate>
    55be:	2800      	cmp	r0, #0
    55c0:	d1f3      	bne.n	55aa <CC_PalInit+0xa>
    55c2:	4b0c      	ldr	r3, [pc, #48]	; (55f4 <CC_PalInit+0x54>)
    55c4:	480c      	ldr	r0, [pc, #48]	; (55f8 <CC_PalInit+0x58>)
    55c6:	601c      	str	r4, [r3, #0]
    55c8:	f000 f836 	bl	5638 <CC_PalMutexCreate>
    55cc:	4601      	mov	r1, r0
    55ce:	2800      	cmp	r0, #0
    55d0:	d1eb      	bne.n	55aa <CC_PalInit+0xa>
    55d2:	f000 f82d 	bl	5630 <CC_PalDmaInit>
    55d6:	4604      	mov	r4, r0
    55d8:	b108      	cbz	r0, 55de <CC_PalInit+0x3e>
    55da:	4620      	mov	r0, r4
    55dc:	bd10      	pop	{r4, pc}
    55de:	f000 f83f 	bl	5660 <CC_PalPowerSaveModeInit>
    55e2:	4620      	mov	r0, r4
    55e4:	e7fa      	b.n	55dc <CC_PalInit+0x3c>
    55e6:	bf00      	nop
    55e8:	20000134 	.word	0x20000134
    55ec:	20000128 	.word	0x20000128
    55f0:	20000130 	.word	0x20000130
    55f4:	20000138 	.word	0x20000138
    55f8:	2000012c 	.word	0x2000012c

000055fc <CC_PalTerminate>:
    55fc:	b508      	push	{r3, lr}
    55fe:	4808      	ldr	r0, [pc, #32]	; (5620 <CC_PalTerminate+0x24>)
    5600:	f000 f824 	bl	564c <CC_PalMutexDestroy>
    5604:	4807      	ldr	r0, [pc, #28]	; (5624 <CC_PalTerminate+0x28>)
    5606:	f000 f821 	bl	564c <CC_PalMutexDestroy>
    560a:	4807      	ldr	r0, [pc, #28]	; (5628 <CC_PalTerminate+0x2c>)
    560c:	f000 f81e 	bl	564c <CC_PalMutexDestroy>
    5610:	4806      	ldr	r0, [pc, #24]	; (562c <CC_PalTerminate+0x30>)
    5612:	f000 f81b 	bl	564c <CC_PalMutexDestroy>
    5616:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    561a:	f000 b80b 	b.w	5634 <CC_PalDmaTerminate>
    561e:	bf00      	nop
    5620:	20000134 	.word	0x20000134
    5624:	20000128 	.word	0x20000128
    5628:	20000130 	.word	0x20000130
    562c:	2000012c 	.word	0x2000012c

00005630 <CC_PalDmaInit>:
    5630:	2000      	movs	r0, #0
    5632:	4770      	bx	lr

00005634 <CC_PalDmaTerminate>:
    5634:	4770      	bx	lr
    5636:	bf00      	nop

00005638 <CC_PalMutexCreate>:
    5638:	b508      	push	{r3, lr}
    563a:	4b03      	ldr	r3, [pc, #12]	; (5648 <CC_PalMutexCreate+0x10>)
    563c:	6802      	ldr	r2, [r0, #0]
    563e:	681b      	ldr	r3, [r3, #0]
    5640:	6810      	ldr	r0, [r2, #0]
    5642:	4798      	blx	r3
    5644:	2000      	movs	r0, #0
    5646:	bd08      	pop	{r3, pc}
    5648:	200000ec 	.word	0x200000ec

0000564c <CC_PalMutexDestroy>:
    564c:	b508      	push	{r3, lr}
    564e:	4b03      	ldr	r3, [pc, #12]	; (565c <CC_PalMutexDestroy+0x10>)
    5650:	6802      	ldr	r2, [r0, #0]
    5652:	685b      	ldr	r3, [r3, #4]
    5654:	6810      	ldr	r0, [r2, #0]
    5656:	4798      	blx	r3
    5658:	2000      	movs	r0, #0
    565a:	bd08      	pop	{r3, pc}
    565c:	200000ec 	.word	0x200000ec

00005660 <CC_PalPowerSaveModeInit>:
    5660:	b570      	push	{r4, r5, r6, lr}
    5662:	4c09      	ldr	r4, [pc, #36]	; (5688 <CC_PalPowerSaveModeInit+0x28>)
    5664:	4d09      	ldr	r5, [pc, #36]	; (568c <CC_PalPowerSaveModeInit+0x2c>)
    5666:	6920      	ldr	r0, [r4, #16]
    5668:	68ab      	ldr	r3, [r5, #8]
    566a:	4798      	blx	r3
    566c:	b118      	cbz	r0, 5676 <CC_PalPowerSaveModeInit+0x16>
    566e:	4b08      	ldr	r3, [pc, #32]	; (5690 <CC_PalPowerSaveModeInit+0x30>)
    5670:	4808      	ldr	r0, [pc, #32]	; (5694 <CC_PalPowerSaveModeInit+0x34>)
    5672:	685b      	ldr	r3, [r3, #4]
    5674:	4798      	blx	r3
    5676:	4a08      	ldr	r2, [pc, #32]	; (5698 <CC_PalPowerSaveModeInit+0x38>)
    5678:	68eb      	ldr	r3, [r5, #12]
    567a:	6920      	ldr	r0, [r4, #16]
    567c:	2100      	movs	r1, #0
    567e:	6011      	str	r1, [r2, #0]
    5680:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5684:	4718      	bx	r3
    5686:	bf00      	nop
    5688:	200000fc 	.word	0x200000fc
    568c:	200000ec 	.word	0x200000ec
    5690:	200000dc 	.word	0x200000dc
    5694:	0000686c 	.word	0x0000686c
    5698:	20000a0c 	.word	0x20000a0c

0000569c <CC_PalPowerSaveModeSelect>:
    569c:	b570      	push	{r4, r5, r6, lr}
    569e:	4d1a      	ldr	r5, [pc, #104]	; (5708 <CC_PalPowerSaveModeSelect+0x6c>)
    56a0:	4e1a      	ldr	r6, [pc, #104]	; (570c <CC_PalPowerSaveModeSelect+0x70>)
    56a2:	4604      	mov	r4, r0
    56a4:	68b2      	ldr	r2, [r6, #8]
    56a6:	6928      	ldr	r0, [r5, #16]
    56a8:	4790      	blx	r2
    56aa:	b9f0      	cbnz	r0, 56ea <CC_PalPowerSaveModeSelect+0x4e>
    56ac:	b15c      	cbz	r4, 56c6 <CC_PalPowerSaveModeSelect+0x2a>
    56ae:	4c18      	ldr	r4, [pc, #96]	; (5710 <CC_PalPowerSaveModeSelect+0x74>)
    56b0:	6823      	ldr	r3, [r4, #0]
    56b2:	b1ab      	cbz	r3, 56e0 <CC_PalPowerSaveModeSelect+0x44>
    56b4:	2b01      	cmp	r3, #1
    56b6:	d01a      	beq.n	56ee <CC_PalPowerSaveModeSelect+0x52>
    56b8:	3b01      	subs	r3, #1
    56ba:	6023      	str	r3, [r4, #0]
    56bc:	6928      	ldr	r0, [r5, #16]
    56be:	68f3      	ldr	r3, [r6, #12]
    56c0:	4798      	blx	r3
    56c2:	2000      	movs	r0, #0
    56c4:	bd70      	pop	{r4, r5, r6, pc}
    56c6:	4c12      	ldr	r4, [pc, #72]	; (5710 <CC_PalPowerSaveModeSelect+0x74>)
    56c8:	6821      	ldr	r1, [r4, #0]
    56ca:	b939      	cbnz	r1, 56dc <CC_PalPowerSaveModeSelect+0x40>
    56cc:	4b11      	ldr	r3, [pc, #68]	; (5714 <CC_PalPowerSaveModeSelect+0x78>)
    56ce:	4a12      	ldr	r2, [pc, #72]	; (5718 <CC_PalPowerSaveModeSelect+0x7c>)
    56d0:	2001      	movs	r0, #1
    56d2:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    56d6:	6813      	ldr	r3, [r2, #0]
    56d8:	2b00      	cmp	r3, #0
    56da:	d1fc      	bne.n	56d6 <CC_PalPowerSaveModeSelect+0x3a>
    56dc:	3101      	adds	r1, #1
    56de:	6021      	str	r1, [r4, #0]
    56e0:	68f3      	ldr	r3, [r6, #12]
    56e2:	6928      	ldr	r0, [r5, #16]
    56e4:	4798      	blx	r3
    56e6:	2000      	movs	r0, #0
    56e8:	bd70      	pop	{r4, r5, r6, pc}
    56ea:	480c      	ldr	r0, [pc, #48]	; (571c <CC_PalPowerSaveModeSelect+0x80>)
    56ec:	bd70      	pop	{r4, r5, r6, pc}
    56ee:	4a0a      	ldr	r2, [pc, #40]	; (5718 <CC_PalPowerSaveModeSelect+0x7c>)
    56f0:	6813      	ldr	r3, [r2, #0]
    56f2:	2b00      	cmp	r3, #0
    56f4:	d1fc      	bne.n	56f0 <CC_PalPowerSaveModeSelect+0x54>
    56f6:	4a07      	ldr	r2, [pc, #28]	; (5714 <CC_PalPowerSaveModeSelect+0x78>)
    56f8:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    56fc:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    5700:	f7ff ff48 	bl	5594 <CC_HalMaskInterrupt>
    5704:	6823      	ldr	r3, [r4, #0]
    5706:	e7d7      	b.n	56b8 <CC_PalPowerSaveModeSelect+0x1c>
    5708:	200000fc 	.word	0x200000fc
    570c:	200000ec 	.word	0x200000ec
    5710:	20000a0c 	.word	0x20000a0c
    5714:	5002a000 	.word	0x5002a000
    5718:	5002b910 	.word	0x5002b910
    571c:	ffff8fe9 	.word	0xffff8fe9

00005720 <z_impl_gpio_pin_interrupt_configure>:
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
    5720:	0413      	lsls	r3, r2, #16
{
    5722:	b430      	push	{r4, r5}
	const struct gpio_driver_api *api =
    5724:	6884      	ldr	r4, [r0, #8]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
    5726:	d507      	bpl.n	5738 <z_impl_gpio_pin_interrupt_configure+0x18>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
    5728:	6905      	ldr	r5, [r0, #16]
    572a:	2301      	movs	r3, #1
    572c:	682d      	ldr	r5, [r5, #0]
    572e:	408b      	lsls	r3, r1
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
    5730:	422b      	tst	r3, r5
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
    5732:	bf18      	it	ne
    5734:	f482 22c0 	eorne.w	r2, r2, #393216	; 0x60000
	return api->pin_interrupt_configure(port, pin, mode, trig);
    5738:	69a4      	ldr	r4, [r4, #24]
    573a:	f402 23c0 	and.w	r3, r2, #393216	; 0x60000
    573e:	46a4      	mov	ip, r4
    5740:	f402 32b0 	and.w	r2, r2, #90112	; 0x16000
}
    5744:	bc30      	pop	{r4, r5}
	return api->pin_interrupt_configure(port, pin, mode, trig);
    5746:	4760      	bx	ip

00005748 <z_impl_gpio_pin_configure>:
{
    5748:	b4f0      	push	{r4, r5, r6, r7}
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
    574a:	04d4      	lsls	r4, r2, #19
	const struct gpio_driver_api *api =
    574c:	6887      	ldr	r7, [r0, #8]
	struct gpio_driver_data *data =
    574e:	6906      	ldr	r6, [r0, #16]
{
    5750:	4613      	mov	r3, r2
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
    5752:	d506      	bpl.n	5762 <z_impl_gpio_pin_configure+0x1a>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
    5754:	f412 6f40 	tst.w	r2, #3072	; 0xc00
    5758:	d003      	beq.n	5762 <z_impl_gpio_pin_configure+0x1a>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
    575a:	07da      	lsls	r2, r3, #31
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
    575c:	bf48      	it	mi
    575e:	f483 6340 	eormi.w	r3, r3, #3072	; 0xc00
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
    5762:	6834      	ldr	r4, [r6, #0]
    5764:	2501      	movs	r5, #1
    5766:	408d      	lsls	r5, r1
    5768:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    576c:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
    576e:	bf4c      	ite	mi
    5770:	432c      	orrmi	r4, r5
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    5772:	43ac      	bicpl	r4, r5
	return api->pin_configure(port, pin, flags);
    5774:	683b      	ldr	r3, [r7, #0]
    5776:	6034      	str	r4, [r6, #0]
}
    5778:	bcf0      	pop	{r4, r5, r6, r7}
	return api->pin_configure(port, pin, flags);
    577a:	4718      	bx	r3

0000577c <gpio_add_callback>:
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
    577c:	6883      	ldr	r3, [r0, #8]
    577e:	69db      	ldr	r3, [r3, #28]
    5780:	b10b      	cbz	r3, 5786 <gpio_add_callback+0xa>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
    5782:	2201      	movs	r2, #1
    5784:	4718      	bx	r3
}
    5786:	f06f 0085 	mvn.w	r0, #133	; 0x85
    578a:	4770      	bx	lr

0000578c <gpio_pin_get_dt>:
{
    578c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    578e:	4603      	mov	r3, r0
	return gpio_pin_get(spec->port, spec->pin);
    5790:	6800      	ldr	r0, [r0, #0]
    5792:	791c      	ldrb	r4, [r3, #4]
	const struct gpio_driver_data *const data =
    5794:	6905      	ldr	r5, [r0, #16]
	return api->port_get_raw(port, value);
    5796:	6883      	ldr	r3, [r0, #8]
    5798:	a901      	add	r1, sp, #4
    579a:	685b      	ldr	r3, [r3, #4]
    579c:	4798      	blx	r3
	if (ret == 0) {
    579e:	b940      	cbnz	r0, 57b2 <gpio_pin_get_dt+0x26>
		*value ^= data->invert;
    57a0:	682b      	ldr	r3, [r5, #0]
    57a2:	9a01      	ldr	r2, [sp, #4]
    57a4:	405a      	eors	r2, r3
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
    57a6:	2301      	movs	r3, #1
    57a8:	40a3      	lsls	r3, r4
    57aa:	421a      	tst	r2, r3
    57ac:	bf14      	ite	ne
    57ae:	2001      	movne	r0, #1
    57b0:	2000      	moveq	r0, #0
}
    57b2:	b003      	add	sp, #12
    57b4:	bd30      	pop	{r4, r5, pc}

000057b6 <button1_pressed>:
}
    57b6:	4770      	bx	lr

000057b8 <k_msleep>:
 *
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
    57b8:	b538      	push	{r3, r4, r5, lr}
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
    57ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    57be:	f240 34e7 	movw	r4, #999	; 0x3e7
    57c2:	2500      	movs	r5, #0
    57c4:	fbc1 4500 	smlal	r4, r5, r1, r0
    57c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    57cc:	2300      	movs	r3, #0
    57ce:	4620      	mov	r0, r4
    57d0:	4629      	mov	r1, r5
    57d2:	f7fb f913 	bl	9fc <__aeabi_uldivmod>
	return k_sleep(Z_TIMEOUT_MS(ms));
}
    57d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return z_impl_k_sleep(timeout);
    57da:	f7ff baf1 	b.w	4dc0 <z_impl_k_sleep>

000057de <button3_pressed>:
    57de:	4770      	bx	lr

000057e0 <button4_pressed>:
    57e0:	4770      	bx	lr

000057e2 <button2_pressed>:
    57e2:	4770      	bx	lr

000057e4 <gpio_pin_interrupt_configure_dt.constprop.0>:
static inline int gpio_pin_interrupt_configure_dt(const struct gpio_dt_spec *spec,
    57e4:	4603      	mov	r3, r0
	return gpio_pin_interrupt_configure(spec->port, spec->pin, flags);
    57e6:	6800      	ldr	r0, [r0, #0]
    57e8:	7919      	ldrb	r1, [r3, #4]
    57ea:	f44f 22b8 	mov.w	r2, #376832	; 0x5c000
    57ee:	f7ff bf97 	b.w	5720 <z_impl_gpio_pin_interrupt_configure>

000057f2 <encode_uint>:
{
    57f2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    57f6:	4699      	mov	r9, r3
	bool upcase = isupper((int)conv->specifier);
    57f8:	78d3      	ldrb	r3, [r2, #3]
{
    57fa:	4614      	mov	r4, r2
	switch (specifier) {
    57fc:	2b6f      	cmp	r3, #111	; 0x6f
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    57fe:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
{
    5802:	4606      	mov	r6, r0
    5804:	460f      	mov	r7, r1
    5806:	9201      	str	r2, [sp, #4]
	switch (specifier) {
    5808:	d02d      	beq.n	5866 <encode_uint+0x74>
    580a:	d828      	bhi.n	585e <encode_uint+0x6c>
		return 16;
    580c:	2b58      	cmp	r3, #88	; 0x58
    580e:	bf14      	ite	ne
    5810:	250a      	movne	r5, #10
    5812:	2510      	moveq	r5, #16
	char *bp = bps + (bpe - bps);
    5814:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
		unsigned int lsv = (unsigned int)(value % radix);
    5818:	46aa      	mov	sl, r5
    581a:	f04f 0b00 	mov.w	fp, #0
    581e:	4652      	mov	r2, sl
    5820:	465b      	mov	r3, fp
    5822:	4630      	mov	r0, r6
    5824:	4639      	mov	r1, r7
    5826:	f7fb f8e9 	bl	9fc <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    582a:	2a09      	cmp	r2, #9
    582c:	b2d3      	uxtb	r3, r2
    582e:	d81f      	bhi.n	5870 <encode_uint+0x7e>
    5830:	3330      	adds	r3, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    5832:	455f      	cmp	r7, fp
		*--bp = (lsv <= 9) ? ('0' + lsv)
    5834:	b2db      	uxtb	r3, r3
	} while ((value != 0) && (bps < bp));
    5836:	bf08      	it	eq
    5838:	4556      	cmpeq	r6, sl
		*--bp = (lsv <= 9) ? ('0' + lsv)
    583a:	f808 3d01 	strb.w	r3, [r8, #-1]!
	} while ((value != 0) && (bps < bp));
    583e:	d301      	bcc.n	5844 <encode_uint+0x52>
    5840:	45c8      	cmp	r8, r9
    5842:	d812      	bhi.n	586a <encode_uint+0x78>
	if (conv->flag_hash) {
    5844:	7823      	ldrb	r3, [r4, #0]
    5846:	069b      	lsls	r3, r3, #26
    5848:	d505      	bpl.n	5856 <encode_uint+0x64>
		if (radix == 8) {
    584a:	2d08      	cmp	r5, #8
    584c:	d116      	bne.n	587c <encode_uint+0x8a>
			conv->altform_0 = true;
    584e:	78a3      	ldrb	r3, [r4, #2]
    5850:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    5854:	70a3      	strb	r3, [r4, #2]
}
    5856:	4640      	mov	r0, r8
    5858:	b003      	add	sp, #12
    585a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    585e:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
    5862:	2b70      	cmp	r3, #112	; 0x70
    5864:	e7d3      	b.n	580e <encode_uint+0x1c>
	switch (specifier) {
    5866:	2508      	movs	r5, #8
    5868:	e7d4      	b.n	5814 <encode_uint+0x22>
		value /= radix;
    586a:	4606      	mov	r6, r0
    586c:	460f      	mov	r7, r1
    586e:	e7d6      	b.n	581e <encode_uint+0x2c>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    5870:	9a01      	ldr	r2, [sp, #4]
    5872:	2a19      	cmp	r2, #25
    5874:	bf94      	ite	ls
    5876:	3337      	addls	r3, #55	; 0x37
    5878:	3357      	addhi	r3, #87	; 0x57
    587a:	e7da      	b.n	5832 <encode_uint+0x40>
		} else if (radix == 16) {
    587c:	2d10      	cmp	r5, #16
    587e:	d1ea      	bne.n	5856 <encode_uint+0x64>
			conv->altform_0c = true;
    5880:	78a3      	ldrb	r3, [r4, #2]
    5882:	f043 0310 	orr.w	r3, r3, #16
    5886:	e7e5      	b.n	5854 <encode_uint+0x62>

00005888 <outs>:
{
    5888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    588c:	4607      	mov	r7, r0
    588e:	4688      	mov	r8, r1
    5890:	4615      	mov	r5, r2
    5892:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    5894:	4614      	mov	r4, r2
    5896:	42b4      	cmp	r4, r6
    5898:	eba4 0005 	sub.w	r0, r4, r5
    589c:	d302      	bcc.n	58a4 <outs+0x1c>
    589e:	b93e      	cbnz	r6, 58b0 <outs+0x28>
    58a0:	7823      	ldrb	r3, [r4, #0]
    58a2:	b12b      	cbz	r3, 58b0 <outs+0x28>
		int rc = out((int)*sp++, ctx);
    58a4:	f814 0b01 	ldrb.w	r0, [r4], #1
    58a8:	4641      	mov	r1, r8
    58aa:	47b8      	blx	r7
		if (rc < 0) {
    58ac:	2800      	cmp	r0, #0
    58ae:	daf2      	bge.n	5896 <outs+0xe>
}
    58b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000058b4 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    58b4:	4770      	bx	lr

000058b6 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    58b6:	4603      	mov	r3, r0
    58b8:	b158      	cbz	r0, 58d2 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    58ba:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    58bc:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    58c0:	2a01      	cmp	r2, #1
    58c2:	d003      	beq.n	58cc <sys_notify_validate+0x16>
    58c4:	2a03      	cmp	r2, #3
    58c6:	d104      	bne.n	58d2 <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    58c8:	6802      	ldr	r2, [r0, #0]
    58ca:	b112      	cbz	r2, 58d2 <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    58cc:	2000      	movs	r0, #0
    58ce:	6098      	str	r0, [r3, #8]
    58d0:	4770      	bx	lr
		return -EINVAL;
    58d2:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    58d6:	4770      	bx	lr

000058d8 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    58d8:	6842      	ldr	r2, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    58da:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
    58dc:	f002 0203 	and.w	r2, r2, #3
	switch (method) {
    58e0:	2a03      	cmp	r2, #3
    58e2:	f04f 0200 	mov.w	r2, #0
{
    58e6:	4603      	mov	r3, r0
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    58e8:	bf0c      	ite	eq
    58ea:	6800      	ldreq	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
    58ec:	4610      	movne	r0, r2
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    58ee:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    58f0:	4770      	bx	lr

000058f2 <abort_function>:
{
    58f2:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    58f4:	2000      	movs	r0, #0
    58f6:	f7fc fc59 	bl	21ac <sys_reboot>

000058fa <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    58fa:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    58fc:	f013 0307 	ands.w	r3, r3, #7
    5900:	d105      	bne.n	590e <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    5902:	6803      	ldr	r3, [r0, #0]
    5904:	2b00      	cmp	r3, #0
		evt = EVT_START;
    5906:	bf0c      	ite	eq
    5908:	2000      	moveq	r0, #0
    590a:	2003      	movne	r0, #3
    590c:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    590e:	2b02      	cmp	r3, #2
    5910:	d105      	bne.n	591e <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    5912:	8b43      	ldrh	r3, [r0, #26]
    5914:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
    5916:	bf14      	ite	ne
    5918:	2000      	movne	r0, #0
    591a:	2004      	moveq	r0, #4
    591c:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    591e:	2b01      	cmp	r3, #1
    5920:	d105      	bne.n	592e <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    5922:	6803      	ldr	r3, [r0, #0]
    5924:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
    5926:	bf0c      	ite	eq
    5928:	2000      	moveq	r0, #0
    592a:	2005      	movne	r0, #5
    592c:	4770      	bx	lr
	int evt = EVT_NOP;
    592e:	2000      	movs	r0, #0
}
    5930:	4770      	bx	lr

00005932 <notify_one>:
{
    5932:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5936:	460d      	mov	r5, r1
    5938:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    593a:	4619      	mov	r1, r3
    593c:	1d28      	adds	r0, r5, #4
{
    593e:	4690      	mov	r8, r2
    5940:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    5942:	f7ff ffc9 	bl	58d8 <sys_notify_finalize>
	if (cb) {
    5946:	4604      	mov	r4, r0
    5948:	b138      	cbz	r0, 595a <notify_one+0x28>
		cb(mgr, cli, state, res);
    594a:	4633      	mov	r3, r6
    594c:	4642      	mov	r2, r8
    594e:	4629      	mov	r1, r5
    5950:	4638      	mov	r0, r7
    5952:	46a4      	mov	ip, r4
}
    5954:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    5958:	4760      	bx	ip
}
    595a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000595e <transition_complete>:
{
    595e:	b410      	push	{r4}
	__asm__ volatile(
    5960:	f04f 0420 	mov.w	r4, #32
    5964:	f3ef 8211 	mrs	r2, BASEPRI
    5968:	f384 8812 	msr	BASEPRI_MAX, r4
    596c:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    5970:	6141      	str	r1, [r0, #20]
}
    5972:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
    5974:	2101      	movs	r1, #1
    5976:	f7fc ba05 	b.w	1d84 <process_event>

0000597a <validate_args>:
{
    597a:	b510      	push	{r4, lr}
    597c:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    597e:	b140      	cbz	r0, 5992 <validate_args+0x18>
    5980:	b139      	cbz	r1, 5992 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
    5982:	1d08      	adds	r0, r1, #4
    5984:	f7ff ff97 	bl	58b6 <sys_notify_validate>
	if ((rv == 0)
    5988:	b928      	cbnz	r0, 5996 <validate_args+0x1c>
	    && ((cli->notify.flags
    598a:	68a3      	ldr	r3, [r4, #8]
    598c:	f033 0303 	bics.w	r3, r3, #3
    5990:	d001      	beq.n	5996 <validate_args+0x1c>
		rv = -EINVAL;
    5992:	f06f 0015 	mvn.w	r0, #21
}
    5996:	bd10      	pop	{r4, pc}

00005998 <onoff_manager_init>:
{
    5998:	b538      	push	{r3, r4, r5, lr}
    599a:	460c      	mov	r4, r1
	if ((mgr == NULL)
    599c:	4605      	mov	r5, r0
    599e:	b158      	cbz	r0, 59b8 <onoff_manager_init+0x20>
	    || (transitions == NULL)
    59a0:	b151      	cbz	r1, 59b8 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    59a2:	680b      	ldr	r3, [r1, #0]
    59a4:	b143      	cbz	r3, 59b8 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    59a6:	684b      	ldr	r3, [r1, #4]
    59a8:	b133      	cbz	r3, 59b8 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    59aa:	221c      	movs	r2, #28
    59ac:	2100      	movs	r1, #0
    59ae:	f000 f8b4 	bl	5b1a <memset>
    59b2:	612c      	str	r4, [r5, #16]
	return 0;
    59b4:	2000      	movs	r0, #0
}
    59b6:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    59b8:	f06f 0015 	mvn.w	r0, #21
    59bc:	e7fb      	b.n	59b6 <onoff_manager_init+0x1e>

000059be <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    59be:	b570      	push	{r4, r5, r6, lr}
    59c0:	4604      	mov	r4, r0
    59c2:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    59c4:	f7ff ffd9 	bl	597a <validate_args>

	if (rv < 0) {
    59c8:	1e05      	subs	r5, r0, #0
    59ca:	db31      	blt.n	5a30 <onoff_request+0x72>
    59cc:	f04f 0320 	mov.w	r3, #32
    59d0:	f3ef 8111 	mrs	r1, BASEPRI
    59d4:	f383 8812 	msr	BASEPRI_MAX, r3
    59d8:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    59dc:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    59de:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
    59e0:	f64f 75ff 	movw	r5, #65535	; 0xffff
    59e4:	42ab      	cmp	r3, r5
    59e6:	f000 0207 	and.w	r2, r0, #7
    59ea:	d02e      	beq.n	5a4a <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    59ec:	2a02      	cmp	r2, #2
    59ee:	d10e      	bne.n	5a0e <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    59f0:	3301      	adds	r3, #1
    59f2:	8363      	strh	r3, [r4, #26]
	rv = state;
    59f4:	4615      	mov	r5, r2
		notify = true;
    59f6:	2301      	movs	r3, #1
	__asm__ volatile(
    59f8:	f381 8811 	msr	BASEPRI, r1
    59fc:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    5a00:	b1b3      	cbz	r3, 5a30 <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
    5a02:	2300      	movs	r3, #0
    5a04:	4631      	mov	r1, r6
    5a06:	4620      	mov	r0, r4
    5a08:	f7ff ff93 	bl	5932 <notify_one>
    5a0c:	e010      	b.n	5a30 <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
    5a0e:	0783      	lsls	r3, r0, #30
    5a10:	d001      	beq.n	5a16 <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
    5a12:	2a06      	cmp	r2, #6
    5a14:	d10e      	bne.n	5a34 <onoff_request+0x76>
	parent->next = child;
    5a16:	2300      	movs	r3, #0
    5a18:	6033      	str	r3, [r6, #0]
Z_GENLIST_APPEND(slist, snode)
    5a1a:	6863      	ldr	r3, [r4, #4]
    5a1c:	b993      	cbnz	r3, 5a44 <onoff_request+0x86>
	list->head = node;
    5a1e:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
    5a22:	4615      	mov	r5, r2
    5a24:	b962      	cbnz	r2, 5a40 <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
    5a26:	460a      	mov	r2, r1
    5a28:	4620      	mov	r0, r4
    5a2a:	2102      	movs	r1, #2
    5a2c:	f7fc f9aa 	bl	1d84 <process_event>
		}
	}

	return rv;
}
    5a30:	4628      	mov	r0, r5
    5a32:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
    5a34:	2a05      	cmp	r2, #5
    5a36:	bf0c      	ite	eq
    5a38:	f06f 0585 	mvneq.w	r5, #133	; 0x85
    5a3c:	f06f 0504 	mvnne.w	r5, #4
    5a40:	2300      	movs	r3, #0
    5a42:	e7d9      	b.n	59f8 <onoff_request+0x3a>
	parent->next = child;
    5a44:	601e      	str	r6, [r3, #0]
	list->tail = node;
    5a46:	6066      	str	r6, [r4, #4]
}
    5a48:	e7eb      	b.n	5a22 <onoff_request+0x64>
		rv = -EAGAIN;
    5a4a:	f06f 050a 	mvn.w	r5, #10
    5a4e:	e7f7      	b.n	5a40 <onoff_request+0x82>

00005a50 <arch_printk_char_out>:
}
    5a50:	2000      	movs	r0, #0
    5a52:	4770      	bx	lr

00005a54 <printk>:
 *
 * @return N/A
 */

void printk(const char *fmt, ...)
{
    5a54:	b40f      	push	{r0, r1, r2, r3}
    5a56:	b507      	push	{r0, r1, r2, lr}
    5a58:	a904      	add	r1, sp, #16
    5a5a:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    5a5e:	9101      	str	r1, [sp, #4]

	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		log_printk(fmt, ap);
	} else {
		vprintk(fmt, ap);
    5a60:	f7fc fb96 	bl	2190 <vprintk>
	}
	va_end(ap);
}
    5a64:	b003      	add	sp, #12
    5a66:	f85d eb04 	ldr.w	lr, [sp], #4
    5a6a:	b004      	add	sp, #16
    5a6c:	4770      	bx	lr

00005a6e <pm_policy_next_state>:
		}
	}

error:
	LOG_DBG("No suitable power state found for cpu: %d!", cpu);
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
    5a6e:	2200      	movs	r2, #0
    5a70:	e9c0 2200 	strd	r2, r2, [r0]
    5a74:	6082      	str	r2, [r0, #8]
}
    5a76:	4770      	bx	lr

00005a78 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    5a78:	4604      	mov	r4, r0
    5a7a:	b508      	push	{r3, lr}
    5a7c:	4608      	mov	r0, r1
    5a7e:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    5a80:	461a      	mov	r2, r3
    5a82:	47a0      	blx	r4
	return z_impl_z_current_get();
    5a84:	f7ff f9b6 	bl	4df4 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    5a88:	f7fc fe5a 	bl	2740 <z_impl_k_thread_abort>

00005a8c <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    5a8c:	f000 ba61 	b.w	5f52 <z_fatal_error>

00005a90 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    5a90:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
    5a92:	6800      	ldr	r0, [r0, #0]
    5a94:	f000 ba5d 	b.w	5f52 <z_fatal_error>

00005a98 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    5a98:	2100      	movs	r1, #0
    5a9a:	2001      	movs	r0, #1
    5a9c:	f7ff bff6 	b.w	5a8c <z_arm_fatal_error>

00005aa0 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
    5aa0:	b508      	push	{r3, lr}
	handler();
    5aa2:	f7fc fbd5 	bl	2250 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    5aa6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    5aaa:	f7fc bcc7 	b.w	243c <z_arm_exc_exit>

00005aae <_stdout_hook_default>:
}
    5aae:	f04f 30ff 	mov.w	r0, #4294967295
    5ab2:	4770      	bx	lr

00005ab4 <fputc>:
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&c, *(uintptr_t *)&stream, K_SYSCALL_ZEPHYR_FPUTC);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_fputc(c, stream);
    5ab4:	f7fc bf2a 	b.w	290c <z_impl_zephyr_fputc>

00005ab8 <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    5ab8:	3901      	subs	r1, #1
    5aba:	4603      	mov	r3, r0
    5abc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    5ac0:	b90a      	cbnz	r2, 5ac6 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
    5ac2:	701a      	strb	r2, [r3, #0]

	return dest;
}
    5ac4:	4770      	bx	lr
		*d = *s;
    5ac6:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
    5aca:	e7f7      	b.n	5abc <strcpy+0x4>

00005acc <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    5acc:	4603      	mov	r3, r0
	size_t n = 0;
    5ace:	2000      	movs	r0, #0

	while (*s != '\0') {
    5ad0:	5c1a      	ldrb	r2, [r3, r0]
    5ad2:	b902      	cbnz	r2, 5ad6 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    5ad4:	4770      	bx	lr
		n++;
    5ad6:	3001      	adds	r0, #1
    5ad8:	e7fa      	b.n	5ad0 <strlen+0x4>

00005ada <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    5ada:	4603      	mov	r3, r0
	size_t n = 0;
    5adc:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    5ade:	5c1a      	ldrb	r2, [r3, r0]
    5ae0:	b10a      	cbz	r2, 5ae6 <strnlen+0xc>
    5ae2:	4288      	cmp	r0, r1
    5ae4:	d100      	bne.n	5ae8 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
    5ae6:	4770      	bx	lr
		n++;
    5ae8:	3001      	adds	r0, #1
    5aea:	e7f8      	b.n	5ade <strnlen+0x4>

00005aec <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    5aec:	1e43      	subs	r3, r0, #1
    5aee:	3901      	subs	r1, #1
    5af0:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    5af4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    5af8:	4282      	cmp	r2, r0
    5afa:	d101      	bne.n	5b00 <strcmp+0x14>
    5afc:	2a00      	cmp	r2, #0
    5afe:	d1f7      	bne.n	5af0 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    5b00:	1a10      	subs	r0, r2, r0
    5b02:	4770      	bx	lr

00005b04 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    5b04:	b510      	push	{r4, lr}
    5b06:	1e43      	subs	r3, r0, #1
    5b08:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    5b0a:	4291      	cmp	r1, r2
    5b0c:	d100      	bne.n	5b10 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    5b0e:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    5b10:	f811 4b01 	ldrb.w	r4, [r1], #1
    5b14:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    5b18:	e7f7      	b.n	5b0a <memcpy+0x6>

00005b1a <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    5b1a:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    5b1c:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
    5b1e:	4603      	mov	r3, r0
	while (n > 0) {
    5b20:	4293      	cmp	r3, r2
    5b22:	d100      	bne.n	5b26 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    5b24:	4770      	bx	lr
		*(d_byte++) = c_byte;
    5b26:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    5b2a:	e7f9      	b.n	5b20 <memset+0x6>

00005b2c <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
    5b2c:	b084      	sub	sp, #16
    5b2e:	ab04      	add	r3, sp, #16
    5b30:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
    5b34:	f89d 3004 	ldrb.w	r3, [sp, #4]
    5b38:	2b06      	cmp	r3, #6
    5b3a:	d108      	bne.n	5b4e <pm_power_state_set+0x22>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    5b3c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5b40:	2201      	movs	r2, #1
    5b42:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    5b46:	f3bf 8f4f 	dsb	sy
        __WFE();
    5b4a:	bf20      	wfe
    while (true)
    5b4c:	e7fd      	b.n	5b4a <pm_power_state_set+0x1e>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
    5b4e:	b004      	add	sp, #16
    5b50:	4770      	bx	lr

00005b52 <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
    5b52:	b084      	sub	sp, #16
    5b54:	ab04      	add	r3, sp, #16
    5b56:	e903 0007 	stmdb	r3, {r0, r1, r2}
    5b5a:	2300      	movs	r3, #0
    5b5c:	f383 8811 	msr	BASEPRI, r3
    5b60:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    5b64:	b004      	add	sp, #16
    5b66:	4770      	bx	lr

00005b68 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    5b68:	6902      	ldr	r2, [r0, #16]
    5b6a:	b2cb      	uxtb	r3, r1
    5b6c:	210c      	movs	r1, #12
    5b6e:	fb03 2101 	mla	r1, r3, r1, r2
    5b72:	6c08      	ldr	r0, [r1, #64]	; 0x40
}
    5b74:	f000 0007 	and.w	r0, r0, #7
    5b78:	4770      	bx	lr

00005b7a <set_off_state>:
	__asm__ volatile(
    5b7a:	f04f 0320 	mov.w	r3, #32
    5b7e:	f3ef 8211 	mrs	r2, BASEPRI
    5b82:	f383 8812 	msr	BASEPRI_MAX, r3
    5b86:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    5b8a:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    5b8c:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    5b90:	d001      	beq.n	5b96 <set_off_state+0x1c>
    5b92:	428b      	cmp	r3, r1
    5b94:	d107      	bne.n	5ba6 <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    5b96:	2301      	movs	r3, #1
    5b98:	6003      	str	r3, [r0, #0]
	int err = 0;
    5b9a:	2000      	movs	r0, #0
	__asm__ volatile(
    5b9c:	f382 8811 	msr	BASEPRI, r2
    5ba0:	f3bf 8f6f 	isb	sy
}
    5ba4:	4770      	bx	lr
		err = -EPERM;
    5ba6:	f04f 30ff 	mov.w	r0, #4294967295
    5baa:	e7f7      	b.n	5b9c <set_off_state+0x22>

00005bac <set_starting_state>:
{
    5bac:	b510      	push	{r4, lr}
	__asm__ volatile(
    5bae:	f04f 0320 	mov.w	r3, #32
    5bb2:	f3ef 8211 	mrs	r2, BASEPRI
    5bb6:	f383 8812 	msr	BASEPRI_MAX, r3
    5bba:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    5bbe:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    5bc0:	f003 0407 	and.w	r4, r3, #7
    5bc4:	2c01      	cmp	r4, #1
    5bc6:	d106      	bne.n	5bd6 <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    5bc8:	6001      	str	r1, [r0, #0]
	int err = 0;
    5bca:	2000      	movs	r0, #0
	__asm__ volatile(
    5bcc:	f382 8811 	msr	BASEPRI, r2
    5bd0:	f3bf 8f6f 	isb	sy
}
    5bd4:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    5bd6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
    5bda:	428b      	cmp	r3, r1
		err = -EALREADY;
    5bdc:	bf14      	ite	ne
    5bde:	f04f 30ff 	movne.w	r0, #4294967295
    5be2:	f06f 0077 	mvneq.w	r0, #119	; 0x77
    5be6:	e7f1      	b.n	5bcc <set_starting_state+0x20>

00005be8 <set_on_state>:
	__asm__ volatile(
    5be8:	f04f 0320 	mov.w	r3, #32
    5bec:	f3ef 8211 	mrs	r2, BASEPRI
    5bf0:	f383 8812 	msr	BASEPRI_MAX, r3
    5bf4:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    5bf8:	6803      	ldr	r3, [r0, #0]
    5bfa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    5bfe:	f043 0302 	orr.w	r3, r3, #2
    5c02:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    5c04:	f382 8811 	msr	BASEPRI, r2
    5c08:	f3bf 8f6f 	isb	sy
}
    5c0c:	4770      	bx	lr

00005c0e <onoff_started_callback>:
	return &data->mgr[type];
    5c0e:	6900      	ldr	r0, [r0, #16]
{
    5c10:	b410      	push	{r4}
	return &data->mgr[type];
    5c12:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    5c14:	241c      	movs	r4, #28
    5c16:	fb03 0004 	mla	r0, r3, r4, r0
    5c1a:	2100      	movs	r1, #0
}
    5c1c:	bc10      	pop	{r4}
	notify(mgr, 0);
    5c1e:	4710      	bx	r2

00005c20 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    5c20:	2000      	movs	r0, #0
    5c22:	f7fd be29 	b.w	3878 <nrfx_clock_start>

00005c26 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    5c26:	2000      	movs	r0, #0
    5c28:	f7fd be58 	b.w	38dc <nrfx_clock_stop>

00005c2c <blocking_start_callback>:
{
    5c2c:	4610      	mov	r0, r2
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    5c2e:	f7ff b939 	b.w	4ea4 <z_impl_k_sem_give>

00005c32 <api_stop>:
{
    5c32:	b538      	push	{r3, r4, r5, lr}
    5c34:	b2cc      	uxtb	r4, r1
	err = set_off_state(&subdata->flags, ctx);
    5c36:	230c      	movs	r3, #12
{
    5c38:	4605      	mov	r5, r0
	err = set_off_state(&subdata->flags, ctx);
    5c3a:	4363      	muls	r3, r4
    5c3c:	6900      	ldr	r0, [r0, #16]
    5c3e:	3340      	adds	r3, #64	; 0x40
    5c40:	2180      	movs	r1, #128	; 0x80
    5c42:	4418      	add	r0, r3
    5c44:	f7ff ff99 	bl	5b7a <set_off_state>
	if (err < 0) {
    5c48:	2800      	cmp	r0, #0
    5c4a:	db05      	blt.n	5c58 <api_stop+0x26>
	get_sub_config(dev, type)->stop();
    5c4c:	6869      	ldr	r1, [r5, #4]
    5c4e:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
    5c52:	6863      	ldr	r3, [r4, #4]
    5c54:	4798      	blx	r3
	return 0;
    5c56:	2000      	movs	r0, #0
}
    5c58:	bd38      	pop	{r3, r4, r5, pc}

00005c5a <api_start>:
{
    5c5a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5c5e:	b2cd      	uxtb	r5, r1
	err = set_starting_state(&subdata->flags, ctx);
    5c60:	270c      	movs	r7, #12
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    5c62:	6904      	ldr	r4, [r0, #16]
	err = set_starting_state(&subdata->flags, ctx);
    5c64:	436f      	muls	r7, r5
{
    5c66:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
    5c68:	f107 0040 	add.w	r0, r7, #64	; 0x40
    5c6c:	2180      	movs	r1, #128	; 0x80
    5c6e:	4420      	add	r0, r4
{
    5c70:	4690      	mov	r8, r2
    5c72:	4699      	mov	r9, r3
	err = set_starting_state(&subdata->flags, ctx);
    5c74:	f7ff ff9a 	bl	5bac <set_starting_state>
	if (err < 0) {
    5c78:	2800      	cmp	r0, #0
    5c7a:	db07      	blt.n	5c8c <api_start+0x32>
	subdata->cb = cb;
    5c7c:	443c      	add	r4, r7
	subdata->user_data = user_data;
    5c7e:	e9c4 890e 	strd	r8, r9, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    5c82:	6873      	ldr	r3, [r6, #4]
    5c84:	f853 3035 	ldr.w	r3, [r3, r5, lsl #3]
    5c88:	4798      	blx	r3
	return 0;
    5c8a:	2000      	movs	r0, #0
}
    5c8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00005c90 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    5c90:	6843      	ldr	r3, [r0, #4]
    5c92:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    5c94:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    5c98:	600b      	str	r3, [r1, #0]
}
    5c9a:	2000      	movs	r0, #0
    5c9c:	4770      	bx	lr

00005c9e <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    5c9e:	6843      	ldr	r3, [r0, #4]
    5ca0:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    5ca2:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    5ca6:	4042      	eors	r2, r0
    5ca8:	400a      	ands	r2, r1
    5caa:	4042      	eors	r2, r0
    p_reg->OUT = value;
    5cac:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    5cb0:	2000      	movs	r0, #0
    5cb2:	4770      	bx	lr

00005cb4 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    5cb4:	6843      	ldr	r3, [r0, #4]
    5cb6:	685b      	ldr	r3, [r3, #4]
}
    5cb8:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    5cba:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    5cbe:	4770      	bx	lr

00005cc0 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    5cc0:	6843      	ldr	r3, [r0, #4]
    5cc2:	685b      	ldr	r3, [r3, #4]
}
    5cc4:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    5cc6:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    5cca:	4770      	bx	lr

00005ccc <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    5ccc:	6843      	ldr	r3, [r0, #4]
    5cce:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    5cd0:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
    5cd4:	404b      	eors	r3, r1
    p_reg->OUT = value;
    5cd6:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
    5cda:	2000      	movs	r0, #0
    5cdc:	4770      	bx	lr

00005cde <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    5cde:	6903      	ldr	r3, [r0, #16]
Z_GENLIST_IS_EMPTY(slist)
    5ce0:	6858      	ldr	r0, [r3, #4]
{
    5ce2:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
    5ce4:	b158      	cbz	r0, 5cfe <gpio_nrfx_manage_callback+0x20>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    5ce6:	2400      	movs	r4, #0
    5ce8:	4281      	cmp	r1, r0
    5cea:	d113      	bne.n	5d14 <gpio_nrfx_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
    5cec:	6808      	ldr	r0, [r1, #0]
    5cee:	b95c      	cbnz	r4, 5d08 <gpio_nrfx_manage_callback+0x2a>
    5cf0:	689c      	ldr	r4, [r3, #8]
	list->head = node;
    5cf2:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    5cf4:	42a1      	cmp	r1, r4
    5cf6:	d100      	bne.n	5cfa <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
    5cf8:	6098      	str	r0, [r3, #8]
	parent->next = child;
    5cfa:	2000      	movs	r0, #0
    5cfc:	6008      	str	r0, [r1, #0]
	if (set) {
    5cfe:	b972      	cbnz	r2, 5d1e <gpio_nrfx_manage_callback+0x40>
	return 0;
    5d00:	2000      	movs	r0, #0
}
    5d02:	bd30      	pop	{r4, r5, pc}
    5d04:	4628      	mov	r0, r5
    5d06:	e7ef      	b.n	5ce8 <gpio_nrfx_manage_callback+0xa>
    5d08:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
    5d0a:	6898      	ldr	r0, [r3, #8]
    5d0c:	4281      	cmp	r1, r0
	list->tail = node;
    5d0e:	bf08      	it	eq
    5d10:	609c      	streq	r4, [r3, #8]
}
    5d12:	e7f2      	b.n	5cfa <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    5d14:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    5d16:	4604      	mov	r4, r0
    5d18:	2d00      	cmp	r5, #0
    5d1a:	d1f3      	bne.n	5d04 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
    5d1c:	b13a      	cbz	r2, 5d2e <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
    5d1e:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
    5d20:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
    5d22:	6898      	ldr	r0, [r3, #8]
	list->head = node;
    5d24:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    5d26:	2800      	cmp	r0, #0
    5d28:	d1ea      	bne.n	5d00 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
    5d2a:	6099      	str	r1, [r3, #8]
}
    5d2c:	e7e9      	b.n	5d02 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
    5d2e:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    5d32:	e7e6      	b.n	5d02 <gpio_nrfx_manage_callback+0x24>

00005d34 <uarte_nrfx_isr_int>:
	return config->uarte_regs;
    5d34:	6843      	ldr	r3, [r0, #4]
    5d36:	681b      	ldr	r3, [r3, #0]
    return p_reg->INTENSET & mask;
    5d38:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    5d3c:	05d1      	lsls	r1, r2, #23
    5d3e:	d518      	bpl.n	5d72 <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5d40:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    5d44:	b1aa      	cbz	r2, 5d72 <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
    5d46:	f04f 0120 	mov.w	r1, #32
    5d4a:	f3ef 8211 	mrs	r2, BASEPRI
    5d4e:	f381 8812 	msr	BASEPRI_MAX, r1
    5d52:	f3bf 8f6f 	isb	sy
    5d56:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    5d5a:	b131      	cbz	r1, 5d6a <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5d5c:	2100      	movs	r1, #0
    5d5e:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
    5d62:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5d66:	2101      	movs	r1, #1
    5d68:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
    5d6a:	f382 8811 	msr	BASEPRI, r2
    5d6e:	f3bf 8f6f 	isb	sy
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    5d72:	6842      	ldr	r2, [r0, #4]
    5d74:	6852      	ldr	r2, [r2, #4]
    5d76:	06d2      	lsls	r2, r2, #27
    5d78:	d515      	bpl.n	5da6 <uarte_nrfx_isr_int+0x72>
	__asm__ volatile(
    5d7a:	f04f 0120 	mov.w	r1, #32
    5d7e:	f3ef 8211 	mrs	r2, BASEPRI
    5d82:	f381 8812 	msr	BASEPRI_MAX, r1
    5d86:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5d8a:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    5d8e:	b111      	cbz	r1, 5d96 <uarte_nrfx_isr_int+0x62>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    5d90:	2100      	movs	r1, #0
    5d92:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    5d96:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    5d9a:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
    5d9e:	f382 8811 	msr	BASEPRI, r2
    5da2:	f3bf 8f6f 	isb	sy
}
    5da6:	4770      	bx	lr

00005da8 <uarte_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
    5da8:	6902      	ldr	r2, [r0, #16]
{
    5daa:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
    5dac:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    5db0:	e883 0003 	stmia.w	r3, {r0, r1}
}
    5db4:	2000      	movs	r0, #0
    5db6:	4770      	bx	lr

00005db8 <uarte_nrfx_err_check>:
	return config->uarte_regs;
    5db8:	6843      	ldr	r3, [r0, #4]
    5dba:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    5dbc:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    5dc0:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    5dc4:	4770      	bx	lr

00005dc6 <is_tx_ready>:
	const struct uarte_nrfx_config *config = get_dev_config(dev);
    5dc6:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
    5dc8:	6813      	ldr	r3, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5dca:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    5dce:	b940      	cbnz	r0, 5de2 <is_tx_ready+0x1c>
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    5dd0:	6852      	ldr	r2, [r2, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    5dd2:	0792      	lsls	r2, r2, #30
    5dd4:	d406      	bmi.n	5de4 <is_tx_ready+0x1e>
    5dd6:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    5dda:	3800      	subs	r0, #0
    5ddc:	bf18      	it	ne
    5dde:	2001      	movne	r0, #1
    5de0:	4770      	bx	lr
    5de2:	2001      	movs	r0, #1
}
    5de4:	4770      	bx	lr

00005de6 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    5de6:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
    5de8:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
    5dea:	681b      	ldr	r3, [r3, #0]
    5dec:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    5df0:	b148      	cbz	r0, 5e06 <uarte_nrfx_poll_in+0x20>
	*c = data->rx_data;
    5df2:	7c52      	ldrb	r2, [r2, #17]
    5df4:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5df6:	2000      	movs	r0, #0
    5df8:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    5dfc:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5e00:	2201      	movs	r2, #1
    5e02:	601a      	str	r2, [r3, #0]
	return 0;
    5e04:	4770      	bx	lr
		return -1;
    5e06:	f04f 30ff 	mov.w	r0, #4294967295
}
    5e0a:	4770      	bx	lr

00005e0c <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    5e0c:	b510      	push	{r4, lr}
    5e0e:	2200      	movs	r2, #0
    5e10:	4604      	mov	r4, r0
    5e12:	2101      	movs	r1, #1
    5e14:	2002      	movs	r0, #2
    5e16:	f7fc fa77 	bl	2308 <z_arm_irq_priority_set>
    5e1a:	2002      	movs	r0, #2
    5e1c:	f7fc fa56 	bl	22cc <arch_irq_enable>
    5e20:	4620      	mov	r0, r4
    5e22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5e26:	f7fd ba2d 	b.w	3284 <uarte_instance_init.isra.0>

00005e2a <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    5e2a:	b510      	push	{r4, lr}
    5e2c:	2200      	movs	r2, #0
    5e2e:	4604      	mov	r4, r0
    5e30:	2101      	movs	r1, #1
    5e32:	2028      	movs	r0, #40	; 0x28
    5e34:	f7fc fa68 	bl	2308 <z_arm_irq_priority_set>
    5e38:	2028      	movs	r0, #40	; 0x28
    5e3a:	f7fc fa47 	bl	22cc <arch_irq_enable>
    5e3e:	4620      	mov	r0, r4
    5e40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5e44:	f7fd ba1e 	b.w	3284 <uarte_instance_init.isra.0>

00005e48 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    5e48:	4770      	bx	lr

00005e4a <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    5e4a:	b508      	push	{r3, lr}
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
    5e4c:	2000      	movs	r0, #0
    5e4e:	f7fc fd9b 	bl	2988 <sys_arch_reboot>

00005e52 <hw_cc3xx_init_internal>:

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    5e52:	f7ff ba85 	b.w	5360 <nrf_cc3xx_platform_init_no_rng>

00005e56 <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
    5e56:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    5e58:	f7fb feca 	bl	1bf0 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    5e5c:	f7fb ff7c 	bl	1d58 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
    5e60:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init_no_rng();
    5e64:	f7ff ba7c 	b.w	5360 <nrf_cc3xx_platform_init_no_rng>

00005e68 <nrfx_clock_enable>:
{
    5e68:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    5e6a:	2000      	movs	r0, #0
    5e6c:	f7fc fa3e 	bl	22ec <arch_irq_is_enabled>
    5e70:	b918      	cbnz	r0, 5e7a <nrfx_clock_enable+0x12>
}
    5e72:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    5e76:	f7fc ba29 	b.w	22cc <arch_irq_enable>
    5e7a:	bd08      	pop	{r3, pc}

00005e7c <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    5e7c:	4700      	bx	r0

00005e7e <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    5e7e:	f000 b9c8 	b.w	6212 <z_impl_k_busy_wait>

00005e82 <nrf_gpio_reconfigure>:
{
    5e82:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5e84:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    5e86:	a801      	add	r0, sp, #4
{
    5e88:	e9dd 4608 	ldrd	r4, r6, [sp, #32]
    5e8c:	4617      	mov	r7, r2
    5e8e:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    5e90:	f7fd fde4 	bl	3a5c <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    5e94:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    5e96:	2f00      	cmp	r7, #0
    5e98:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    5e9c:	bf14      	ite	ne
    5e9e:	2302      	movne	r3, #2
    5ea0:	2300      	moveq	r3, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    5ea2:	2900      	cmp	r1, #0
    5ea4:	bf18      	it	ne
    5ea6:	f043 0301 	orrne.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    5eaa:	2d00      	cmp	r5, #0
    5eac:	bf14      	ite	ne
    5eae:	f04f 0c0c 	movne.w	ip, #12
    5eb2:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    5eb6:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    5eb8:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    5ebc:	bf14      	ite	ne
    5ebe:	f44f 6ce0 	movne.w	ip, #1792	; 0x700
    5ec2:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    5ec6:	2e00      	cmp	r6, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    5ec8:	ea43 030c 	orr.w	r3, r3, ip
    uint32_t cnf = reg->PIN_CNF[pin_number];
    5ecc:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    5ed0:	bf14      	ite	ne
    5ed2:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
    5ed6:	f04f 0c00 	moveq.w	ip, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    5eda:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
    5ede:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    5ee2:	b101      	cbz	r1, 5ee6 <nrf_gpio_reconfigure+0x64>
    5ee4:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    5ee6:	b10f      	cbz	r7, 5eec <nrf_gpio_reconfigure+0x6a>
    5ee8:	783f      	ldrb	r7, [r7, #0]
    5eea:	007f      	lsls	r7, r7, #1
    5eec:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    5eee:	b10d      	cbz	r5, 5ef4 <nrf_gpio_reconfigure+0x72>
    5ef0:	782d      	ldrb	r5, [r5, #0]
    5ef2:	00ad      	lsls	r5, r5, #2
    5ef4:	4339      	orrs	r1, r7
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    5ef6:	b10c      	cbz	r4, 5efc <nrf_gpio_reconfigure+0x7a>
    5ef8:	7822      	ldrb	r2, [r4, #0]
    5efa:	0214      	lsls	r4, r2, #8
    5efc:	430d      	orrs	r5, r1
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    5efe:	b10e      	cbz	r6, 5f04 <nrf_gpio_reconfigure+0x82>
    5f00:	7836      	ldrb	r6, [r6, #0]
    5f02:	0436      	lsls	r6, r6, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    5f04:	432c      	orrs	r4, r5
    5f06:	4334      	orrs	r4, r6
    reg->PIN_CNF[pin_number] = cnf;
    5f08:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
    5f0c:	b003      	add	sp, #12
    5f0e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00005f10 <nrf_gpio_cfg_sense_set>:
{
    5f10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    5f12:	f10d 030f 	add.w	r3, sp, #15
    5f16:	9301      	str	r3, [sp, #4]
    5f18:	2300      	movs	r3, #0
{
    5f1a:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    5f1e:	9300      	str	r3, [sp, #0]
    5f20:	461a      	mov	r2, r3
    5f22:	4619      	mov	r1, r3
    5f24:	f7ff ffad 	bl	5e82 <nrf_gpio_reconfigure>
}
    5f28:	b005      	add	sp, #20
    5f2a:	f85d fb04 	ldr.w	pc, [sp], #4

00005f2e <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
    5f2e:	f7fe b9ed 	b.w	430c <_DoInit>

00005f32 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
    5f32:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
    5f34:	f7ff fffb 	bl	5f2e <SEGGER_RTT_Init>

	return 0;
}
    5f38:	2000      	movs	r0, #0
    5f3a:	bd08      	pop	{r3, pc}

00005f3c <z_device_state_init>:
}
    5f3c:	4770      	bx	lr

00005f3e <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    5f3e:	b138      	cbz	r0, 5f50 <z_device_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    5f40:	68c3      	ldr	r3, [r0, #12]
    5f42:	8818      	ldrh	r0, [r3, #0]
    5f44:	f3c0 0008 	ubfx	r0, r0, #0, #9
    5f48:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
    5f4c:	4258      	negs	r0, r3
    5f4e:	4158      	adcs	r0, r3
}
    5f50:	4770      	bx	lr

00005f52 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    5f52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5f54:	4605      	mov	r5, r0
    5f56:	460e      	mov	r6, r1
	__asm__ volatile(
    5f58:	f04f 0320 	mov.w	r3, #32
    5f5c:	f3ef 8711 	mrs	r7, BASEPRI
    5f60:	f383 8812 	msr	BASEPRI_MAX, r3
    5f64:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    5f68:	f7fe ff44 	bl	4df4 <z_impl_z_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    5f6c:	4631      	mov	r1, r6
    5f6e:	4604      	mov	r4, r0
    5f70:	4628      	mov	r0, r5
    5f72:	f7ff ff6a 	bl	5e4a <k_sys_fatal_error_handler>
	__asm__ volatile(
    5f76:	f387 8811 	msr	BASEPRI, r7
    5f7a:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    5f7e:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    5f80:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    5f84:	f7fc bbdc 	b.w	2740 <z_impl_k_thread_abort>

00005f88 <z_pm_save_idle_exit>:
{
    5f88:	b508      	push	{r3, lr}
	pm_system_resume();
    5f8a:	f7fc f82f 	bl	1fec <pm_system_resume>
}
    5f8e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    5f92:	f7ff bf59 	b.w	5e48 <sys_clock_idle_exit>

00005f96 <k_mem_slab_init>:
{
    5f96:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
    5f98:	2400      	movs	r4, #0
    5f9a:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    5f9c:	ea41 0402 	orr.w	r4, r1, r2
    5fa0:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
    5fa4:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
    5fa8:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    5faa:	d10c      	bne.n	5fc6 <k_mem_slab_init+0x30>
	slab->free_list = NULL;
    5fac:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    5fae:	42a3      	cmp	r3, r4
    5fb0:	d103      	bne.n	5fba <k_mem_slab_init+0x24>
	list->tail = (sys_dnode_t *)list;
    5fb2:	e9c0 0000 	strd	r0, r0, [r0]
}
    5fb6:	2000      	movs	r0, #0
}
    5fb8:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
    5fba:	6945      	ldr	r5, [r0, #20]
    5fbc:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    5fbe:	3401      	adds	r4, #1
		slab->free_list = p;
    5fc0:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
    5fc2:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
    5fc4:	e7f3      	b.n	5fae <k_mem_slab_init+0x18>
		return -EINVAL;
    5fc6:	f06f 0015 	mvn.w	r0, #21
	return rc;
    5fca:	e7f5      	b.n	5fb8 <k_mem_slab_init+0x22>

00005fcc <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    5fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5fce:	4604      	mov	r4, r0
    5fd0:	460d      	mov	r5, r1
	__asm__ volatile(
    5fd2:	f04f 0320 	mov.w	r3, #32
    5fd6:	f3ef 8611 	mrs	r6, BASEPRI
    5fda:	f383 8812 	msr	BASEPRI_MAX, r3
    5fde:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    5fe2:	6947      	ldr	r7, [r0, #20]
    5fe4:	b977      	cbnz	r7, 6004 <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    5fe6:	f000 f8b2 	bl	614e <z_unpend_first_thread>

		if (pending_thread != NULL) {
    5fea:	b158      	cbz	r0, 6004 <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    5fec:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    5fee:	6142      	str	r2, [r0, #20]
    5ff0:	6787      	str	r7, [r0, #120]	; 0x78
			z_ready_thread(pending_thread);
    5ff2:	f000 f84d 	bl	6090 <z_ready_thread>
			z_reschedule(&slab->lock, key);
    5ff6:	4631      	mov	r1, r6
    5ff8:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    5ffc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
    6000:	f7fe bc3c 	b.w	487c <z_reschedule>
	**(char ***) mem = slab->free_list;
    6004:	682b      	ldr	r3, [r5, #0]
    6006:	6962      	ldr	r2, [r4, #20]
    6008:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    600a:	682b      	ldr	r3, [r5, #0]
    600c:	6163      	str	r3, [r4, #20]
	slab->num_used--;
    600e:	69a3      	ldr	r3, [r4, #24]
    6010:	3b01      	subs	r3, #1
    6012:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
    6014:	f386 8811 	msr	BASEPRI, r6
    6018:	f3bf 8f6f 	isb	sy
}
    601c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000601e <z_impl_k_mutex_init>:
{
    601e:	4603      	mov	r3, r0
	mutex->owner = NULL;
    6020:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
    6022:	e9c3 0002 	strd	r0, r0, [r3, #8]
    6026:	e9c3 3300 	strd	r3, r3, [r3]
}
    602a:	4770      	bx	lr

0000602c <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
    602c:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    6030:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    6032:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    6034:	2300      	movs	r3, #0
	node->prev = NULL;
    6036:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
    603a:	4770      	bx	lr

0000603c <unpend_thread_no_timeout>:
{
    603c:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
    603e:	f7ff fff5 	bl	602c <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    6042:	7b43      	ldrb	r3, [r0, #13]
    6044:	f023 0302 	bic.w	r3, r3, #2
    6048:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
    604a:	2300      	movs	r3, #0
    604c:	6083      	str	r3, [r0, #8]
}
    604e:	bd08      	pop	{r3, pc}

00006050 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    6050:	4603      	mov	r3, r0
    6052:	b920      	cbnz	r0, 605e <z_reschedule_irqlock+0xe>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    6054:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
    6058:	b90a      	cbnz	r2, 605e <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
    605a:	f7fc b989 	b.w	2370 <arch_swap>
    605e:	f383 8811 	msr	BASEPRI, r3
    6062:	f3bf 8f6f 	isb	sy
}
    6066:	4770      	bx	lr

00006068 <z_reschedule_unlocked>:
	__asm__ volatile(
    6068:	f04f 0320 	mov.w	r3, #32
    606c:	f3ef 8011 	mrs	r0, BASEPRI
    6070:	f383 8812 	msr	BASEPRI_MAX, r3
    6074:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    6078:	f7ff bfea 	b.w	6050 <z_reschedule_irqlock>

0000607c <z_priq_dumb_best>:
{
    607c:	4603      	mov	r3, r0
	return list->head == list;
    607e:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6080:	4283      	cmp	r3, r0
    6082:	d003      	beq.n	608c <z_priq_dumb_best+0x10>
	if (n != NULL) {
    6084:	2800      	cmp	r0, #0
    6086:	bf38      	it	cc
    6088:	2000      	movcc	r0, #0
    608a:	4770      	bx	lr
	struct k_thread *thread = NULL;
    608c:	2000      	movs	r0, #0
}
    608e:	4770      	bx	lr

00006090 <z_ready_thread>:
{
    6090:	b510      	push	{r4, lr}
    6092:	f04f 0320 	mov.w	r3, #32
    6096:	f3ef 8411 	mrs	r4, BASEPRI
    609a:	f383 8812 	msr	BASEPRI_MAX, r3
    609e:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
    60a2:	f7fe fcb1 	bl	4a08 <ready_thread>
	__asm__ volatile(
    60a6:	f384 8811 	msr	BASEPRI, r4
    60aa:	f3bf 8f6f 	isb	sy
}
    60ae:	bd10      	pop	{r4, pc}

000060b0 <z_thread_timeout>:
{
    60b0:	b510      	push	{r4, lr}
    60b2:	4601      	mov	r1, r0
	__asm__ volatile(
    60b4:	f04f 0320 	mov.w	r3, #32
    60b8:	f3ef 8411 	mrs	r4, BASEPRI
    60bc:	f383 8812 	msr	BASEPRI_MAX, r3
    60c0:	f3bf 8f6f 	isb	sy
		if (!killed) {
    60c4:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
    60c8:	f013 0f28 	tst.w	r3, #40	; 0x28
    60cc:	d10d      	bne.n	60ea <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
    60ce:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
    60d2:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
    60d4:	b10b      	cbz	r3, 60da <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
    60d6:	f7ff ffb1 	bl	603c <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    60da:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
    60de:	f023 0314 	bic.w	r3, r3, #20
    60e2:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
    60e6:	f7fe fc8f 	bl	4a08 <ready_thread>
	__asm__ volatile(
    60ea:	f384 8811 	msr	BASEPRI, r4
    60ee:	f3bf 8f6f 	isb	sy
}
    60f2:	bd10      	pop	{r4, pc}

000060f4 <add_to_waitq_locked>:
{
    60f4:	b538      	push	{r3, r4, r5, lr}
    60f6:	4604      	mov	r4, r0
    60f8:	460d      	mov	r5, r1
	unready_thread(thread);
    60fa:	f7fe fcdb 	bl	4ab4 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    60fe:	7b63      	ldrb	r3, [r4, #13]
    6100:	f043 0302 	orr.w	r3, r3, #2
    6104:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    6106:	b1b5      	cbz	r5, 6136 <add_to_waitq_locked+0x42>
	return list->head == list;
    6108:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
    610a:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    610c:	429d      	cmp	r5, r3
    610e:	bf08      	it	eq
    6110:	2300      	moveq	r3, #0
    6112:	2b00      	cmp	r3, #0
    6114:	bf38      	it	cc
    6116:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6118:	b19b      	cbz	r3, 6142 <add_to_waitq_locked+0x4e>
	int32_t b1 = thread_1->base.prio;
    611a:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    611e:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
    6122:	4291      	cmp	r1, r2
    6124:	d008      	beq.n	6138 <add_to_waitq_locked+0x44>
		return b2 - b1;
    6126:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    6128:	2a00      	cmp	r2, #0
    612a:	dd05      	ble.n	6138 <add_to_waitq_locked+0x44>
	sys_dnode_t *const prev = successor->prev;
    612c:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    612e:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    6132:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    6134:	605c      	str	r4, [r3, #4]
}
    6136:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
    6138:	686a      	ldr	r2, [r5, #4]
    613a:	4293      	cmp	r3, r2
    613c:	d001      	beq.n	6142 <add_to_waitq_locked+0x4e>
    613e:	681b      	ldr	r3, [r3, #0]
    6140:	e7ea      	b.n	6118 <add_to_waitq_locked+0x24>
	sys_dnode_t *const tail = list->tail;
    6142:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    6144:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    6148:	601c      	str	r4, [r3, #0]
	list->tail = node;
    614a:	606c      	str	r4, [r5, #4]
    614c:	e7f3      	b.n	6136 <add_to_waitq_locked+0x42>

0000614e <z_unpend_first_thread>:
{
    614e:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    6150:	f04f 0320 	mov.w	r3, #32
    6154:	f3ef 8511 	mrs	r5, BASEPRI
    6158:	f383 8812 	msr	BASEPRI_MAX, r3
    615c:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
    6160:	f7ff ff8c 	bl	607c <z_priq_dumb_best>
		if (thread != NULL) {
    6164:	4604      	mov	r4, r0
    6166:	b120      	cbz	r0, 6172 <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
    6168:	f7ff ff68 	bl	603c <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    616c:	3018      	adds	r0, #24
    616e:	f000 f80c 	bl	618a <z_abort_timeout>
	__asm__ volatile(
    6172:	f385 8811 	msr	BASEPRI, r5
    6176:	f3bf 8f6f 	isb	sy
}
    617a:	4620      	mov	r0, r4
    617c:	bd38      	pop	{r3, r4, r5, pc}

0000617e <k_is_in_isr>:
    617e:	f3ef 8005 	mrs	r0, IPSR
}
    6182:	3800      	subs	r0, #0
    6184:	bf18      	it	ne
    6186:	2001      	movne	r0, #1
    6188:	4770      	bx	lr

0000618a <z_abort_timeout>:
{
    618a:	b510      	push	{r4, lr}
	__asm__ volatile(
    618c:	f04f 0220 	mov.w	r2, #32
    6190:	f3ef 8411 	mrs	r4, BASEPRI
    6194:	f382 8812 	msr	BASEPRI_MAX, r2
    6198:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    619c:	6803      	ldr	r3, [r0, #0]
    619e:	b13b      	cbz	r3, 61b0 <z_abort_timeout+0x26>
			remove_timeout(to);
    61a0:	f7fe ff64 	bl	506c <remove_timeout>
			ret = 0;
    61a4:	2000      	movs	r0, #0
	__asm__ volatile(
    61a6:	f384 8811 	msr	BASEPRI, r4
    61aa:	f3bf 8f6f 	isb	sy
}
    61ae:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    61b0:	f06f 0015 	mvn.w	r0, #21
    61b4:	e7f7      	b.n	61a6 <z_abort_timeout+0x1c>

000061b6 <z_get_next_timeout_expiry>:
{
    61b6:	b510      	push	{r4, lr}
	__asm__ volatile(
    61b8:	f04f 0320 	mov.w	r3, #32
    61bc:	f3ef 8411 	mrs	r4, BASEPRI
    61c0:	f383 8812 	msr	BASEPRI_MAX, r3
    61c4:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    61c8:	f7fe ff6a 	bl	50a0 <next_timeout>
	__asm__ volatile(
    61cc:	f384 8811 	msr	BASEPRI, r4
    61d0:	f3bf 8f6f 	isb	sy
}
    61d4:	bd10      	pop	{r4, pc}

000061d6 <z_set_timeout_expiry>:
{
    61d6:	b570      	push	{r4, r5, r6, lr}
    61d8:	4604      	mov	r4, r0
    61da:	460d      	mov	r5, r1
	__asm__ volatile(
    61dc:	f04f 0320 	mov.w	r3, #32
    61e0:	f3ef 8611 	mrs	r6, BASEPRI
    61e4:	f383 8812 	msr	BASEPRI_MAX, r3
    61e8:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
    61ec:	f7fe ff58 	bl	50a0 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    61f0:	2801      	cmp	r0, #1
    61f2:	dd05      	ble.n	6200 <z_set_timeout_expiry+0x2a>
    61f4:	42a0      	cmp	r0, r4
    61f6:	db03      	blt.n	6200 <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    61f8:	4629      	mov	r1, r5
    61fa:	4620      	mov	r0, r4
    61fc:	f7fd faf2 	bl	37e4 <sys_clock_set_timeout>
	__asm__ volatile(
    6200:	f386 8811 	msr	BASEPRI, r6
    6204:	f3bf 8f6f 	isb	sy
}
    6208:	bd70      	pop	{r4, r5, r6, pc}

0000620a <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    620a:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    620c:	f7ff f868 	bl	52e0 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    6210:	bd08      	pop	{r3, pc}

00006212 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    6212:	b108      	cbz	r0, 6218 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    6214:	f7fc bbce 	b.w	29b4 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    6218:	4770      	bx	lr

0000621a <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    621a:	4770      	bx	lr

0000621c <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    621c:	f7fd bf8e 	b.w	413c <SystemInit>
